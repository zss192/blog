<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏日 の blog</title>
  
  
  <link href="https://zss192.github.io/atom.xml" rel="self"/>
  
  <link href="https://zss192.github.io/"/>
  <updated>2021-04-09T09:36:39.963Z</updated>
  <id>https://zss192.github.io/</id>
  
  <author>
    <name>夏日</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2015年第六届蓝桥杯C/C++B组省赛题目解析</title>
    <link href="https://zss192.github.io/2021/04/09/2015%E5%B9%B4%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AFCC++B%E7%BB%84%E7%9C%81%E8%B5%9B%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://zss192.github.io/2021/04/09/2015%E5%B9%B4%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AFCC++B%E7%BB%84%E7%9C%81%E8%B5%9B%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2021-04-09T09:22:28.000Z</published>
    <updated>2021-04-09T09:36:39.963Z</updated>
    
    <content type="html"><![CDATA[<h1>1.奖券数目</h1><p>有些人很迷信数字，比如带“4”的数字，认为和“死”谐音，就觉得不吉利。<br>虽然这些说法纯属无稽之谈，但有时还要迎合大众的需求。某抽奖活动的奖券号码是5位数（10000-99999），要求其中不要出现带“4”的号码，主办单位请你计算一下，如果任何两张奖券不重号，最多可发出奖券多少张。</p><ul><li>思路一：代码解题</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(string n)</span>   <span class="comment">//这里用字符判断，也可以用int类型%10判断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n[i]==<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10000</span>; i &lt;= <span class="number">99999</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="built_in">to_string</span>(i)))</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路二：手算</li></ul><p>总共5位数字，最高位不能用0和4可用位数为8，剩下四位数字除4外都可以用每位可用数字为9位</p><p>最终结果为8<em>9</em>9<em>9</em>9=52488</p><h1>2.星系炸弹</h1><p>在X星系的广袤空间中漂浮着许多X星人造“炸弹”，用来作为宇宙中的路标。每个炸弹都可以设定多少天之后爆炸。</p><p>比如：阿尔法炸弹2015年1月1日放置，定时为15天，则它在2015年1月16日爆炸。</p><p>有一个贝塔炸弹，2014年11月9日放置，定时为1000天，请你计算它爆炸的准确日期。</p><p>请填写该日期，格式为 yyyy-mm-dd 即4位年份2位月份2位日期。比如：2015-02-19请严格按照格式书写。不能出现其它文字或符号。</p><blockquote><p>蓝桥杯每年基本都会有一道关于日期的问题，基本都可以用以下几种方法解决</p></blockquote><ul><li>思路一：代码解题</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不推荐用代码解题，费时(用下面的方法更快)，但必须要会</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> month[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;; <span class="comment">//2014不是闰年，初始2月为28天</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLunar</span><span class="params">(<span class="keyword">int</span> year)</span>  <span class="comment">//判断是否是闰年</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>||(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">2014</span>,m=<span class="number">11</span>,d=<span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) <span class="comment">//1000天相当于1000次循环</span></span><br><span class="line">    &#123;  </span><br><span class="line">        d++;</span><br><span class="line">        <span class="keyword">if</span>(d&gt;month[m]) <span class="comment">//如果天数大于当月天数</span></span><br><span class="line">        &#123;</span><br><span class="line">            m++;    <span class="comment">//月份+1</span></span><br><span class="line">            d=<span class="number">1</span>;    <span class="comment">//天数置1</span></span><br><span class="line">            <span class="keyword">if</span>(m&gt;<span class="number">12</span>)    <span class="comment">//如果月数大于12，将月数置1年份加一</span></span><br><span class="line">            &#123;</span><br><span class="line">                m=<span class="number">1</span>;</span><br><span class="line">                y++;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isLunar</span>(y))  <span class="comment">//年份加一的时候判断当前年份是否是闰年</span></span><br><span class="line">                    month[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    month[<span class="number">2</span>]=<span class="number">28</span>;   <span class="comment">//注意不是闰年要把2月恢复成28天</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;y&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;m&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路三：Excel解题</li></ul><p>在第一个单元格输入2014/11/9，然后向下拉到1001即可</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409171828119.png"  alt="在这里插入图片描述"></p><p>如果不想向下一个一个拉，也可以选中这一列用序列填充，如图所示，1000天不到3年，填到2020年即可<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409171848210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409171853824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>也可以直接输入加1000</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409171936942.png"  alt="在这里插入图片描述"></p><ul><li>思路三：Windows自带计算器解题</li></ul><p>首先估计大概日期，起始大概是2015年，1000天后大概不到2018年，用windows的计算器功能先选到2018年1月1日<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409172004583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>可以看到2018年1月1日相差1149天，再往前调调可以发现2017年8月5日正好差1000天</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409172016397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h1>3.三羊献瑞</h1><p>观察下面的加法算式：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409172040511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>其中，相同的汉字代表相同的数字，不同的汉字代表不同的数字。</p><p>请你填写“三羊献瑞”所代表的4位数字（答案唯一），不要填写任何多余内容。</p><blockquote><p>主要解决两个问题：列举所有排列和判断排列是否满足题意</p></blockquote><ul><li>思路一：用next_permutation全排列函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">do</span>  <span class="comment">//全排列会列举10个数的所有排列组合</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">1</span>]==<span class="number">0</span>||nums[<span class="number">5</span>]==<span class="number">0</span>) <span class="keyword">continue</span>; <span class="comment">//最高位不能为0</span></span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">1000</span>*nums[<span class="number">1</span>]+<span class="number">100</span>*nums[<span class="number">2</span>]+<span class="number">10</span>*nums[<span class="number">3</span>]+nums[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> y=<span class="number">1000</span>*nums[<span class="number">5</span>]+<span class="number">100</span>*nums[<span class="number">6</span>]+<span class="number">10</span>*nums[<span class="number">7</span>]+nums[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> z=<span class="number">10000</span>*nums[<span class="number">5</span>]+<span class="number">1000</span>*nums[<span class="number">6</span>]+<span class="number">100</span>*nums[<span class="number">3</span>]+<span class="number">10</span>*nums[<span class="number">2</span>]+nums[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">if</span>(x+y==z)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;z&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;三羊献瑞代表的数字为：&quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(nums,nums+<span class="number">10</span>)); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//来源：https://www.jianshu.com/p/3b2eea3c5eff</span></span><br><span class="line"><span class="comment">//原本我是用全排列然后取前4位为祥瑞生辉，后四位为三羊献瑞，然后判断但是这样要判断两数相加的结果中一一对应且&#x27;气&#x27;不能和两个四字成语重复</span></span><br></pre></td></tr></table></figure><ul><li>思路二：用dfs列举所有排列判断</li></ul><p>判断思想和思路一一致，但列举排列采用的dfs，前几天学了dfs但没想到用这个看来还是要多练练</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//前8位都排好了则判断下是否满足要求</span></span><br><span class="line">    <span class="keyword">if</span>(step==<span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=nums[<span class="number">0</span>]*<span class="number">1000</span> + nums[<span class="number">1</span>]*<span class="number">100</span> + nums[<span class="number">2</span>]*<span class="number">10</span> + nums[<span class="number">3</span>];</span><br><span class="line">        y=nums[<span class="number">4</span>]*<span class="number">1000</span> + nums[<span class="number">5</span>]*<span class="number">100</span> + nums[<span class="number">6</span>]*<span class="number">10</span> + nums[<span class="number">1</span>];</span><br><span class="line">        z=nums[<span class="number">4</span>]*<span class="number">10000</span> + nums[<span class="number">5</span>]*<span class="number">1000</span> + nums[<span class="number">2</span>]*<span class="number">100</span> + nums[<span class="number">1</span>]*<span class="number">10</span> + nums[<span class="number">7</span>];</span><br><span class="line">        <span class="keyword">if</span>(x+y==z)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;z&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;三羊献瑞代表的数字为：&quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//相当于列举高位不为0的所有排列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((step==<span class="number">0</span>||step==<span class="number">4</span>)&amp;&amp;i==<span class="number">0</span>)    <span class="comment">//最高位不能为0</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">        &#123;</span><br><span class="line">            visited[i]=<span class="number">1</span>;</span><br><span class="line">            nums[step]=i;</span><br><span class="line">            <span class="built_in">dfs</span>(step+<span class="number">1</span>);</span><br><span class="line">            visited[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//来源：https://www.cnblogs.com/OctoptusLian/p/8543939.html#_label2</span></span><br></pre></td></tr></table></figure><h1>4.格子中输出</h1><p>StringInGrid函数会在一个指定大小的格子中打印指定的字符串。</p><p>要求字符串在水平、垂直两个方向上都居中。</p><p>如果字符串太长，就截断。</p><p>如果不能恰好居中，可以稍稍偏左或者偏上一点。</p><p>下面的程序实现这个逻辑，请填写划线部分缺少的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringInGrid</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(buf, s);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(s)&gt;width<span class="number">-2</span>) buf[width<span class="number">-2</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;(height<span class="number">-1</span>)/<span class="number">2</span>;k++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%*s%s%*s&quot;</span>,_____________________________________________);  <span class="comment">//填空</span></span><br><span class="line">          </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k=(height<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>; k&lt;height<span class="number">-1</span>; k++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;|\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">StringInGrid</span>(<span class="number">20</span>,<span class="number">6</span>,<span class="string">&quot;abcd1234&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于题目中数据，应该输出：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409172118496.png"  alt="在这里插入图片描述"></p><p>思路：这题就是单纯考输出，浏览代码发现没有abcd1234那一行内容，也可以直接先将填空那行注释掉运行下看看缺啥，如图<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409172124247.png"  alt="在这里插入图片描述"></p><p>这里隐含知识点就是printf(“%*s”,int,str)的含义</p><p>例如printf(“%*s”,6, “abc”)就是把”abc”放到在域宽为6的空间中右对齐。</p><p>而要填写的那行为&quot;%*s%s%*s&quot;对应着答案输出中的左边的空格，abcd1234和右边的空格</p><p>若要居中，左右的空格为(总宽度-字符串宽度)/2，注意这里总宽度要减去左右两个“|”</p><p>所以答案为(width-2-strlen(s))/2,&quot; “,s,(width-2-strlen(s))/2,” &quot;</p><h1>5.九数组分数</h1><p>1,2,3…9 这九个数字组成一个分数，其值恰好为1/3，如何组法？</p><p>下面的程序实现了该功能，请填写划线部分缺失的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = x[<span class="number">0</span>]*<span class="number">1000</span> + x[<span class="number">1</span>]*<span class="number">100</span> + x[<span class="number">2</span>]*<span class="number">10</span> + x[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> b = x[<span class="number">4</span>]*<span class="number">10000</span> + x[<span class="number">5</span>]*<span class="number">1000</span> + x[<span class="number">6</span>]*<span class="number">100</span> + x[<span class="number">7</span>]*<span class="number">10</span> + x[<span class="number">8</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(a*<span class="number">3</span>==b) <span class="built_in">printf</span>(<span class="string">&quot;%d / %d\n&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,t;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="built_in">test</span>(x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=k; i&lt;<span class="number">9</span>; i++)&#123;</span><br><span class="line">        &#123;t=x[k]; x[k]=x[i]; x[i]=t;&#125;</span><br><span class="line">        <span class="built_in">f</span>(x,k+<span class="number">1</span>);</span><br><span class="line">        _____________________________________________ <span class="comment">// 填空处</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">f</span>(x,<span class="number">0</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：非常经典的dfs，{t=x[k]; x[k]=x[i]; x[i]=t;}进行修改，调用f(x,k+1);后要将修改还原回来即回溯</p><p>而{t=x[k]; x[k]=x[i]; x[i]=t;}实际上就是将x[k]和x[i]互换，所以再次互换即可还原</p><p>答案：t=x[k]; x[k]=x[i]; x[i]=t;</p><h1>6.加法变乘法</h1><p>我们都知道：1+2+3+ … + 49 = 1225现在要求你把其中两个不相邻的加号变成乘号，使得结果为2015</p><p>比如：1+2+3+…+10<em>11+12+…+27</em>28+29+…+49 = 2015就是符合要求的答案。</p><p>请你寻找另外一个可能的答案，并把位置靠前的那个乘号左边的数字提交（对于示例，就是提交10）。</p><p>注意：需要你提交的是一个整数，不要填写任何多余的内容。</p><p>思路：替换其中两个加号，两个for循环遍历乘号位置，替换后用1225减去原来相加的值，再加上替换后相乘的值，如果等于2015便输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tihuan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1225</span>;</span><br><span class="line">    res=res-x-x<span class="number">-1</span>;</span><br><span class="line">    res=res-y-y<span class="number">-1</span>;</span><br><span class="line">    res=res+x*(x+<span class="number">1</span>);</span><br><span class="line">    res=res+y*(y+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">48</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= <span class="number">48</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=j&amp;&amp;<span class="built_in">abs</span>(i-j)!=<span class="number">1</span>&amp;&amp;<span class="built_in">tihuan</span>(i,j)==<span class="number">2015</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;j&lt;&lt;endl;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：16</p><h1>7.牌型种数</h1><p>小明被劫持到X赌城，被迫与其他3人玩牌。一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。这时，小明脑子里突然冒出一个问题：如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？</p><p>请填写该整数，不要填写任何多余的内容或说明文字。</p><p>思路：52张牌即A、2、3、… 、K，可以看成1、2、3…13每个数字分别有4个</p><p>最直接的用13个for循环每个循环从0到4代表当前卡牌选取卡牌个数，如果和为13，则结果加1</p><p>也可以用dfs替代多重循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>,sumn=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sumn&gt;<span class="number">13</span>)     <span class="comment">//若当前选取卡牌个数超过13则直接return(dfs剪枝)</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(step==<span class="number">13</span>)    <span class="comment">//当遍历到13号卡牌时</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sumn==<span class="number">13</span>)    <span class="comment">//若总共选了13张</span></span><br><span class="line">            res++;  </span><br><span class="line">        <span class="keyword">return</span>;    <span class="comment">//这个return不能放在if(sumn==13)里，无论sumn等不等于13都要return不然会一直循环下去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)    <span class="comment">//i代表step卡牌选了i张</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(step+<span class="number">1</span>,sum+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：3598180</p><h1>8.移动距离</h1><p>X星球居民小区的楼房全是一样的，并且按矩阵样式排列。其楼房的编号为1,2,3…当排满一行时，从下一行相邻的楼往反方向排号。比如：当小区排号宽度为6时，开始情形如下：</p><p>1 2 3 4 5 6</p><p>12 11 10 9 8 7</p><p>13 14 15 …</p><p>我们的问题是：已知了两个楼号m和n，需要求出它们之间的最短移动距离（不能斜线方向移动）</p><p>输入为3个整数w m n，空格分开，都在1到10000范围内w为排号宽度，m,n为待计算的楼号。要求输出一个整数，表示m n 两楼间最短移动距离。</p><p>例如：用户输入：6 8 2则，程序应该输出：4</p><p>再例如：用户输入：4 7 20则，程序应该输出：5</p><p>思路：先判断两个数分别所在的行和列，然后用行的差和列的差相加即可</p><p>为计算方便矩阵从0行0列开始，0行0列存放0，所以对m和n减1即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> w,m,n;</span><br><span class="line"><span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line"><span class="keyword">int</span> j1,j2,res;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;w&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    j1=((m<span class="number">-1</span>)/w)%<span class="number">2</span>;<span class="comment">//m是否在奇数行</span></span><br><span class="line">    j2=((n<span class="number">-1</span>)/w)%<span class="number">2</span>;<span class="comment">//n是否在奇数行</span></span><br><span class="line"></span><br><span class="line">    x1=(m<span class="number">-1</span>)/w;</span><br><span class="line">    y1=(m<span class="number">-1</span>)%w;</span><br><span class="line">    <span class="keyword">if</span>(j1==<span class="number">1</span>)   <span class="comment">//如果在奇数行y要调换位置</span></span><br><span class="line">        y1=w-y1<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    x2=(n<span class="number">-1</span>)/w;</span><br><span class="line">    y2=(n<span class="number">-1</span>)%w;</span><br><span class="line">    <span class="keyword">if</span>(j2==<span class="number">1</span>)</span><br><span class="line">        y2=w-y2<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    res=<span class="built_in">abs</span>(x1-x2)+<span class="built_in">abs</span>(y1-y2);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>9.垒骰子</h1><p>赌圣atm晚年迷恋上了垒骰子，就是把骰子一个垒在另一个上边，不能歪歪扭扭，要垒成方柱体。经过长期观察，atm 发现了稳定骰子的奥秘：有些数字的面贴着会互相排斥！我们先来规范一下骰子：1 的对面是 4，2 的对面是 5，3 的对面是 6。假设有 m 组互斥现象，每组中的那两个数字的面紧贴在一起，骰子就不能稳定的垒起来。atm想计算一下有多少种不同的可能的垒骰子方式。两种垒骰子方式相同，当且仅当这两种方式中对应高度的骰子的对应数字的朝向都相同。由于方案数可能过多，请输出模 10^9 + 7 的结果。</p><p>不要小看了 atm 的骰子数量哦～</p><p>「输入格式」第一行两个整数 n mn表示骰子数目接下来 m 行，每行两个整数 a b ，表示 a 和 b 数字不能紧贴在一起。</p><p>「输出格式」一行一个数，表示答案模 10^9 + 7 的结果。</p><p>「样例输入」<br>2 1<br>1 2</p><p>「样例输出」544</p><p>「数据范围」对于 30% 的数据：n &lt;= 5对于 60% 的数据：n &lt;= 100对于 100% 的数据：0 &lt; n &lt;= 10^9, m &lt;= 36</p><ul><li>思路一：用记忆化DP列举所有情况，对于每个骰子可以旋转结果乘4，具体解析见代码</li></ul><p>代码来自：<a href="https://www.cnblogs.com/OctoptusLian/p/8543939.html#_label6">2015年第六届蓝桥杯C/C++B组省赛题目解析</a>，根据自己理解加了详细注释</p><blockquote><p>能拿一半多的分，但数据较大时会超时</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> o[<span class="number">7</span>] = &#123; <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;; <span class="comment">//这样写好处是比如底面是1，那顶面就是o[1]=4</span></span><br><span class="line"><span class="keyword">bool</span> conflict[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[maxn][<span class="number">7</span>];  <span class="comment">//dp[p][q]表示第p层骰子底面是q的情况种数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step, <span class="keyword">int</span> p)</span>  <span class="comment">//计算第step层骰子底面是p时的情况种数(暂不考虑骰子可以旋转)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (step == n)      <span class="comment">//最顶层底面无论是什么情况都是一种</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dp[step][p] &gt;= <span class="number">0</span>)   <span class="comment">//若第step层底面是q的情况种数大于等于0说明之前计算过这个数，可以直接返回，不用重复计算</span></span><br><span class="line">        <span class="keyword">return</span> dp[step][p];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (conflict[i][o[p]])  <span class="comment">//判断上面那个骰子底面是i时和当前骰子的顶面o[p]冲不冲突</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        t += <span class="built_in">dfs</span>(step + <span class="number">1</span>, i);  <span class="comment">//遍历上面的骰子底面是i的情况种数</span></span><br><span class="line">        t %= N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[step][p] = t; <span class="comment">//返回第step层底面是p的情况种数，并将结果存到数组中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t1, t2;</span><br><span class="line">        cin &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">        conflict[t1][t2] = <span class="number">1</span>;</span><br><span class="line">        conflict[t2][t1] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += <span class="built_in">dfs</span>(<span class="number">1</span>, i);   <span class="comment">//对于第一层骰子，底面分别是1~6时的情况种数相加</span></span><br><span class="line">        ans %= N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//而每个骰子可以旋转4次,所以对于每个骰子ans都要乘4</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans *= <span class="number">4</span>;</span><br><span class="line">        ans %= N;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路二：矩阵快速幂</li></ul><p>快速幂基础知识讲解：<a href="https://blog.csdn.net/zss192/article/details/115552759">快速幂</a></p><blockquote><p>注：以下思路和代码来源和思路一相同</p></blockquote><p>和思路一一样，我们只考虑底面的情况，最后乘上4^n即可。</p><p>我们设六阶矩阵An，其中An的第a行第b列表示第一层底面数字为a、第n层数字为b的所有排列的情况</p><p>记六阶矩阵X中，第a行第b列表示相邻两层的是否能成功连接的情况。a和b能连则为1，a和b不能连则为0（注意是相邻两层的底面，不是衔接面，所以要转化，比如题给的1 2要改为1 5）</p><p>根据上述定义，易得递推式：</p><p>An = An-1X，且 A1 = E（六阶单位矩阵）</p><p>可得到An的表达式为An = Xn-1</p><p>那么ans就是矩阵 Xn-1 的36个元素之和</p><p>注意最后侧面的4^n也要二分幂不然会爆炸</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="keyword">int</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) </span><br><span class="line">            a[i][i] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix&amp; p, <span class="keyword">const</span> Matrix&amp; q) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">ret</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                ret.a[i][j] += p.a[i][k] * q.a[k][j];</span><br><span class="line">                ret.a[i][j] %= N;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">fast_mod</span><span class="params">(Matrix x, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">ret</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>)ret = x*ret;</span><br><span class="line">        x = x*x;</span><br><span class="line">        t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">z</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>  j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">            z.a[i][j] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t1, t2;</span><br><span class="line">        cin &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">        z.a[t1 - <span class="number">1</span>][(t2 + <span class="number">2</span>) % <span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">        z.a[t2 - <span class="number">1</span>][(t1 + <span class="number">2</span>) % <span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">ret</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    ret = <span class="built_in">fast_mod</span>(z, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += ret.a[i][j];</span><br><span class="line">            ans %= N;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//用快速幂计算4的n次方乘上ans，用for循环直接算会超时(如n=724691113时)</span></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans *= p;</span><br><span class="line">            ans %= N;</span><br><span class="line">        &#125;</span><br><span class="line">        p *= p;</span><br><span class="line">        p %= N;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>10.生命之树</h1><p>在X森林里，上帝创建了生命之树。</p><p>他给每棵树的每个节点（叶子也称为一个节点）上，都标了一个整数，代表这个点的和谐值。上帝要在这棵树内选出一个非空节点集S，使得对于S中的任意两个点a,b，都存在一个点列 {a, v1, v2, …, vk, b} 使得这个点列中的每个点都是S里面的元素，且序列中相邻两个点间有一条边相连。</p><p>在这个前提下，上帝要使得S中的点所对应的整数的和尽量大。这个最大的和就是上帝给生命之树的评分。</p><p>经过atm的努力，他已经知道了上帝给每棵树上每个节点上的整数。但是由于 atm 不擅长计算，他不知道怎样有效的求评分。他需要你为他写一个程序来计算一棵树的分数。</p><p>「输入格式」第一行一个整数 n 表示这棵树有 n 个节点。第二行 n 个整数，依次表示每个节点的评分。接下来 n-1 行，每行 2 个整数 u, v，表示存在一条 u 到 v 的边。由于这是一棵树，所以是不存在环的。</p><p>「输出格式」输出一行一个数，表示上帝给这棵树的分数。</p><p>「样例输入」</p><p>5</p><p>1 -2 -3 4 5</p><p>4 2</p><p>3 1</p><p>1 2</p><p>2 5</p><p>「样例输出」8</p><p>「数据范围」对于 30% 的数据，n &lt;= 10对于 100% 的数据，0 &lt; n &lt;= 10^5, 每个节点的评分的绝对值不超过 10^6 。</p><p>题目直白翻译：在一棵树中，每个点都有一个权值，找到一个连通的节点序列使得权值和最大，输出这个最大权值</p><p>如题目示例中，蓝色方框中的节点权值和最大，为8</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210409172200610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>思路：考察树形DP，详细解释见代码(结合上图理解)</p><p>大致意思构造邻接表，然后以每个节点为根节点利用dfs算出其最大连通权值和然后取最大值</p><p>在示例中当以b为根节点时是最大值，与b相连的节点有a、e、d，而他们权值都大于0所以quan[b]的值就是quan[b] + quan[a] + quan[e] + quan[d] = 8</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll quan[N];    <span class="comment">//初始输入存放每个点的权值，后续存放以每个节点为根节点时的连通最大权值和</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; linjie[N];   <span class="comment">//邻接表</span></span><br><span class="line">ll res;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以root为根算出最大权值和</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> father)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; linjie[root].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> son = linjie[root][i];</span><br><span class="line">        <span class="keyword">if</span> (son != father)  <span class="comment">//判断邻接表中的son节点是不是已经计算过了</span></span><br><span class="line">        &#123;<span class="comment">//如dfs(a,0)进来调用dfs(b,a)时，son=a,而此时son=father=a说明就是从a过来的，已经计算过a了</span></span><br><span class="line">            <span class="built_in">dfs</span>(son, root);</span><br><span class="line">            <span class="keyword">if</span> (quan[son] &gt; <span class="number">0</span>)  <span class="comment">//如果子节点的权值大于0则将子节点的权值加到root节点的权值上</span></span><br><span class="line">                quan[root] += quan[son];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">max</span>(res, quan[root]); <span class="comment">//从所有以每个节点为根节点的最大权值和中取最大值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) </span><br><span class="line">        cin&gt;&gt;quan[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; i ++ )  <span class="comment">//构造邻接表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">        linjie[u].<span class="built_in">push_back</span>(v); </span><br><span class="line">        linjie[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1.奖券数目&lt;/h1&gt;
&lt;p&gt;有些人很迷信数字，比如带“4”的数字，认为和“死”谐音，就觉得不吉利。&lt;br&gt;
虽然这些说法纯属无稽之谈，但有时还要迎合大众的需求。某抽奖活动的奖券号码是5位数（10000-99999），要求其中不要出现带“4”的号码，主办单位请你计算一下，</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>快速幂</title>
    <link href="https://zss192.github.io/2021/04/09/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://zss192.github.io/2021/04/09/%E5%BF%AB%E9%80%9F%E5%B9%82/</id>
    <published>2021-04-09T08:04:13.000Z</published>
    <updated>2021-04-09T09:35:30.083Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载于：<a href="https://zhuanlan.zhihu.com/p/95902286">算法学习笔记(4)：快速幂</a></p></blockquote><div class="RichText ztext Post-RichText"><p><b>快速幂</b>（<b>Exponentiation by squaring</b>，平方求幂）是一种简单而有效的小算法，它可以以<img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=O%28%5Clog+n%29"  alt="[公式]" eeimg="1" data-formula="O(\log n)">的时间复杂度计算乘方。快速幂不仅本身非常常见，而且后续很多算法也都会用到快速幂。</p><hr><p>让我们先来思考一个问题：<b>7的10次方，怎样算比较快？</b></p><p><b>方法1：</b>最朴素的想法，7*7=49，49*7=343，... 一步一步算，共进行了<b>9次</b>乘法。</p><p>这样算无疑太慢了，尤其对计算机的CPU而言，每次运算只乘上一个个位数，无疑太屈才了。这时我们想到，也许可以拆分问题。</p><p><b>方法2：</b>先算7的5次方，即7*7*7*7*7，再算它的平方，共进行了<b>5次</b>乘法。</p><p>但这并不是最优解，因为对于“7的5次方”，我们仍然可以拆分问题。</p><p><b>方法3：</b>先算7*7得49，则7的5次方为49*49*7，再算它的平方，共进行了<b>4次</b>乘法。</p><p>模仿这样的过程，我们得到一个在 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=O%28%5Clog+n%29"  alt="[公式]" eeimg="1" data-formula="O(\log n)"> 时间内计算出幂的算法，也就是快速幂。</p><hr><h2>递归快速幂</h2><p>刚刚我们用到的，无非是一个<b>二分</b>的思路。我们很自然地可以得到一个递归方程：</p><p><img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=a%5En%3D%5Cbegin%7Bcases%7Da%5E%7Bn-1%7D%5Ccdot+a%2C%26%5Ctext%7Bif+%7D+n+%5Ctext+%7B+is+odd%7D+%5C%5C+a%5E%7B%5Cfrac%7Bn%7D%7B2%7D%7D%5Ccdot+a%5E%7B%5Cfrac%7Bn%7D%7B2%7D%7D%2C+%26%5Ctext%7Bif+%7D+n+%5Ctext+%7B+is+even+but+not+0%7D%5C%5C+1%2C%26%5Ctext%7Bif+%7D+n%3D0%5Cend%7Bcases%7D"  alt="[公式]" eeimg="1" data-formula="a^n=\begin{cases}a^{n-1}\cdot a,&amp;\text{if } n \text { is odd} \\ a^{\frac{n}{2}}\cdot a^{\frac{n}{2}}, &amp;\text{if } n \text { is even but not 0}\\ 1,&amp;\text{if } n=0\end{cases}"> </p><p>计算a的n次方，如果n是偶数（不为0），那么就<b>先计算a的n/2次方，然后平方</b>；如果n是奇数，那么就<b>先计算a的n-1次方，再乘上a</b>；递归出口是<b>a的0次方为1</b>。</p><p>递归快速幂的思路非常自然，代码也很简单（直接把递归方程翻译成代码即可）：</p><div class="highlight"><pre><code class="language-cpp"><span class="c1">//递归快速幂</span><span class="c1"></span><span class="kt">int</span> <span class="nf">qpow</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="p">&#123;</span>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>        <span class="k">return</span> <span class="n">qpow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">a</span><span class="p">;</span>    <span class="k">else</span>    <span class="p">&#123;</span>        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">qpow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>        <span class="k">return</span> <span class="n">temp</span> <span class="o">*</span> <span class="n">temp</span><span class="p">;</span>    <span class="p">&#125;</span><span class="p">&#125;</span></code></pre></div><p>注意，这个temp变量是必要的，因为如果不把<img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=a%5E%7B%5Cfrac%7Bn%7D%7B2%7D%7D"  alt="[公式]" eeimg="1" data-formula="a^{\frac{n}{2}}">记录下来，直接写成qpow(a, n /2)*qpow(a, n /2)，那会计算两次<img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=a%5E%7B%5Cfrac%7Bn%7D%7B2%7D%7D"  alt="[公式]" eeimg="1" data-formula="a^{\frac{n}{2}}">，整个算法就退化为了 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=O%28n%29"  alt="[公式]" eeimg="1" data-formula="O(n)"> 。</p><p>在实际问题中，题目常常会要求对一个大素数取模，这是因为计算结果可能会非常巨大，但是在这里考察高精度又没有必要。这时我们的快速幂也应当进行取模，此时应当注意，原则是<b>步步取模</b>，如果MOD较大，还应当<b>开long long</b>。</p><div class="highlight"><pre><code class="language-cpp"><span class="c1">//递归快速幂（对大素数取模）</span><span class="c1"></span><span class="cp">#define MOD 1000000007</span><span class="cp"></span><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span><span class="n">ll</span> <span class="nf">qpow</span><span class="p">(</span><span class="n">ll</span> <span class="n">a</span><span class="p">,</span> <span class="n">ll</span> <span class="n">n</span><span class="p">)</span><span class="p">&#123;</span>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>        <span class="k">return</span> <span class="n">qpow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">a</span> <span class="o">%</span> <span class="n">MOD</span><span class="p">;</span>    <span class="k">else</span>    <span class="p">&#123;</span>        <span class="n">ll</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">qpow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">%</span> <span class="n">MOD</span><span class="p">;</span>        <span class="k">return</span> <span class="n">temp</span> <span class="o">*</span> <span class="n">temp</span> <span class="o">%</span> <span class="n">MOD</span><span class="p">;</span>    <span class="p">&#125;</span><span class="p">&#125;</span></code></pre></div><p>大家知道，递归虽然<b>简洁</b>，但会产生<b>额外的空间开销</b>。我们可以把递归改写为循环，来避免对栈空间的大量占用，也就是<b>非递归快速幂</b>。</p><h2>非递归快速幂</h2><p>我们换一个角度来引入非递归的快速幂。还是7的10次方，但这次，我们把10写成<b>二进制</b>的形式，也就是 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=%281010%29_2"  alt="[公式]" eeimg="1" data-formula="(1010)_2"> 。</p><p>现在我们要计算 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=7%5E%7B%281010%29_2%7D"  alt="[公式]" eeimg="1" data-formula="7^{(1010)_2}"> ，可以怎么做？我们很自然地想到可以把它拆分为 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=7%5E%7B%281000%29_2%7D+%5Ccdot+7%5E%7B%2810%29_2%7D+"  alt="[公式]" eeimg="1" data-formula="7^{(1000)_2} \cdot 7^{(10)_2} "> . 实际上，对于任意的整数，我们都可以把它拆成若干个 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=7%5E%7B%28100...%29_2%7D"  alt="[公式]" eeimg="1" data-formula="7^{(100...)_2}"> 的形式相乘。而这些<img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=7%5E%7B%28100...%29_2%7D"  alt="[公式]" eeimg="1" data-formula="7^{(100...)_2}">，恰好就是 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=7%5E1"  alt="[公式]" eeimg="1" data-formula="7^1"> 、<img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=7%5E2"  alt="[公式]" eeimg="1" data-formula="7^2">、<img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=7%5E4"  alt="[公式]" eeimg="1" data-formula="7^4">……我们只需<b>不断把底数平方</b>就可以算出它们。</p><p>我们先看代码，再来仔细推敲这个过程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归快速幂</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)        <span class="comment">//如果n的当前末位为1</span></span><br><span class="line">            ans *= a;  <span class="comment">//ans乘上当前的a</span></span><br><span class="line">        a *= a;        <span class="comment">//a自乘</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;       <span class="comment">//n往右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初ans为1，然后我们一位一位算：</p><p>1010的最后一位是0，所以a^1这一位不要。然后1010变为101，a变为a^2。</p><p>101的最后一位是1，所以a^2这一位是需要的，乘入ans。101变为10，a再自乘。</p><p>10的最后一位是0，跳过，右移，自乘。</p><p>然后1的最后一位是1，ans再乘上a^8。循环结束，返回结果。</p><figure data-size="normal"><noscript><img src="/" data-caption="" data-size="normal" data-rawwidth="935" data-rawheight="349" class="origin_image zh-lightbox-thumb lazyload" width="935" data-original="https://pic3.zhimg.com/v2-e99e321dcff33699093cde2876424dbe_r.jpg"/ data-src="https://pic3.zhimg.com/v2-e99e321dcff33699093cde2876424dbe_b.jpg"></noscript><img src="/" data-caption="" data-size="normal" data-rawwidth="935" data-rawheight="349" class="origin_image zh-lightbox-thumb lazy lazyload" width="935" data-original="https://pic3.zhimg.com/v2-e99e321dcff33699093cde2876424dbe_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-e99e321dcff33699093cde2876424dbe_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/v2-e99e321dcff33699093cde2876424dbe_r.jpg"></figure><p>这里的位运算符，<b>&gt;&gt;</b>是右移，表示把二进制数<b>往右移一位</b>，相当于/2；&amp;是按位与，&amp;1可以理解为<b>取出二进制数的最后一位</b>，相当于%2==1。这么一等价，是不是看出了递归和非递归的快速幂的关系了？虽然非递归快速幂因为牵扯到二进制理解起来稍微复杂一点，但基本思路其实和递归快速幂没有太大的出入。</p><hr><h2>快速幂的拓展</h2><p>上面所述的都是<b>整数</b>的快速幂，但其实，在算 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=a%5En"  alt="[公式]" eeimg="1" data-formula="a^n"> 时，只要a的数据类型支持<b>乘法</b>且<b>满足结合律</b>，快速幂的算法都是有效的。矩阵、高精度整数，都可以照搬这个思路。下面给出一个模板：</p><div class="highlight"><pre><code class="language-cpp"><span class="c1">//泛型的非递归快速幂</span><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span><span class="n">T</span> <span class="n">qpow</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">ll</span> <span class="n">n</span><span class="p">)</span><span class="p">&#123;</span>    <span class="n">T</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 赋值为乘法单位元，可能要根据构造函数修改</span><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>    <span class="p">&#123;</span>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>            <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">*</span> <span class="n">a</span><span class="p">;</span> <span class="c1">// 这里就最好别用自乘了，不然重载完*还要重载*=，有点麻烦。</span><span class="c1"></span>        <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>        <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">a</span><span class="p">;</span>    <span class="p">&#125;</span>    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span><span class="p">&#125;</span></code></pre></div><p>注意，较复杂类型的快速幂的时间复杂度不再是简单的 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=O%28%5Clog+n%29"  alt="[公式]" eeimg="1" data-formula="O(\log n)"> ，它与底数的乘法的时间复杂度有关。</p><p>例如，<b>矩阵快速幂</b>的一个经典应用是求斐波那契数列：</p><p><b>（洛谷P1962） 斐波那契数列</b></p><blockquote><b>题目背景</b><br>大家都知道，斐波那契数列是满足如下性质的一个数列：<br> <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=F_n+%3D+%5Cbegin%7Bcases%7D1%26+%28n+%5Cle+2%29+%5C%5C+F_%7Bn-1%7D%2BF_%7Bn-2%7D%26+%28n%5Cge+3%29+%5Cend%7Bcases%7D"  alt="[公式]" eeimg="1" data-formula="F_n = \begin{cases}1&amp; (n \le 2) \\ F_{n-1}+F_{n-2}&amp; (n\ge 3) \end{cases}"> <br><b>题目描述</b><br>请你求出 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=F_n+%5Cbmod+10%5E9+%2B+7"  alt="[公式]" eeimg="1" data-formula="F_n \bmod 10^9 + 7"> 的值。</blockquote><p><i>（以下内容涉及到基本的线性代数知识）</i></p><p>设矩阵 <img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=A%3D%5Cbegin%7Bbmatrix%7D0+%261%5C%5C+1+%26+1%5Cend%7Bbmatrix%7D"  alt="[公式]" eeimg="1" data-formula="A=\begin{bmatrix}0 &amp;1\\ 1 &amp; 1\end{bmatrix}"> ，我们有<img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=A%5Cbegin%7Bbmatrix%7DF_n%5C%5C+F_%7Bn%2B1%7D%5Cend%7Bbmatrix%7D+%3D+%5Cbegin%7Bbmatrix%7DF_%7Bn%2B1%7D%5C%5C+F_n%2BF_%7Bn%2B1%7D%5Cend%7Bbmatrix%7D%3D%5Cbegin%7Bbmatrix%7DF_%7Bn%2B1%7D%5C%5C+F_%7Bn%2B2%7D%5Cend%7Bbmatrix%7D"  alt="[公式]" eeimg="1" data-formula="A\begin{bmatrix}F_n\\ F_{n+1}\end{bmatrix} = \begin{bmatrix}F_{n+1}\\ F_n+F_{n+1}\end{bmatrix}=\begin{bmatrix}F_{n+1}\\ F_{n+2}\end{bmatrix}">，于是 :</p><p><img src="/" class="lazyload" data-src="https://www.zhihu.com/equation?tex=+%5Cbegin%7Baligned%7D+%5Cbegin%7Bbmatrix%7DF_n%5C%5C+F_%7Bn%2B1%7D%5Cend%7Bbmatrix%7D+%26%3D+A%5Cbegin%7Bbmatrix%7DF_%7Bn-1%7D%5C%5C+F_n%5Cend%7Bbmatrix%7D%5C%5C%26%3DA%5E2%5Cbegin%7Bbmatrix%7DF_%7Bn-2%7D%5C%5C+F_%7Bn-1%7D%5Cend%7Bbmatrix%7D%5C%5C%26%3D...%5C%5C%26%3DA%5E%7Bn-1%7D%5Cbegin%7Bbmatrix%7DF_1%5C%5C+F_2%5Cend%7Bbmatrix%7D%5C%5C%26%3DA%5E%7Bn-1%7D%5Cbegin%7Bbmatrix%7D1%5C%5C+1%5Cend%7Bbmatrix%7D+%5Cend%7Baligned%7D"  alt="[公式]" eeimg="1" data-formula=" \begin{aligned} \begin{bmatrix}F_n\\ F_{n+1}\end{bmatrix} &amp;= A\begin{bmatrix}F_{n-1}\\ F_n\end{bmatrix}\\&amp;=A^2\begin{bmatrix}F_{n-2}\\ F_{n-1}\end{bmatrix}\\&amp;=...\\&amp;=A^{n-1}\begin{bmatrix}F_1\\ F_2\end{bmatrix}\\&amp;=A^{n-1}\begin{bmatrix}1\\ 1\end{bmatrix} \end{aligned}"> </p><p>这样，我们把原来较为复杂的问题转化成了<b>求某个矩阵的幂</b>的问题，这就可以应用快速幂求解了。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll a1, a2, b1, b2;</span><br><span class="line">    <span class="built_in">matrix</span>(ll a1, ll a2, ll b1, ll b2) : <span class="built_in">a1</span>(a1), <span class="built_in">a2</span>(a2), <span class="built_in">b1</span>(b1), <span class="built_in">b2</span>(b2) &#123;&#125;</span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix &amp;y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">matrix <span class="title">ans</span><span class="params">((a1 * y.a1 + a2 * y.b1) % MOD,</span></span></span><br><span class="line"><span class="function"><span class="params">                   (a1 * y.a2 + a2 * y.b2) % MOD,</span></span></span><br><span class="line"><span class="function"><span class="params">                   (b1 * y.a1 + b2 * y.b1) % MOD,</span></span></span><br><span class="line"><span class="function"><span class="params">                   (b1 * y.a2 + b2 * y.b2) % MOD)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">matrix <span class="title">ans</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span></span>; <span class="comment">//单位矩阵</span></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            ans = ans * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x;</span><br><span class="line">    <span class="function">matrix <span class="title">M</span><span class="params">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    matrix ans = <span class="built_in">qpow</span>(M, x - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (ans.a1 + ans.a2) % MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这位博主的专栏总结也很棒，但需要一定的算法基础，可以存着以后看：<a href="https://zhuanlan.zhihu.com/p/105467597">算法学习笔记（目录）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载于：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/95902286&quot;&gt;算法学习笔记(4)：快速幂&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;RichText ztext Post-Rich</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯刷题一</title>
    <link href="https://zss192.github.io/2021/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E4%B8%80/"/>
    <id>https://zss192.github.io/2021/03/31/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E4%B8%80/</id>
    <published>2021-03-31T13:13:27.000Z</published>
    <updated>2021-04-09T09:35:40.087Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来源：<a href="https://www.dotcpp.com/oj/problemset.php?page=3&amp;mark=6">蓝桥杯ACM训练系统</a><br>题目编号1468~1479</p></blockquote><h1>1.报时助手</h1><p><strong>题目描述</strong></p><p>给定当前的时间，请用英文的读法将它读出来。时间用时h和分m表示，在英文的读法中，读一个时间的方法是：如果m为0，则将时读出来，然后加上“o’clock”，如3:00读作“three  o’clock”。如果m不为0，则将时读出来，然后将分读出来，如5:30读作“five  thirty”。时和分的读法使用的是英文数字的读法，其中0~20读作：0:zero,  1:  one,  2:two,  3:three,  4:four,  5:five,  6:six,  7:seven,  8:eight,  9:nine,  10:ten,  11:eleven,  12:twelve,  13:thirteen,  14:fourteen,  15:fifteen,  16:sixteen,  17:seventeen,  18:eighteen,  19:nineteen,  20:twenty。30读作thirty，40读作forty，50读作fifty。对于大于20小于60的数字，首先读整十的数，然后再加上个位数。如31首先读30再加1的读法，读作“thirty  one”。按上面的规则21:54读作“twenty  one  fifty  four”，9:07读作“nine  seven”，0:15读作“zero  fifteen”。</p><p><strong>输入</strong></p><p>输入包含两个非负整数h和m，表示时间的时和分。非零的数字前没有前导0。h小于24，m小于60。</p><p><strong>输出</strong></p><p>输出时间时刻的英文。</p><p><strong>样例输入</strong></p><p><code>0 15</code></p><p><strong>样例输出</strong></p><p><code>zero fifteen</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string nums[]=&#123;<span class="string">&quot;zero&quot;</span>,<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>,<span class="string">&quot;five&quot;</span>,<span class="string">&quot;six&quot;</span>,<span class="string">&quot;seven&quot;</span>,<span class="string">&quot;eight&quot;</span>,<span class="string">&quot;nine&quot;</span>,<span class="string">&quot;ten&quot;</span>,<span class="string">&quot;eleven&quot;</span>,<span class="string">&quot;twelve&quot;</span>,<span class="string">&quot;thirteen&quot;</span>,<span class="string">&quot;fourteen&quot;</span>,<span class="string">&quot;fifteen&quot;</span>,<span class="string">&quot;sixteen&quot;</span>,<span class="string">&quot;seventeen&quot;</span>,<span class="string">&quot;eighteen&quot;</span>,<span class="string">&quot;nineteen&quot;</span>,<span class="string">&quot;twenty&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> h,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">duShi</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h&lt;=<span class="number">20</span>)</span><br><span class="line">        cout&lt;&lt;nums[h]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;nums[<span class="number">20</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;nums[h<span class="number">-20</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">duFen</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;o&#x27;clock&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m&lt;=<span class="number">20</span>)</span><br><span class="line">        cout&lt;&lt;nums[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> shi=m-(m%<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> ge=m%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(shi==<span class="number">20</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;twenty&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(shi==<span class="number">30</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;thirty&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(shi==<span class="number">40</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;forty&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(shi==<span class="number">50</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;fifty&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(ge!=<span class="number">0</span>)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;nums[ge]&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;h&gt;&gt;m;</span><br><span class="line">    <span class="built_in">duShi</span>(h);</span><br><span class="line">    <span class="built_in">duFen</span>(m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>2.数的读法</h1><p><strong>题目描述</strong></p><p>Tom教授正在给研究生讲授一门关于基因的课程，有一件事情让他颇为头疼：一条染色体上有成千上万个碱基对，它们从0开始编号，到几百万，几千万，甚至上亿。比如说，在对学生讲解第1234567009号位置上的碱基时，光看着数字是很难准确的念出来的。所以，他迫切地需要一个系统，然后当他输入12  3456  7009时，会给出相应的念法：十二亿三千四百五十六万七千零九用汉语拼音表示为shi  er  yi  san  qian  si  bai  wu  shi  liu  wan  qi  qian  ling  jiu这样他只需要照着念就可以了。你的任务是帮他设计这样一个系统：给定一个阿拉伯数字串，你帮他按照中文读写的规范转为汉语拼音字串，相邻的两个音节用一个空格符格开。注意必须严格按照规范，比如说“10010”读作“yi  wan  ling  yi  shi”而不是“yi  wan  ling  shi”，“100000”读作“shi  wan”而不是“yi  shi  wan”，“2000”读作“er  qian”而不是“liang  qian”。</p><p><strong>输入</strong></p><p>有一个数字串，数值大小不超过2,000,000,000。</p><p><strong>输出</strong></p><p>是一个由小写英文字母，逗号和空格组成的字符串，表示该数的英文读法。</p><p><strong>样例输入</strong></p><p><code>1234567009</code></p><p><strong>样例输出</strong></p><p><code>shi er yi san qian si bai wu shi liu wan qi qian ling jiu</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a[<span class="number">12</span>]=&#123;<span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span>,<span class="string">&quot;shi&quot;</span>&#125;;<span class="comment">//创建一个每个数字所对应的拼音的字符串</span></span><br><span class="line">    string b[<span class="number">9</span>]=&#123;<span class="string">&quot;shi&quot;</span>,<span class="string">&quot;bai&quot;</span>,<span class="string">&quot;qian&quot;</span>,<span class="string">&quot;wan&quot;</span>,<span class="string">&quot;shi&quot;</span>,<span class="string">&quot;bai&quot;</span>,<span class="string">&quot;qian&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;shi&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n,x,i,j,c[<span class="number">10</span>],num;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)<span class="comment">//循环输入</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="comment">//判断是否输入的是0，如果是的话直接输出，不用循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;ling&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x=<span class="number">0</span>,num=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n/<span class="number">10</span>!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[x++]=n%<span class="number">10</span>;</span><br><span class="line">            n=n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c[x]=n;<span class="comment">//把输入的n的各位数字放入到数组中</span></span><br><span class="line">        <span class="keyword">for</span>(i=x;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i]==<span class="number">0</span>)<span class="comment">//0和不是0的分开判断</span></span><br><span class="line">            &#123;</span><br><span class="line">                num++;<span class="comment">//计算0的个数</span></span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(c[i]==<span class="number">0</span>&amp;&amp;c[i<span class="number">-1</span>]!=<span class="number">0</span>)</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;ling &quot;</span>;<span class="comment">//防止多输出“ling”</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c[i]==<span class="number">1</span>&amp;&amp;i%<span class="number">4</span>==<span class="number">1</span>)<span class="comment">//为了输出类似“十万”而不是“一十万”</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;shi&quot;</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;a[c[i]]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b[i<span class="number">-1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c[i]!=<span class="number">0</span>)</span><br><span class="line">            cout&lt;&lt;a[c[i]];<span class="comment">//个位数字是0的话不用输出</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">if</span>(num==x&amp;&amp;num&gt;<span class="number">4</span>&amp;&amp;num%<span class="number">4</span>&gt;=<span class="number">1</span>)</span><br><span class="line">            cout&lt;&lt;b[num<span class="number">-2</span>];<span class="comment">//对应输出“200000”这种除去首位之外全是零的数字</span></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 来源：https://blog.dotcpp.com/a/62175</span></span><br></pre></td></tr></table></figure><h1>3.矩形面积交</h1><p><strong>题目描述</strong></p><p>平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。</p><p><strong>输入</strong></p><p>输入仅包含两行，每行描述一个矩形。 在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。</p><p><strong>输出</strong></p><p>输出仅包含一个实数，为交的面积，保留到小数后两位。</p><p><strong>样例输入</strong></p><p><code>1 1 3 3  2 2 4 4</code></p><p><strong>样例输出</strong></p><p><code>1.00</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">point</span>         //定义&quot;点&quot;类，可用大小为2的数组代替</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mycheck</span><span class="params">(point a, point b)</span>              <span class="comment">//函数：判断点a是否在点b左下方</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x &lt; b.x &amp;&amp; a.y &lt; b.y);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x[<span class="number">4</span>];                <span class="comment">//记录输入的横坐标</span></span><br><span class="line">    <span class="keyword">double</span> y[<span class="number">4</span>];                <span class="comment">//记录输入的纵坐标</span></span><br><span class="line"> </span><br><span class="line">    point a1, a2, b1, b2;       <span class="comment">//定义矩阵A与B的左下和右上端点，1为左下，2为右上</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)     <span class="comment">//循环输入</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//寻找两矩阵的左下右上端点</span></span><br><span class="line">    a1.x = <span class="built_in">fmin</span>(x[<span class="number">0</span>], x[<span class="number">1</span>]), a1.y = <span class="built_in">fmin</span>(y[<span class="number">0</span>], y[<span class="number">1</span>]);</span><br><span class="line">    a2.x = <span class="built_in">fmax</span>(x[<span class="number">0</span>], x[<span class="number">1</span>]), a2.y = <span class="built_in">fmax</span>(y[<span class="number">0</span>], y[<span class="number">1</span>]);</span><br><span class="line"> </span><br><span class="line">    b1.x = <span class="built_in">fmin</span>(x[<span class="number">2</span>], x[<span class="number">3</span>]), b1.y = <span class="built_in">fmin</span>(y[<span class="number">2</span>], y[<span class="number">3</span>]);</span><br><span class="line">    b2.x = <span class="built_in">fmax</span>(x[<span class="number">2</span>], x[<span class="number">3</span>]), b2.y = <span class="built_in">fmax</span>(y[<span class="number">2</span>], y[<span class="number">3</span>]);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;             <span class="comment">//定义答案</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mycheck</span>(b1, a2) &amp;&amp; <span class="built_in">mycheck</span>(a1, b2))     <span class="comment">//判断是否重合</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(x, x + <span class="number">4</span>);                         <span class="comment">//横坐标排序</span></span><br><span class="line">        <span class="built_in">sort</span>(y, y + <span class="number">4</span>);                         <span class="comment">//纵坐标排序</span></span><br><span class="line">        ans = (x[<span class="number">2</span>] - x[<span class="number">1</span>]) * (y[<span class="number">2</span>] - y[<span class="number">1</span>]);    <span class="comment">//计算答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, ans);                      <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//来源：https://blog.dotcpp.com/a/77089</span></span><br></pre></td></tr></table></figure><h1>4.矩阵乘法</h1><p><strong>题目描述</strong></p><p>给定一个N阶矩阵A，输出A的M次幂（M是非负整数）例如：A  =1  23  4A的2次幂7  1015  22</p><p><strong>输入</strong></p><p>第一行是一个正整数N、M（1&lt; =N&lt; =30,  0&lt; =M&lt; =5），表示矩阵A的阶数和要求的幂数 接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值</p><p><strong>输出</strong></p><p>输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</p><p><strong>样例输入</strong></p><p><code>2 2  1 2  3 4</code></p><p><strong>样例输出</strong></p><p><code>7 10 15 22</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">35</span>][<span class="number">35</span>];<span class="comment">//原矩阵</span></span><br><span class="line"><span class="keyword">int</span> res[<span class="number">35</span>][<span class="number">35</span>];<span class="comment">//每次乘积后的矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jisuan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//根据xy坐标计算出矩阵乘积中xy位置的结果</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum+=res[x][i]*nums[i][y];<span class="comment">//每次乘积得到的矩阵相应行乘原矩阵相应列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;nums[i][j];</span><br><span class="line">res[i][j]=nums[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//0或1为特殊情况专门处理</span></span><br><span class="line"><span class="keyword">if</span>(M==<span class="number">0</span>||M==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(M==<span class="number">0</span>)<span class="comment">//0次幂就是单位矩阵，对角线为1其余为0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)</span><br><span class="line">cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//1次幂就是原矩阵本身</span></span><br><span class="line">cout&lt;&lt;nums[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般情况计算乘积</span></span><br><span class="line"><span class="keyword">int</span> cnt=M;</span><br><span class="line"><span class="keyword">while</span>(cnt!=<span class="number">1</span>)<span class="comment">//注意2次幂只做一次乘</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp[<span class="number">35</span>][<span class="number">35</span>];<span class="comment">//temp临时矩阵存放临时乘积</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">temp[i][j]=<span class="built_in">jisuan</span>(i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算出临时矩阵每个位置的值后赋值给res矩阵</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">res[i][j]=temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cnt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;res[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>5.芯片测试</h1><p><strong>题目描述</strong></p><p>有n块芯片，有好有坏，已知好芯片比坏芯片多。每个芯片都能用来测试其他芯片。用好芯片测试其他芯片时，能正确给出被测试芯片是好还是坏。而用坏芯片测试其他芯片时，会随机给出好或是坏的测试结果（即此结果与被测试芯片实际的好坏无关）。给出所有芯片的测试结果，问哪些芯片是好芯片。</p><p><strong>输入</strong></p><p>输入数据第一行为一个整数n，表示芯片个数。</p><p>第二行到第n+1行为n*n的一张表，每行n个数据。表中的每个数据为0或1，在这n行中的第i行第j列（1≤i,  j≤n）的数据表示用第i块芯片测试第j块芯片时得到的测试结果，1表示好，0表示坏，i=j时一律为1（并不表示该芯片对本身的测试结果。芯片不能对本  身进行测试）。</p><p>（2≤n≤20）</p><p><strong>输出</strong></p><p>按从小到大的顺序输出所有好芯片的编号</p><p><strong>样例输入</strong></p><p><code>3  1 0 1 0 1 0 1 0 1</code></p><p><strong>样例输出</strong></p><p><code>1 3</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">bool</span> isBad[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;nums[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对每列遍历，如果每个物品在所有测试结果中坏的个数大于一半那它一定是坏的(好芯片多)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(nums[j][i]==<span class="number">0</span>)</span><br><span class="line">sum++;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;n/<span class="number">2</span>)</span><br><span class="line">isBad[i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!isBad[i])</span><br><span class="line">cout&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>6.阶乘计算</h1><p><strong>题目描述</strong></p><p>输入一个正整数n，输出n!的值。其中n!=1<em>2</em>3*…*n。算法描述n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。</p><p><strong>输入</strong></p><p>输入包含一个正整数n，n&lt; =1000。</p><p><strong>输出</strong></p><p>输出n!的准确值。</p><p><strong>样例输入</strong></p><p><code>10</code></p><p><strong>样例输出</strong></p><p><code>3628800</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">3000</span>],jin[<span class="number">3000</span>];</span><br><span class="line"><span class="keyword">int</span> n,temp;</span><br><span class="line"><span class="keyword">int</span> nums=<span class="number">1</span>;<span class="comment">//记录结果数字位数  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    A[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)    <span class="comment">//遍历每个乘数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(jin,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(jin));  <span class="comment">//将jin位数组清零</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums; j++)  <span class="comment">//遍历A的每一位</span></span><br><span class="line">        &#123;  </span><br><span class="line">            temp=A[j]*i+jin[j]; <span class="comment">//临时记录每一位与乘数相乘加上前一位的进位</span></span><br><span class="line">            <span class="keyword">if</span>(temp&gt;=<span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                jin[j+<span class="number">1</span>]=temp/<span class="number">10</span>;   <span class="comment">//若有进位保留到jin[j+1]</span></span><br><span class="line">                <span class="keyword">if</span>(j==nums<span class="number">-1</span>)   <span class="comment">//如果当前是A的最高位且乘积大于等于10才拓展位数</span></span><br><span class="line">                    nums++;</span><br><span class="line">            &#125;</span><br><span class="line">            A[j]=temp%<span class="number">10</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了下别人的题解，优化了下代码，去掉了进位数组用一个int类型变量来记录进位</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> nums=<span class="number">1</span>,n,temp,jin;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)   <span class="comment">//对每个乘数</span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums;j++) <span class="comment">//对A数组的每一位</span></span><br><span class="line">        &#123;   </span><br><span class="line">            temp=a[j]*i+jin;    <span class="comment">//临时记录每一位与乘数相乘加上前一位的进位</span></span><br><span class="line">            a[j]=temp%<span class="number">10</span>;   </span><br><span class="line">            jin=temp/<span class="number">10</span>;    <span class="comment">//记录进位</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果当前是A的最高位且乘积大于等于10才拓展位数</span></span><br><span class="line">            <span class="keyword">if</span>(j==nums<span class="number">-1</span>&amp;&amp;temp&gt;=<span class="number">10</span>)</span><br><span class="line">                nums++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>7.龟兔赛跑预测</h1><p><strong>题目描述</strong></p><p>话说这个世界上有各种各样的兔子和乌龟，但是  研究发现，所有的兔子和乌龟都有一个共同的特点——喜欢赛跑。于是世界上各个角落都不断在发生着乌龟和兔子的比赛，小华对此很感兴趣，于是决定研究不同兔  子和乌龟的赛跑。他发现，兔子虽然跑比乌龟快，但它们有众所周知的毛病——骄傲且懒惰，于是在与乌龟的比赛中，一旦任一秒结束后兔子发现自己领先t米或以  上，它们就会停下来休息s秒。对于不同的兔子，t，s的数值是不同的，但是所有的乌龟却是一致——它们不到终点决不停止。然而有些比赛相当漫长，全程观看会耗费大量时间，而小华发现只要在每场比赛开始后记录下兔子和乌龟的数据——兔子的速度v1（表示每秒兔子能跑v1  米），乌龟的速度v2，以及兔子对应的t，s值，以及赛道的长度l——就能预测出比赛的结果。但是小华很懒，不想通过手工计算推测出比赛的结果，于是他找  到了你——清华大学计算机系的高才生——请求帮助，请你写一个程序，对于输入的一场比赛的数据v1，v2，t，s，l，预测该场比赛的结果。</p><p><strong>输入</strong></p><p>输入只有一行，包含用空格隔开的五个正整数v1，v2，t，s，l，其中(v1,v2&lt; =100;t&lt; =300;s&lt; =10;l&lt; =10000且为v1,v2的公倍数)</p><p><strong>输出</strong></p><p>输出包含两行，第一行输出比赛结果——一个大写字母“T”或“R”或“D”，分别表示乌龟获胜，兔子获胜，或者两者同时到达终点。 第二行输出一个正整数，表示获胜者（或者双方同时）到达终点所耗费的时间（秒数）。</p><p><strong>样例输入</strong></p><p><code>10 5 5 2 20</code></p><p><strong>样例输出</strong></p><p><code>D 4</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> v1, v2, t, s, l;</span><br><span class="line"><span class="keyword">int</span> s1,s2,rest;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; t &gt;&gt; s &gt;&gt; l;</span><br><span class="line">    <span class="keyword">while</span> (++rest) &#123;</span><br><span class="line">        s1 += v1;</span><br><span class="line">        s2 += v2;</span><br><span class="line">        <span class="keyword">if</span> (s1 == l &amp;&amp; s2 == l) </span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;D&quot;</span> &lt;&lt; endl &lt;&lt; rest &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s1 == l) </span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;R&quot;</span> &lt;&lt; endl &lt;&lt; rest &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s2 == l) </span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;T&quot;</span> &lt;&lt; endl &lt;&lt; rest &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关键代码，如果s1领先s2至少t米，就直接让兔子后退v1*s米</span></span><br><span class="line">        <span class="comment">//之后的循环每秒兔子再往前走v1米，经过s秒可以回到原来领先的位置</span></span><br><span class="line">        <span class="comment">//所以也就等效于兔子等待s秒的效果</span></span><br><span class="line">        <span class="keyword">if</span> (s1 - s2 &gt;= t) &#123;</span><br><span class="line">            s1 -= v1 * s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//来源：https://blog.dotcpp.com/a/67808</span></span><br></pre></td></tr></table></figure><h1>8.字符串输入输出函数</h1><p><strong>题目描述</strong></p><p>编写函数GetReal和GetString，在main函数中分别调用这两个函数。在读入一个实数和一个字符串后，将读入的结果依次用printf输出。两次输入前要输出的提示信息分别是&quot; please  input  a  number:\n”和&quot; please  input  a  string:\n&quot;</p><p><strong>样例输入</strong></p><p><code>9.56  hello</code></p><p><strong>样例输出</strong></p><p><code>please input a number: please input a string: 9.56 hello</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//题目很简单，但题目给的有问题，写的时候直接复制的提示信息一直提示格式错误</span></span><br><span class="line"><span class="comment">//看别人的题解原来是题目给的提示每个单词之间有两个空格，而实际留一个空格就行</span></span><br><span class="line"><span class="comment">//感觉这题目样例输出也有点问题，题目说的是每次输入前有提示，而样例先把两个两个提示输出了😓</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">double</span> n;</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetReal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;please input a number:\n&quot;</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;please input a string:\n&quot;</span>;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">GetReal</span>();</span><br><span class="line">    <span class="built_in">GetString</span>();</span><br><span class="line">    cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>9.3000米排名预测</h1><p><strong>题目描述</strong></p><p>3000米长跑时，围观党们兴高采烈地预测着  最后的排名。因为他们来自不同的班，对所有运动员不一定都了解，于是他们分别对自己了解的一些运动员的实力作出了评估，即对部分运动员做了相对排名的预  测，并且告诉了可怜留守的班长。因为无聊，于是他们就组团去打Dota去了。比赛结束后他们向班长询问最后的排名，但班长不记得了，只记得他们中哪些人的  预测是正确的，哪些人的预测是错误的。他们想知道比赛的排名可能是什么。</p><p><strong>输入</strong></p><p>第一行两个整数n，  m，n为运动员数量，m为围观党数量。运动员编号从0到n-1。</p><p>接下来m行，每行为一个围观党的相对排名预测。每行第一个数c表示他预测的人数，后面跟着c个0~n-1的不同的数，表示他预测的运动员相对排名，最后还有一个数，0表示这个预测是错误的，1表示是正确的。</p><p>数据规模和约定  1&lt; =n&lt; =10,  2&lt; =c&lt; =n,  1&lt; =m&lt; =10，保证数据合法，且答案中排名可能数不超过20000。对于一个排名序列，一个预测是正确的，当且仅当预测的排名的相对顺序  是排名序列的一个子序列。一个预测是错误的，当且仅当这个预测不正确。</p><p><strong>输出</strong></p><p>第一行一个数k为有多少种排名的可能。 下面k行，每行一个0~n-1的排列，为某一个可能的排名，相邻的数间用空格隔开。所有排名按字典序依次输出。</p><p><strong>样例输入</strong></p><p><code>3 2  2 0 1 1  2 1 2 0</code></p><p><strong>样例输出</strong></p><p><code>2 0 2 1  2 0 1</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>][<span class="number">11</span>]; <span class="comment">//每个吃瓜群众的猜测</span></span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">10</span>];<span class="comment">//每个吃瓜群众的猜测的正确性</span></span><br><span class="line"><span class="keyword">int</span> player[<span class="number">10</span>];<span class="comment">//运动员的编号</span></span><br><span class="line"><span class="keyword">int</span> sum;<span class="comment">//记录多少种可行排名的数目</span></span><br><span class="line">string str;<span class="comment">//记录所有可能的排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//核心函数，判断排列是否满足题意</span></span><br><span class="line"><span class="comment">//设两个指针分别遍历预测数列和要判断的数列，看哪个指针先走到头</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> p[])</span> <span class="comment">//数组 p 是需要判断的一个排列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;  <span class="comment">//循环变量</span></span><br><span class="line">    <span class="keyword">int</span> num;   <span class="comment">//num表示吃瓜群众对几个运动员预测了成绩</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)  <span class="comment">//循环每个吃瓜群众的预测成绩</span></span><br><span class="line">    &#123;</span><br><span class="line">        num = arr[i][<span class="number">0</span>];  <span class="comment">//赋值，arr[i][0]是吃瓜群众作了几个预测</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>,k = <span class="number">0</span>; j &lt; num &amp;&amp; k &lt; n;k++)  <span class="comment">// 逻辑：需要了解是相对位置，所以遍历整个排列，如果 j 先结束则说明序列是统一的；  如果k先结束则说明序列是不统一的。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i][j] == p[k])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= num &amp;&amp; !flag[i]) <span class="comment">//预测正确(flag[i] = 1), 则看是否全排列等于该预测结果,不一致，则该排列不正确, reture false</span></span><br><span class="line">                                <span class="comment">//预测错误(flag[i] = 0), 则看是否全排列等于该预测结果, 一致，   则该排列不正确, return false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(k &gt;= n &amp;&amp; j &lt; num &amp;&amp; flag[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> p[])</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">judge</span>(p))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                str+=p[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                str+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum++;</span><br><span class="line">            str[str.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(p,p+n));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        player[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        arr[i][<span class="number">0</span>] = c + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; c + <span class="number">1</span>; j++)</span><br><span class="line">            cin &gt;&gt; arr[i][j];</span><br><span class="line">        cin &gt;&gt; flag[i];  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">out</span>(player);</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; str;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>10.删除数组中的0元素</h1><p><strong>题目描述</strong></p><p>编写函数CompactIntegers，删除数组中所有值为0的元素，其后元素向数组首端移动。注意，CompactIntegers函数需要接收数组及其元素个数作为参数，函数返回值应为删除操作执行后数组的新元素个数。输入时首先读入数组长度，再依次读入每个元素。将调用此函数后得到的数组和函数返回值输出。</p><p><strong>输入</strong></p><p>第一行一个数，表示数组个数</p><p>第二行为每个数字，空格分开</p><p><strong>输出</strong></p><p>输出处理后的数字以及个数，各占一行</p><p><strong>样例输入</strong></p><p><code>7  2 0 4 3 0 0 5</code></p><p><strong>样例输出</strong></p><p><code>2 4 3 5 4</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CompactIntegers</span><span class="params">(<span class="keyword">int</span> nums[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[index]=nums[i];    <span class="comment">//用index重新填充非零元素</span></span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n; </span><br><span class="line">    <span class="keyword">int</span> nums[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> newNums=<span class="built_in">CompactIntegers</span>(nums,n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newNums; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;nums[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;newNums&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;https://www.dotcpp.com/oj/problemset.php?page=3&amp;amp;mark=6&quot;&gt;蓝桥杯ACM训练系统&lt;/a&gt;&lt;br&gt;
题目编号1468~1479&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>动态规划算法总结</title>
    <link href="https://zss192.github.io/2021/03/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2021/03/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-30T03:54:00.000Z</published>
    <updated>2021-03-30T03:54:56.627Z</updated>
    
    <content type="html"><![CDATA[<h1>思想</h1><p>名词解释：通过一个例子来解释</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A : <span class="string">&quot;1+1+1+1+1+1+1+1 =？&quot;</span> </span><br><span class="line"></span><br><span class="line">A : <span class="string">&quot;上面等式的值是多少&quot;</span></span><br><span class="line">B : 计算 <span class="string">&quot;8!&quot;</span></span><br><span class="line"></span><br><span class="line">A : 在上面等式的左边写上 <span class="string">&quot;1+&quot;</span> </span><br><span class="line">A : <span class="string">&quot;此时等式的值为多少&quot;</span></span><br><span class="line">B :  <span class="string">&quot;9!&quot;</span>  (quickly)</span><br><span class="line">A : <span class="string">&quot;你怎么这么快就知道答案了&quot;</span></span><br><span class="line">A : <span class="string">&quot;只要在8的基础上加1就行了&quot;</span></span><br><span class="line">A : <span class="string">&quot;所以你不用重新计算因为你记住了第一个等式的值为8!动态规划算法也可以说是 &#x27;记住求过的解来节省时间&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>例如斐波拉契数列Fibonacci</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Fibonacci</span> (n) = <span class="number">1</span>;   n = <span class="number">0</span></span><br><span class="line"><span class="built_in">Fibonacci</span> (n) = <span class="number">1</span>;   n = <span class="number">1</span></span><br><span class="line"><span class="built_in">Fibonacci</span> (n) = <span class="built_in">Fibonacci</span>(n<span class="number">-1</span>) + <span class="built_in">Fibonacci</span>(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">fib</span>(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fib</span>(n<span class="number">-1</span>)+<span class="built_in">fib</span>(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是常用的递归法，但是我们发现很多fib()会重复执行，而我们可以算出来一个fib()后把它存到一个数组中再次用到的时候直接根据数组取值，这就是动态规划</p><h1>经典例题</h1><h2 id="🚩1-01背包问题（物品个数为1）"><a class="header-anchor" href="#🚩1-01背包问题（物品个数为1）">¶</a>🚩1. 01背包问题（物品个数为1）</h2><p>有N个物品，其重量分别为weight[i]，其价值分别为value[i]，现有一个容量为V的背包，问怎样装商品才能使得背包中的价值最大？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;   <span class="comment">//方便统计从1开始</span></span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><p>可先看B站这个视频讲解：<a href="https://www.bilibili.com/video/BV1K4411X766/">https://www.bilibili.com/video/BV1K4411X766/</a></p><p>其实就是相当于我们创建一个表格即dp[][]，左边那一列表示商品编号，上面那一行表示背包容量，表格内容是此时状态的最大价值</p><p>先看结果，如下</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210330112048755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>解释：</p><p>一行一行的填写，从上至下从左至右。如编号1重量为3，那么容量为0、1、2时都不能放下，最大价值都为0</p><p>当背包重量为3时可以放下商品1所以最大价值为4</p><p>再考虑第二行，j等于0<sub>2时都放不下最大价值为0，由于商品2重量为6，那么背包容量为3</sub>5时都放不下商品2只能放商品1最大价值为商品1的价值4。</p><p>而当背包容量为6时，此时能够放下商品2，那么就要考虑要不要放商品2</p><p>1️⃣放商品2，那么最大价值就是此时背包的容量减去商品2的重量为0，再看第一行重量为0时的价值也是0，那么最大价值为6</p><p>2️⃣不放商品2，那么最大价值就是第一行背包容量为6时的最大价值为4</p><p>放商品2最大价值为6，不放最大价值为4，我们选最大值为6</p><p>总结如下：</p><p>若背包容量小于商品n的重量放不下商品</p><ul><li>那么前n个商品的最大价值和前n-1个商品的最大价值是一样的（既然不放相当于就不考虑这个商品，那么考虑前n个商品其实就是考虑前n-1个商品）</li></ul><p>若此时背包装得下商品n</p><ul><li>若选择放商品n，那么背包可用容量KV就等于背包总容量SV减去商品n的重量nV，那么问题就变成了只考虑前n-1个商品且背包容量为KV时的最大价值，而此前我们已经求得了这个值填写在了表中所以直接用这个值加上商品n的价值就是最大价值</li><li>若不放商品n，那么前n个商品的最大价值和前n-1个商品的最大价值是一样的</li><li>从以上两个选择选一个最大的就是最终的最大价值</li></ul><p>对应的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= N; n++)<span class="comment">//遍历商品1~N</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++)<span class="comment">//遍历容量0~V</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=weight[n])<span class="comment">//背包容量大于等于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=<span class="built_in">max</span>(dp[n<span class="number">-1</span>][v-weight[n]]+value[n],dp[n<span class="number">-1</span>][v]); <span class="comment">//选择放商品n和不放商品n哪个价值最大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//背包容量小于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=dp[n<span class="number">-1</span>][v];<span class="comment">//此时商品n一定不能放，此时最大价值就是商品1到i-1中，容量为v时的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而其实我们也可以用一维数组优化下代码，代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=N;n++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=V;v&gt;=w[i];v--)</span><br><span class="line">dp[v]=<span class="built_in">max</span>(dp[v],dp[v-weight[n]]+value[n]);</span><br></pre></td></tr></table></figure><p>而我们怎么知道求得的最大价值其中我们选了哪些商品呢</p><p>其实就是从表的右下角开始回溯，如果dp[n][j]和dp[n-1][j]值是一样的，那么我们肯定没装商品n(相当于我们就没考虑商品n)。事实上，我们推dp[n][j]时如果选择不放商品n那么我们就让dp[n][j]=dp[n-1][j]</p><p>所以相当于我们根据两个数值是否相等来判断当时我们是否选了商品n</p><p>相当于是求最大价值的一个逆过程</p><p>如果装了商品n，那么用总容量减去商品n的容量得到可用容量kV再来判断是否放了商品n-1，其实也就是看dp[n-1][kv]和dp[n-2][kv]是否相等，以此类推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n=N,v=V;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][v]==dp[n<span class="number">-1</span>][v])</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;未被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">v=v-weight[n];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🦄完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印初始状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;共&quot;</span>&lt;&lt;N&lt;&lt;<span class="string">&quot;个商品，&quot;</span>&lt;&lt;<span class="string">&quot;背包容量为&quot;</span>&lt;&lt;V&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;的重量为&quot;</span>&lt;&lt;weight[i]&lt;&lt;<span class="string">&quot;，价值为&quot;</span>&lt;&lt;value[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求最大价值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= N; n++)<span class="comment">//遍历商品1~N</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++)<span class="comment">//遍历容量0~V</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=weight[n])<span class="comment">//背包容量大于等于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=<span class="built_in">max</span>(dp[n<span class="number">-1</span>][v-weight[n]]+value[n],dp[n<span class="number">-1</span>][v]); <span class="comment">//选择放商品n和不放商品n哪个价值最大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//背包容量小于商品i的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=dp[n<span class="number">-1</span>][v];<span class="comment">//此时商品n一定不能放，此时最大价值就是商品1到n-1中，容量为v时的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N][V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印最大价值的商品选择情况</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSelect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=N,v=V;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][v]==dp[n<span class="number">-1</span>][v])</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;未被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">v=v-weight[n];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printInit</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;最大价值为：&quot;</span>&lt;&lt;<span class="built_in">maxValue</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printSelect</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🚩2-多重背包问题（物品个数有限）"><a class="header-anchor" href="#🚩2-多重背包问题（物品个数有限）">¶</a>🚩2.多重背包问题（物品个数有限）</h2><p>在01背包的基础上每个商品可以有多个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> number[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>&#125;;<span class="comment">//每个商品的个数</span></span><br><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)<span class="comment">//对于每个物品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= V; j++)<span class="comment">//对于每个容量</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= number[i]; k++)<span class="comment">//放几个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=weight[i]*k)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-weight[i]*k]+value[i]*k , dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[N][V]&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🚩3-完全背包问题（物品个数无限）"><a class="header-anchor" href="#🚩3-完全背包问题（物品个数无限）">¶</a>🚩3. 完全背包问题（物品个数无限）</h2><p>在01背包的基础上每个商品的数量是无限的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)<span class="comment">//对于每个商品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= V; j++)<span class="comment">//对于背包容量</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=weight[i])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i][j-weight[i]]+value[i],dp[i<span class="number">-1</span>][j]);   <span class="comment">//和01背包相比就这句不同</span></span><br><span class="line"><span class="comment">//dp[i][j]=max(dp[i-1][j-weight[i]]+value[i],dp[i-1][j]);    01背包</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;dp[N][V]&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;思想&lt;/h1&gt;
&lt;p&gt;名词解释：通过一个例子来解释&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯-完美的代价(C++详细解释版)</title>
    <link href="https://zss192.github.io/2021/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%AE%8C%E7%BE%8E%E7%9A%84%E4%BB%A3%E4%BB%B7-C-%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E7%89%88/"/>
    <id>https://zss192.github.io/2021/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%AE%8C%E7%BE%8E%E7%9A%84%E4%BB%A3%E4%BB%B7-C-%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E7%89%88/</id>
    <published>2021-03-29T03:53:00.000Z</published>
    <updated>2021-03-30T03:53:44.078Z</updated>
    
    <content type="html"><![CDATA[<h1>题目</h1><p><strong>题目描述</strong></p><p>回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。</p><p>交换的定义是：交换两个相邻的字符例如mamad</p><p>第一次交换  ad  :  mamda</p><p>第二次交换  md  :  madma</p><p>第三次交换  ma  :  madam  (回文！完美！)</p><p><strong>输入</strong></p><p>第一行是一个整数N，表示接下来的字符串的长度(N  &lt; =  8000) 第二行是一个字符串，长度为N.只包含小写字母</p><p><strong>输出</strong></p><p>如果可能，输出最少的交换次数。 否则输出Impossible</p><p><strong>样例输入</strong></p><p><code>5  mamad</code></p><p><strong>样例输出</strong></p><p><code>3</code></p><h1>思路讲解</h1><p><strong>首先是Impossible的情况</strong></p><p>1️⃣当N是偶数且有一个字符出现次数为奇数时那一定不可能构成回文数如adaaaa</p><p>2️⃣当N是奇数且有两个不等的字符出现次数为奇数时页一定不可能构成回文数如abada</p><p><strong>然后是可以移成回文数的情况</strong></p><p>采用贪心思想，从左向右遍历当前字符串s[i]，然后从右向左遍历找到与当前字符串s[i]相等的字符串s[k]，将s[k]移到字符串末尾(彼此相邻的移动)，然后将指向末尾的指针减一。</p><p>再看s[i+1]，从右(末尾已经减一)向左遍历找到与其相同的字符再将其移到末尾，再将末尾减一，以此类推</p><p>🌰<strong>举个例子</strong></p><p>比如mamad，首先从左到右s[0]即m，然后从右向左遍历找到与其相同的字符即s[2]</p><p>然后将s[2]移到字符末尾即s[4]，移动的过程是s[2]和s[3]交换然后s[3]再和s[4]交换，然后将末尾指针减一，此时字符串变成了maadm</p><p>接着是s[1]即a从右向左遍历找到了s[2]与其相等，然后将其移到末尾，注意此时末尾指针已经减一，也就是s[2]移到s[3]的位置，此时字符串变成了madam</p><p>此时从左到右遍历的指针和从右向左的指针相等程序结束</p><p>整个过程一共移动了3次而3就是答案</p><p>可以发现整个移动过程其实和题目说的移动过程并不一致</p><h1>完整代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//res用来统计交换的次数</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;<span class="comment">//flag用来统计出现奇数次数的字符个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++)<span class="comment">//i指针从头遍历到倒数第二个字符</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &gt;= i; k--)<span class="comment">//k指针从后面往前一直到i寻找和s[i]相同的s[k]</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(k == i)<span class="comment">//如果找不到相同的</span></span><br><span class="line">&#123;</span><br><span class="line">flag++;</span><br><span class="line">                <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span> || flag == <span class="number">2</span>)<span class="comment">//impossible的两种情况</span></span><br><span class="line">&#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;               </span><br><span class="line">                res += n / <span class="number">2</span> - i;<span class="comment">//n为奇数时唯一一个奇数次出现的字符移到中间的次数</span></span><br><span class="line"><span class="comment">//n/2-i一定大于0即这个数是在整体的左边位置，如果在右边遍历前面的i时就已经把它移到中间了，如aaaad  </span></span><br><span class="line">            &#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == s[k])   </span><br><span class="line">&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l = k; l &lt; j; l++) </span><br><span class="line">&#123;</span><br><span class="line">                    <span class="built_in">swap</span>(s[l], s[l+<span class="number">1</span>]);<span class="comment">//把s[k]换到s[j]处  </span></span><br><span class="line">                    res++;<span class="comment">//统计交换次数</span></span><br><span class="line">                &#125;</span><br><span class="line">                j--;<span class="comment">//将一个字符调到末尾后j减一即将末尾指针往前移一位</span></span><br><span class="line"><span class="comment">//方便下次交换到末尾且i和j相等时此时已经是回文数第一个for循环就结束了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考</h1><p><a href="https://blog.csdn.net/liuchuo/article/details/51990430">蓝桥杯 BASIC-19 基础练习 完美的代价</a><br><a href="https://github.com/hushhw/LQOJ/blob/master/BASIC/BASIC-19%20%E5%AE%8C%E7%BE%8E%E7%9A%84%E4%BB%A3%E4%BB%B7.cpp">BASIC-19 完美的代价</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;题目&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>01背包问题---动态规划</title>
    <link href="https://zss192.github.io/2021/03/28/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://zss192.github.io/2021/03/28/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-03-28T03:51:00.000Z</published>
    <updated>2021-03-30T03:52:18.954Z</updated>
    
    <content type="html"><![CDATA[<h1>问题描述</h1><p>🚩有N个物品，其重量分别为weight[i]，其价值分别为value[i]，现有一个容量为V的背包，问怎样装商品才能使得背包中的价值最大？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><h1>思路讲解</h1><p>可先看B站这个视频讲解：<a href="https://www.bilibili.com/video/BV1K4411X766/">https://www.bilibili.com/video/BV1K4411X766/</a></p><p>其实就是相当于我们创建一个表格即dp[][]，左边那一列表示商品编号，上面那一行表示背包容量，表格内容是此时状态的最大价值</p><p>先看结果，如下</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210328182340133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>解释：</p><p>一行一行的填写，从上至下从左至右。如编号1重量为3，那么容量为0、1、2时都不能放下，最大价值都为0</p><p>当背包重量为3时可以放下商品1所以最大价值为4</p><p>再考虑第二行，j等于0~2时都放不下最大价值为0，由于商品2重量为6，那么背包容量为3~5时都放不下商品2只能放商品1最大价值为商品1的价值4。</p><p>而当背包容量为6时，此时能够放下商品2，那么就要考虑要不要放尚品2</p><p>1️⃣放商品2，那么最大价值就是此时背包的容量减去商品2的重量为0，再看第一行重量为0时的价值也是0，那么最大价值为6</p><p>2️⃣不放商品2，那么最大价值就是第一行背包容量为6时的最大价值为4</p><p>放商品2最大价值为6，不放最大价值为4，我们选最大值为6</p><p>总结如下：</p><p>若背包容量小于商品n的重量放不下商品</p><ul><li>那么前n个商品的最大价值和前n-1个商品的最大价值是一样的（既然不放相当于就不考虑这个商品，那么考虑前n个商品其实就是考虑前n-1个商品）</li></ul><p>若此时背包装得下商品n</p><ul><li>若选择放商品n，那么背包可用容量KV就等于背包总容量SV减去商品n的重量nV，那么问题就变成了只考虑前n-1个商品且背包容量为KV时的最大价值，而此前我们已经求得了这个值填写在了表中所以直接用这个值加上商品n的价值就是最大价值</li><li>若不放商品n，那么前n个商品的最大价值和前n-1个商品的最大价值是一样的</li><li>从以上两个选择选一个最大的就是最终的最大价值</li></ul><p>对应的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= N; n++)<span class="comment">//遍历商品1~N</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++)<span class="comment">//遍历容量0~V</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=weight[n])<span class="comment">//背包容量大于等于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=<span class="built_in">max</span>(dp[n<span class="number">-1</span>][v-weight[n]]+value[n],dp[n<span class="number">-1</span>][v]); <span class="comment">//选择放商品n和不放商品n哪个价值最大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//背包容量小于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=dp[n<span class="number">-1</span>][v];<span class="comment">//此时商品n一定不能放，此时最大价值就是商品1到i-1中，容量为v时的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们怎么知道求得的最大价值其中我们选了哪些商品呢</p><p>其实就是从表的右下角开始回溯，如果dp[n][j]和dp[n-1][j]值是一样的，那么我们肯定没装商品i(相当于我们就没考虑商品n)。事实上，我们推dp[n][j]时如果选择不放商品n那么我们就让dp[n][j]=dp[n-1][j]</p><p>所以相当于我们根据两个数值是否相等来判断当时我们是否选了商品n</p><p>相当于是求最大价值的一个逆过程</p><p>如果装了商品n，那么用总容量减去商品n的容量得到可用容量kV再来判断是否放了商品n-1，其实也就是看dp[n-1][kv]和dp[n-2][kv]是否相等，以此类推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n=N,v=V;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][v]==dp[n<span class="number">-1</span>][v])</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;未被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">v=v-weight[n];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>🦄完整代码如下</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印初始状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;共&quot;</span>&lt;&lt;N&lt;&lt;<span class="string">&quot;个商品，&quot;</span>&lt;&lt;<span class="string">&quot;背包容量为&quot;</span>&lt;&lt;V&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;的重量为&quot;</span>&lt;&lt;weight[i]&lt;&lt;<span class="string">&quot;，价值为&quot;</span>&lt;&lt;value[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求最大价值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= N; n++)<span class="comment">//遍历商品1~N</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++)<span class="comment">//遍历容量0~V</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=weight[n])<span class="comment">//背包容量大于等于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=<span class="built_in">max</span>(dp[n<span class="number">-1</span>][v-weight[n]]+value[n],dp[n<span class="number">-1</span>][v]); <span class="comment">//选择放商品n和不放商品n哪个价值最大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//背包容量小于商品i的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=dp[n<span class="number">-1</span>][v];<span class="comment">//此时商品n一定不能放，此时最大价值就是商品1到n-1中，容量为v时的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N][V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印最大价值的商品选择情况</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSelect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=N,v=V;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][v]==dp[n<span class="number">-1</span>][v])</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;未被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">v=v-weight[n];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printInit</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;最大价值为：&quot;</span>&lt;&lt;<span class="built_in">maxValue</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printSelect</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;p&gt;🚩有N个物品，其重量分别为weight[i]，其价值分别为value[i]，现有一个容量为V的背包，问怎样装商品才能使得背包中的价值最大？&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯迷宫题解</title>
    <link href="https://zss192.github.io/2021/03/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BF%B7%E5%AE%AB%E9%A2%98%E8%A7%A3/"/>
    <id>https://zss192.github.io/2021/03/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BF%B7%E5%AE%AB%E9%A2%98%E8%A7%A3/</id>
    <published>2021-03-26T12:50:00.000Z</published>
    <updated>2021-03-30T03:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1>问题描述</h1><p>下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可 以通行的地方。</p><p>010000<br>000100<br>001001<br>110000</p><p>迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。</p><p>对于上面的迷宫，从入口开始，可以按 DRRURRDDDR 的顺序通过迷宫，一共 10 步。</p><p>其中 D、U、L、R 分别表示向下、向上、向左、向右走。</p><p>对于下面这个更复杂的迷宫（30 行 50 列）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01010101001011001001010110010110100100001000101010</span></span><br><span class="line"><span class="number">00001000100000101010010000100000001001100110100101</span></span><br><span class="line"><span class="number">01111011010010001000001101001011100011000000010000</span></span><br><span class="line"><span class="number">01000000001010100011010000101000001010101011001011</span></span><br><span class="line"><span class="number">00011111000000101000010010100010100000101100000000</span></span><br><span class="line"><span class="number">11001000110101000010101100011010011010101011110111</span></span><br><span class="line"><span class="number">00011011010101001001001010000001000101001110000000</span></span><br><span class="line"><span class="number">10100000101000100110101010111110011000010000111010</span></span><br><span class="line"><span class="number">00111000001010100001100010000001000101001100001001</span></span><br><span class="line"><span class="number">11000110100001110010001001010101010101010001101000</span></span><br><span class="line"><span class="number">00010000100100000101001010101110100010101010000101</span></span><br><span class="line"><span class="number">11100100101001001000010000010101010100100100010100</span></span><br><span class="line"><span class="number">00000010000000101011001111010001100000101010100011</span></span><br><span class="line"><span class="number">10101010011100001000011000010110011110110100001000</span></span><br><span class="line"><span class="number">10101010100001101010100101000010100000111011101001</span></span><br><span class="line"><span class="number">10000000101100010000101100101101001011100000000100</span></span><br><span class="line"><span class="number">10101001000000010100100001000100000100011110101001</span></span><br><span class="line"><span class="number">00101001010101101001010100011010101101110000110101</span></span><br><span class="line"><span class="number">11001010000100001100000010100101000001000111000010</span></span><br><span class="line"><span class="number">00001000110000110101101000000100101001001000011101</span></span><br><span class="line"><span class="number">10100101000101000000001110110010110101101010100001</span></span><br><span class="line"><span class="number">00101000010000110101010000100010001001000100010101</span></span><br><span class="line"><span class="number">10100001000110010001000010101001010101011111010010</span></span><br><span class="line"><span class="number">00000100101000000110010100101001000001000000000010</span></span><br><span class="line"><span class="number">11010000001001110111001001000011101001011011101000</span></span><br><span class="line"><span class="number">00000110100010001000100000001000011101000000110011</span></span><br><span class="line"><span class="number">10101000101000100010001111100010101001010000001000</span></span><br><span class="line"><span class="number">10000010100101001010110000000100101010001011101000</span></span><br><span class="line"><span class="number">00111100001000010000000110111000000001000000001011</span></span><br><span class="line"><span class="number">10000001100111010111010001000110111010101101111000</span></span><br></pre></td></tr></table></figure><p>请找出一种通过迷宫的方式， 其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。</p><p>请注意在字典序中 D &lt; L &lt; R &lt; U。</p><p>答案提交<br>这是一道结果填空的题，你只需要算出结果后提交即可。<br>本题的结果为一 个字符串，包含四种字母 D、U、L、R，在提交答案时只填写这个字符串，填写多余的内容将无法得分。</p><h1>题解</h1><p>迷宫类求最短路径问题所以用bfs来求，注意如果使用dfs会很长时间跑不出结果。<br>题目中要求步数相同的情况下输出字典序最小的那个，那么我们可以在遍历四个方向的时候顺序也是D  L  R  U，这样就保证了第一个找到的解既满足步数最小也满足字典序最小</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> //结构体<span class="title">node</span>记录<span class="title">xy</span>坐标和走的顺序</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;string s;</span><br><span class="line"><span class="built_in">node</span>(<span class="keyword">int</span> xx,<span class="keyword">int</span> yy,string ss)</span><br><span class="line">&#123;</span><br><span class="line">x=xx;y=yy,s=ss;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">string mp[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> zimu[<span class="number">4</span>]=&#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> m=<span class="number">30</span>,n=<span class="number">50</span>;</span><br><span class="line">queue&lt;node &gt; qn;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">qn.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">visited[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!qn.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">node t=qn.<span class="built_in">front</span>();</span><br><span class="line">qn.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tx=t.x+dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> ty=t.y+dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(tx&gt;=<span class="number">0</span>&amp;&amp;tx&lt;m&amp;&amp;ty&gt;=<span class="number">0</span>&amp;&amp;ty&lt;n&amp;&amp;!visited[tx][ty]&amp;&amp;mp[tx][ty]!=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tx==m<span class="number">-1</span>&amp;&amp;ty==n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;t.s&lt;&lt;zimu[i]&lt;&lt;endl;<span class="comment">//注意也要将zimu[i]一并输出因为此时它还没有被加到t.s</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">visited[tx][ty]=<span class="number">1</span>;</span><br><span class="line">qn.<span class="built_in">push</span>(<span class="built_in">node</span>(tx,ty,t.s+zimu[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;mp[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果为：<br>DDDDRRURRRRRRDRRRRDDDLDDRDDDDDDDDDDDDRDDRRRURRUURRDDDDRDRRRRRRDRRURRDDDRRRRUURUUUUUUULULLUUUURRRRUULLLUUUULLUUULUURRURRURURRRDDRRRRRDDRRDDLLLDDRRDDRDDLDDDLLDDLLLDLDDDLDDRRRRRRRRRDDDDDDRR</p><h1>bfs模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;type&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(初始状态);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">  type t = q.<span class="built_in">front</span>() ;</span><br><span class="line">  q.<span class="built_in">pop</span>();</span><br><span class="line">  遍历 t 的各个Next状态  next</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="keyword">if</span> (next is legal)</span><br><span class="line">      q.<span class="built_in">push</span>(next的状态); 计数或维护等; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;p&gt;下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可 以通行的地方。&lt;/p&gt;
&lt;p&gt;010000&lt;br&gt;
000100&lt;br&gt;
001001&lt;br&gt;
110000&lt;/p&gt;
&lt;p&gt;迷宫的入口为左上角，出口为右下角，在迷宫中，只能</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>递归算法总结</title>
    <link href="https://zss192.github.io/2021/03/26/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2021/03/26/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-26T09:49:00.000Z</published>
    <updated>2021-03-30T03:50:05.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个函数调用其自身就是递归，也是利用栈实现，每调用一次进一次栈</p></blockquote><p>注意找到递归的终止条件</p><p>作用</p><ul><li>替代多重循环</li><li>解决本来就是用递归形式定义的问题</li><li>将问题分解规模更小的子问题求解（如求阶乘）</li></ul><h2 id="例题讲解"><a class="header-anchor" href="#例题讲解">¶</a>例题讲解</h2><p>🚩1.阶乘问题</p><p>思路讲解：如我们要求3的阶乘，那我们可以把问题分解成求3乘上2的阶乘，然后还可以再把2的阶乘分解成2乘上1的阶乘。</p><p>现在我们已知digui()这个函数就是求一个数的阶乘的函数，3的阶乘分解成两个小问题，对于2的阶乘我们直接可以用digui(2)就可以求。</p><p>但要注意不能无穷的递归下去，要有一个临界点，到了这个临界点后就可以直接返回不用再接着调用digui()函数了，在这题里，如果要求1的阶乘那么可以直接返回1而不用再接着分解问题了。</p><p>作为基础入门，代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digui</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="built_in">digui</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🚩2.汉诺塔问题（分解成小问题）</p><p>有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:<br>(1) 每次只能移动一个盘子;<br>(2) 盘子只能从柱子顶端滑出移到下一根柱子;<br>(3) 盘子只能叠在比它大的盘子上。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/202103261436302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>思路讲解：比如我们现在要把3个圆盘从塔1移到塔3，那么一定是A先放到塔3最下面，然后B和C再移到塔3，这样的话就要先把B和C移走。</p><p>B和C又不能移到塔3，可以先移到塔2作为中间结点然后再移到塔3。这样要解决3层汉诺塔问题要先解决2层汉诺塔问题即把BC如何移到塔2</p><p>B和C要想移到塔2首先C要先移走且不能移到塔2因为塔2必须是最底下的B先移动，那么BC要从塔1移到塔2就要利用塔3当做中间节点</p><p>这样两层汉诺塔问题就拆解成了两个1层汉诺塔的问题而1层汉诺塔可以直接移动至此解决</p><p>解题步骤：</p><ul><li>第一步<ul><li>把n-1个圆盘 从塔1移动到塔2</li></ul></li><li>第二步<ul><li>把第n个圆盘 从塔1移动到塔3</li></ul></li><li>第三步<ul><li>把n-1个圆盘 从塔2移动到塔3</li></ul></li></ul><p>原理：看到这里是不是觉得和阶乘的解决方法类似</p><ul><li>要想解决n层汉诺塔问题必须解决n-1层汉诺塔问题</li><li>解决n-1层汉诺塔问题必须解决n-2层汉诺塔问题</li><li>…</li><li>必须解决1层汉诺塔问题，而1层可以直接移动。类似于阶乘中如果求1的阶乘那么不用再调用函数可以直接返回</li></ul><p>🦄代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> src,<span class="keyword">char</span> mid,<span class="keyword">char</span> dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)    <span class="comment">//递归结束条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;src&lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt;dest&lt;&lt;endl; <span class="comment">//只有一个盘子时直接移动即可</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Hanoi</span>(n<span class="number">-1</span>,src,dest,mid);        <span class="comment">//第一步，把n-1个圆盘 从塔1移动到塔2</span></span><br><span class="line">    cout&lt;&lt;src&lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt;dest&lt;&lt;endl;  <span class="comment">//第二步, 把第n个圆盘 从塔1移动到塔3</span></span><br><span class="line">    <span class="built_in">Hanoi</span>(n<span class="number">-1</span>,mid,src,dest);        <span class="comment">//第三步，把n-1个圆盘 从塔2移动到塔3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Hanoi(3,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;);</span></span><br><span class="line"><span class="comment">//1-&gt;3  第一步，2个圆盘从塔1移到塔2</span></span><br><span class="line"><span class="comment">//1-&gt;2</span></span><br><span class="line"><span class="comment">//3-&gt;2  第一步结束</span></span><br><span class="line"><span class="comment">//1-&gt;3  第二步，到这塔1移到了塔3</span></span><br><span class="line"><span class="comment">//2-&gt;1  第三步，2个圆盘从塔2移到塔3</span></span><br><span class="line"><span class="comment">//2-&gt;3</span></span><br><span class="line"><span class="comment">//1-&gt;3  第三步结束</span></span><br></pre></td></tr></table></figure><blockquote><p>把问题拆解分成几个小步骤，而对于n-1个圆盘的移动直接调用函数改下参数即可</p></blockquote><p><a href="http://player.bilibili.com/player.html?aid=753044588&amp;bvid=BV1Hk4y1k7KL&amp;cid=186093717&amp;page=1">http://player.bilibili.com/player.html?aid=753044588&amp;bvid=BV1Hk4y1k7KL&amp;cid=186093717&amp;page=1</a></p><p>🚩3.[蓝桥杯][算法提高VIP]最大乘积（替代多重循环）</p><p>对于n个数，从中取出m个数，如何取使得这m个数的乘积最大呢？</p><p><strong>输入</strong></p><p>第一行一个数表示数据组数每组输入数据共2行：第1行给出总共的数字的个数n和要取的数的个数m，1&lt;=n&lt;=m&lt;=15，第2行依次给出这n个数，其中每个数字的范围满足:a[i]的绝对值小于等于4。</p><p><strong>输出</strong></p><p>每组数据输出1行，为最大的乘积。</p><p><strong>样例输入</strong></p><p><code>1 5 5 1 2 3 4 2</code></p><p><strong>样例输出</strong></p><p><code>48</code></p><p>思路：用递归代替多重循环(因为不知道有几重)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> maxn=<span class="number">-1e8</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> sum,<span class="keyword">int</span> step)</span>   <span class="comment">//x记录起始搜寻位置，sum记录当前乘积，step记录当前找了几个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(step==m)</span><br><span class="line">    &#123;</span><br><span class="line">        maxn=<span class="built_in">max</span>(maxn,sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i+<span class="number">1</span>,sum*a[i],step+<span class="number">1</span>);</span><br><span class="line">            vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        cout&lt;&lt;maxn&lt;&lt;endl;</span><br><span class="line">        maxn=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>🚩4.N皇后问题（替代多重循环）</p><p>在N×N格的国际象棋上摆放N个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。</p><p>思路讲解：可以递归来求解，尝试每种解法，如果都不冲突就输出这种解法</p><p>对于第k行的皇后依次遍历所放位置i和前k-1行已经摆好的皇后判断是否冲突。</p><p>若在同一列那所放位置和之前某个皇后的列位置相同，若斜线冲突，那两个冲突的皇后行的差值和列的差值的绝对值相同</p><p>🦄代码如下（本质上是N重循环只不过用递归代替）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> queenPos[<span class="number">100</span>];  <span class="comment">//第i行的皇后放在哪一列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NQueen</span><span class="params">(<span class="keyword">int</span> k)</span>  <span class="comment">//在1~k-1行皇后已经摆好的情况下，摆第k行及其后的皇后</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==N+<span class="number">1</span>)    <span class="comment">//N个皇后已经摆好，此时输出摆法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;queenPos[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="comment">//逐个尝试第k行皇后的列位置i</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="comment">//和已经摆好的前k个皇后的位置比较，看是否冲突</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(queenPos[j]==i || <span class="built_in">abs</span>(queenPos[j]-i)==<span class="built_in">abs</span>(k-j))</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//冲突，尝试下一个位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==k)    <span class="comment">//当前选的列位置i不冲突（只有不冲突上面的for循环才不会break）</span></span><br><span class="line">        &#123;</span><br><span class="line">            queenPos[k]=i; <span class="comment">//将第k个皇后摆放在列位置i</span></span><br><span class="line">            <span class="built_in">NQueen</span>(k+<span class="number">1</span>);</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="built_in">NQueen</span>(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🚩5.逆波兰表达式（递归解决递归形式的问题）</p><p>如2 + 3用逆波兰表达式为+ 2 3，（2+3）* 4表示为* + 2 3 4，本题求逆波兰表达式的值</p><p>输入：* + 11.0 12.0 + 24.0 35.0</p><p>输出：1357.000000</p><p>提示：(11.0+12.0)*(24.0+35.0)</p><p>思路：首先来看逆波兰表达式的定义</p><ul><li>一个数就是一个逆波兰表达式，值为该数</li><li>&quot;运算符 逆波兰表达式 逆波兰表达式&quot;也是逆波兰表达式</li></ul><p>从上面的逆波兰表达式的定义可以看到定义中又出现了逆波兰表达式这不就和递归一样吗，自身又用到了自身</p><p>而显然终止条件就是一个数的情况</p><p>🦄代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">exp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;    <span class="comment">//cin遇到空格会停止</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (s[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()+<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()-<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()*<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()/<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="built_in">stod</span>(s);   <span class="comment">//stod函数将字符串类型转换为double类型</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">exp</span>()&lt;&lt;endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// + 2 3</span></span><br><span class="line"><span class="comment">// 首先读入+然后case &#x27;+&#x27;执行return exp()+exp()</span></span><br><span class="line"><span class="comment">//第一个exp()也会执行cin&gt;&gt;s;这时的s是2直接return stod(&quot;2&quot;)</span></span><br><span class="line"><span class="comment">//第二个exp()也会执行cin&gt;&gt;s;这时的s是2直接return stod(&quot;3&quot;)</span></span><br><span class="line"><span class="comment">//然后二者返回了2和3再执行加法操作返回5输出</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个函数调用其自身就是递归，也是利用栈实现，每调用一次进一次栈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意找到递归的终止条件&lt;/p&gt;
&lt;p&gt;作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替代多重循环&lt;/li&gt;
&lt;li&gt;解决本来就是用递归形式定义的问题&lt;/li</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法总结</title>
    <link href="https://zss192.github.io/2021/03/26/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2021/03/26/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-26T07:48:00.000Z</published>
    <updated>2021-03-30T03:49:08.433Z</updated>
    
    <content type="html"><![CDATA[<p>优点：简单，高效，省去了为了找最优解可能需要穷举操作，通常作为其它算法的辅助算法来使用；</p><p>缺点：不从总体上考虑其它可能情况，每次选取局部最优解，不再进行回溯处理，所以很少情况下得到最优解。</p><blockquote><p>每一步都选取当前状态下最好的选择(局部最优)。(整体不一定是最优解)<br>助记：贪心即比较贪婪只注重&quot;眼前利益&quot;不能长远考虑</p></blockquote><p>正是因为原问题太复杂无法直接得到全局最优解，所以也无法判定贪心算法得到的结果是否逼近全局最优解，只要最终得到的结果在接受范围内即可</p><h2 id="例题案例"><a class="header-anchor" href="#例题案例">¶</a>例题案例</h2><blockquote><p>注：以下两个案例均不能得到最优解，只能得到近似最优解，案例只是解释思想</p></blockquote><h3 id="1-找零钱问题"><a class="header-anchor" href="#1-找零钱问题">¶</a>1.找零钱问题</h3><p>假设你开了间小店，不能电子支付，钱柜里的货币只有 25 分、10 分、5 分和 1 分四种硬币，如果你是售货员且要找给客户 41 分钱的硬币，如何安排才能找给客人的钱既正确且硬币的个数又最少？</p><p>思路：如果用贪心算法求解</p><p>要找给顾客41分且硬币数最少，那么大数值的硬币数越多越好。先用一个25分的，41-25=16。</p><p>然后根据局部最优当找零为16时从25，10，5，1中选一个，我们可以选10，16-10=6</p><p>找零数为6时从25，10，5，1中选一个，我们可以选5，6-5=1，以此类推</p><blockquote><p>我们可以看到当做出一个选择后，然后相当于以现在的状态为起始状态，再次做出选择</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*<span class="keyword">int</span>* money=<span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num_25=<span class="number">0</span>,num_10=<span class="number">0</span>,num_5=<span class="number">0</span>,num_1=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不断尝试每一种硬币</span></span><br><span class="line"><span class="keyword">while</span>(money&gt;=<span class="number">25</span>) &#123; num_25++; money -=<span class="number">25</span>; &#125;</span><br><span class="line"><span class="keyword">while</span>(money&gt;=<span class="number">10</span>) &#123; num_10++; money -=<span class="number">10</span>; &#125;</span><br><span class="line"><span class="keyword">while</span>(money&gt;=<span class="number">5</span>)  &#123; num_5++;  money -=<span class="number">5</span>; &#125;</span><br><span class="line"><span class="keyword">while</span>(money&gt;=<span class="number">1</span>)  &#123; num_1++;  money -=<span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">cout&lt;&lt; <span class="string">&quot;25分硬币数：&quot;</span>&lt;&lt;num_25&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;10分硬币数：&quot;</span>&lt;&lt;num_10&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;5分硬币数：&quot;</span>&lt;&lt;num_5&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;1分硬币数：&quot;</span>&lt;&lt;num_1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*25分硬币数：1</span></span><br><span class="line"><span class="comment">10分硬币数：1</span></span><br><span class="line"><span class="comment">5分硬币数：1</span></span><br><span class="line"><span class="comment">1分硬币数：1*/</span></span><br></pre></td></tr></table></figure><h3 id="2-01背包问题"><a class="header-anchor" href="#2-01背包问题">¶</a>2.01背包问题</h3><p>有一个背包，最多能承载重量为 C=150的物品，现在有7个物品（物品不能分割成任意大小），编号为 1~7。</p><p>重量分别是 wi=[35,30,60,50,40,10,25]，价值分别是 pi=[10,40,30,50,35,40,30]。</p><p>现在从这 7 个物品中选择一个或多个装入背包，要求在物品总重量不超过 C 的前提下，所装入的物品总价值最高。</p><p>思路：若用贪心算法，有3种策略</p><ol><li>价值主导选择，每次都选价值最高的物品放进背包；</li><li>重量主导选择，每次都选择重量最轻的物品放进背包；</li><li>价值密度主导选择，每次选择都选价值/重量最高的(性价比最高的)物品放进背包。</li></ol><p>策略1：每次优先选价值最高的</p><p>解：按照价值排序则放入背包的编号依次为4、2、6、5。</p><p>其价值为50+40+40+35=165，其重量为50+30+10+40=130</p><p>策略2：每次优先选重量最轻的</p><p>解：按照重量最轻则放入的编号依次为6、7、2、1、5</p><p>其价值为40+30+40+10+35=155，其重量为10+25+30+35+40=140</p><p>策略3：每次优先选价值/重量最大的</p><p>解：这7件物品的价值密度分别为0.286、1.333、0.5、1.0、0.875、4.0、1.2</p><p>所以放入的编号依次为6、2、7、4、1</p><p>其价值为40+40+30+50+10=170，其重量为10+30+25+50+35=150</p><h2 id="LeetCode习题"><a class="header-anchor" href="#LeetCode习题">¶</a>LeetCode习题</h2><p>🚩1.题目1221分割平衡字符串问题</p><p>在一个 平衡字符串 中，‘L’ 和 ‘R’ 字符的数量是相同的。给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。</p><p>注意：分割得到的每个字符串都必须是平衡字符串。返回可以通过分割得到的平衡字符串的最大数量 。</p><blockquote><p>输入：s = “RLRRLLRLRL”<br>输出：4<br>解释：s 可以分割为 “RL”、“RRLL”、“RL”、“RL” ，每个子字符串中都包含相同数量的 ‘L’ 和 ‘R’ 。</p></blockquote><p>解：用变量balance(初始为0)记录扫描到的L和R的数目，遇到L则balance+1否则减1当其为0的时候说明当前找到了平衡子串</p><p>上一次划分后balance=0，剩下的平衡子串接着用上述思想（贪心思想）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">balancedStringSplit</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> len=s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">int</span> balance=<span class="number">0</span>,result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;L&#x27;</span>)balance++;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>)balance--;</span><br><span class="line">    <span class="keyword">if</span>(balance==<span class="number">0</span>)result++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;优点：简单，高效，省去了为了找最优解可能需要穷举操作，通常作为其它算法的辅助算法来使用；&lt;/p&gt;
&lt;p&gt;缺点：不从总体上考虑其它可能情况，每次选取局部最优解，不再进行回溯处理，所以很少情况下得到最优解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一步都选取当前状态下最好的选</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>STL知识点</title>
    <link href="https://zss192.github.io/2021/03/21/STL%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zss192.github.io/2021/03/21/STL%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-03-21T03:47:00.000Z</published>
    <updated>2021-03-30T03:48:10.017Z</updated>
    
    <content type="html"><![CDATA[<h1>STL知识点</h1><p>STL，即标准模板库或者泛型库，其包含有大量的模板类和模板函数，是 C++ 提供的一个基础模板的集合，用于完成诸如输入/输出、数学计算等功能。可以理解成动态数组</p><p>优点：举个例子，定义一个数组int a[n]，这种方法必须事先确定好长度，而如果无法事先确定长度一般都会把n设的比较大，就会造成空间的浪费。用指针则会比较麻烦，而STL可以很好地解决这个问题，而且所有容器和算法都是总结了几十年来算法和数据结构的研究成果。</p><h2 id="1-vector容器"><a class="header-anchor" href="#1-vector容器">¶</a>1.vector容器</h2><h3 id="🧨简单用法"><a class="header-anchor" href="#🧨简单用法">¶</a>🧨简单用法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个向量存储 int</span></span><br><span class="line"> vector&lt;<span class="keyword">int</span>&gt; vec; </span><br><span class="line"> <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 显示 vec 的原始大小</span></span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;vector size = &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;  <span class="comment">//0</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 推入 5 个值到向量中</span></span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(i);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 显示 vec 扩展后的大小</span></span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;extended vector size = &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;   <span class="comment">//5</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 访问向量中的 5 个值</span></span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;value of vec [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; vec[i] &lt;&lt; endl; <span class="comment">//0 1 2 3 4</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="🏄🏼‍♂️进阶用法"><a class="header-anchor" href="#🏄🏼‍♂️进阶用法">¶</a>🏄🏼‍♂️进阶用法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;   <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素(在末尾)</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);  <span class="comment">//[1]</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">2</span>);  <span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素(也是删末尾的那个)</span></span><br><span class="line">vec.<span class="built_in">pop_back</span>();    <span class="comment">//[1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空vector</span></span><br><span class="line">vec.<span class="built_in">clear</span>();       <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器 iterator 访问值</span></span><br><span class="line"><span class="comment">//注意begin指向第一个元素，而end指向的是最后一个元素的下一个位置</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator v = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>( v != vec.<span class="built_in">end</span>()) &#123;    <span class="comment">//如果等于end说明前面有效元素都访问了</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;value of v = &quot;</span> &lt;&lt; *v &lt;&lt; endl;  <span class="comment">//0 1 2 3 4</span></span><br><span class="line">v++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数初始化</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">10</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(n,<span class="number">1</span>)</span></span>;  <span class="comment">//相当于push_back了10个1</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(n)</span></span>;    <span class="comment">//不传初始值，默认为0即10个0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义二维数组</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; vec2;</span><br></pre></td></tr></table></figure><h2 id="2-set集合（不存在重复元素）"><a class="header-anchor" href="#2-set集合（不存在重复元素）">¶</a>2.set集合（不存在重复元素）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合</span></span><br><span class="line">set&lt;string&gt; country;   <span class="comment">//&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">country.<span class="built_in">insert</span>(<span class="string">&quot;China&quot;</span>);      <span class="comment">//&#123;&quot;China&quot;&#125;</span></span><br><span class="line">country.<span class="built_in">insert</span>(<span class="string">&quot;America&quot;</span>);    <span class="comment">//&#123;&quot;China&quot;,America&quot;&#125;</span></span><br><span class="line"><span class="comment">//如果插入已经存在的元素不会产生任何效果</span></span><br><span class="line">country.<span class="built_in">insert</span>(<span class="string">&quot;China&quot;</span>);      <span class="comment">//&#123;&quot;China&quot;,&quot;America&quot;&#125;  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">country.<span class="built_in">erase</span>(<span class="string">&quot;America&quot;</span>);     <span class="comment">//&#123;&quot;China&quot;&#125;</span></span><br><span class="line"><span class="comment">//如果删除的元素不存在也不会产生任何效果</span></span><br><span class="line">country.<span class="built_in">erase</span>(<span class="string">&quot;Japan&quot;</span>);       <span class="comment">//&#123;&quot;China&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定某元素是否存在</span></span><br><span class="line">country.<span class="built_in">count</span>(<span class="string">&quot;China&quot;</span>);       <span class="comment">//若存在返回1否则返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器 iterator 访问值(类似于vector)</span></span><br><span class="line"><span class="comment">// 注意set集合会自动排序，如若先前插入了2543则会输出2345</span></span><br><span class="line"><span class="keyword">for</span> (set&lt;string&gt;::iterator it=country.<span class="built_in">begin</span>();it!=country.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">      cout &lt;&lt; *it &lt;&lt; endl;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空set</span></span><br><span class="line">set.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用来存结构体，但结构体没法判断顺序需要手动设置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">people</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">people</span>(string _name,<span class="keyword">int</span> _age)</span><br><span class="line">    &#123;</span><br><span class="line">        name=_name;</span><br><span class="line">        age=_age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按照年龄排序</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> people &amp;rhs) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> age &lt; rhs.age;    <span class="comment">//这里直接返回了，如果年龄可能相同那么要判断下如果年龄相同那就用姓名比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;people&gt; s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">people</span>(<span class="string">&quot;bob&quot;</span>,<span class="number">10</span>));s.<span class="built_in">insert</span>(<span class="built_in">people</span>(<span class="string">&quot;alice&quot;</span>,<span class="number">20</span>));s.<span class="built_in">insert</span>(<span class="built_in">people</span>(<span class="string">&quot;linda&quot;</span>,<span class="number">15</span>));</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (set&lt;people&gt;::iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">       cout &lt;&lt; it-&gt;name &lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;it-&gt;age &lt;&lt;endl;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-map字典映射-一对一映射"><a class="header-anchor" href="#3-map字典映射-一对一映射">¶</a>3.map字典映射(一对一映射)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个map</span></span><br><span class="line">map&lt;string,<span class="keyword">int</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">dict[<span class="string">&quot;Tom&quot;</span>]=<span class="number">3</span>;                       <span class="comment">//dict[key]=value,这种遍历时不会排序</span></span><br><span class="line"><span class="comment">//这样遍历时可以通过it-&gt;first(Tom)和it-&gt;second(3)取值</span></span><br><span class="line">dict.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">3</span>));   <span class="comment">//而且遍历时会按key(这里是string)排序  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取元素</span></span><br><span class="line">dict[<span class="string">&quot;Tom&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断关键字是否存在</span></span><br><span class="line">dict.<span class="built_in">count</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取个数</span></span><br><span class="line">dict.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure><h2 id="例题讲解"><a class="header-anchor" href="#例题讲解">¶</a>例题讲解</h2><p>🚩1.n块积木，编号1到n，初始时，第i块放在第i个位置。现在，进行a b操作，每次操作把b位置积木全放到a位置上。输出操作完之后每个位置上的木块。<br>输入:n,m。n代表有n个积木，m代表有m个操作（1≤n≤10000，1≤m≤10000）</p><p>接下来m行是m个操作。如果ab相等则本次不移动木块。</p><p>输出每个位置从下到上的积木编号，如果该位置没有积木，输出一行空行。</p><p>样例输入：</p><p>4 4</p><p>3 1</p><p>4 3</p><p>2 4</p><p>2 2</p><p>样例输出：（为了更直观此处用*表示换行，代码里是按题意）</p><p>/*<br>2 4 3 1*<br>*<br>*</p><p>思路：如果用数组会爆内存(n和m范围都很大而且还要移动)，所以用动态数组，而且用动态数组刚好每一个vec[i]代表一个位置如下图所示</p><p>每个位置放的积木数也可以不确定，通过vec[1][0]、vec[1][1]可以得到对应的数值</p><p>对于每一个ab操作，对vec[b]遍历将里面的积木都push到vec[a]中再清空vec[b]即可</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210321120147976.png"  alt="在这里插入图片描述"></p><p>🦄代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;    <span class="comment">//n个积木，m个操作</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec[<span class="number">10010</span>];   <span class="comment">//vec[i]相当于一个vector里面可以放若干整数,对应n个位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vec[i].<span class="built_in">push_back</span>(i);  <span class="comment">//c[i]位置放编号为i的积木</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行a b操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(a==b)    <span class="comment">//若相等不进行任何操作</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec[b].<span class="built_in">size</span>(); j++)   <span class="comment">//对于c[b]位置的积木遍历</span></span><br><span class="line">            &#123;</span><br><span class="line">                vec[a].<span class="built_in">push_back</span>(vec[b][j]);    <span class="comment">//将c[b]位置的积木全部push到c[a]位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt;().<span class="built_in">swap</span>(vec[b]);       <span class="comment">//清空c[b]且释放内存</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j!=vec[i].<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                cout&lt;&lt;vec[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">else</span>   </span><br><span class="line">                cout&lt;&lt;vec[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;STL知识点&lt;/h1&gt;
&lt;p&gt;STL，即标准模板库或者泛型库，其包含有大量的模板类和模板函数，是 C++ 提供的一个基础模板的集合，用于完成诸如输入/输出、数学计算等功能。可以理解成动态数组&lt;/p&gt;
&lt;p&gt;优点：举个例子，定义一个数组int a[n]，这种方法必须事先确定</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯-最大子阵(C++详细解释版)</title>
    <link href="https://zss192.github.io/2021/03/19/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%9C%80%E5%A4%A7%E5%AD%90%E9%98%B5-C-%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E7%89%88/"/>
    <id>https://zss192.github.io/2021/03/19/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%9C%80%E5%A4%A7%E5%AD%90%E9%98%B5-C-%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E7%89%88/</id>
    <published>2021-03-19T11:30:00.000Z</published>
    <updated>2021-03-30T03:46:51.585Z</updated>
    
    <content type="html"><![CDATA[<h1>题目描述</h1><p>给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。</p><p>其中，A的子矩阵指在A中行和列均连续的一块。</p><p>样例说明<br>取最后一列，和为10。<br>数据规模和约定<br>对于100%的数据，1&lt; =n, m&lt; =500，A中每个元素的绝对值不超过5000。</p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入的第一行包含两个整数n, m，分别表示矩阵A的行数和列数。 </span><br><span class="line">接下来n行，每行m个整数，表示矩阵A。 </span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行，包含一个整数，表示A中最大的子矩阵中的元素和。 </span><br></pre></td></tr></table></figure><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3 </span><br><span class="line">-1 -4 3</span><br><span class="line">3 4 -1</span><br><span class="line">-5 -2 8</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>题目在这：<a href="https://www.dotcpp.com/oj/problem1445.html"><strong>题目 1445: [蓝桥杯][历届试题]最大子阵</strong></a></p><h1>题目分析</h1><p>假设现在有个一维数组nums[4]={-1,2,3,-4}。</p><p>如果要求他的最大连续子序列的和，假设max_sum[i]表示以第i个元素结尾的连续子序列的最大和，可以推出max_sum[i]=max(max_sum[i-1]+nums[i],nums[i])</p><blockquote><p>可以理解为比如max_sum[2]它的值为max(max_sum[1]+nums[2],nums[2])，因为必须包含nums[2]，所以如果max_sum[1]&gt;0那肯定加上max_sum[1]最大，而如果max_sum[1]&lt;0那加上他反而更小。所以取这两个的最大值</p></blockquote><p>这是求一维数组的最大子序列和，而题目要求的是二维数组的最大子序列和。</p><p>如果能把题目中求二维变成求一维就好了，其实是可以的。</p><p>我们可以看下面这样一个数组，其中ai表示第i行</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/c1e8bd87984f77d8ef38424afae4e532.png"  alt="image-20210318180509897"></p><p>如果要求它的最大子阵，我们可以变成这样</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/82605d992d320644f9befb595ac61cf7.png"  alt="image-20210318180706949"></p><p>如图所示，可以用一维数组分别表示第一行、第一行加第二行、第一行加第二行加第三行…</p><p>这样求它们每个的最大子序列和，然后其中最大的数值就是题目所求</p><blockquote><p>假设最大子矩阵是右下角那四个的和，那么等效为a2+a3的子序列最大和</p><p>假设最大子矩阵是9、2、-4、1、-1、8左下角那块，它们等效为a1+a2+a3的子序列最大和</p><p>由此我们可以看出无论最大子矩阵是在哪一块，图中红色方框中的10行一定有一行求得的最大子序列的值可以表示它们</p></blockquote><p>这样的话，题目则由求二维数组最大子矩阵的和转变为求图中红色方框那10行哪一行的最大子序列的和最大。我们只要单独求出每一个的最大值，在找到它们的最大值的最大值即可。</p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//定义变量，读入输入的值存入数组，没什么说的</span></span><br><span class="line"> <span class="keyword">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">510</span>];</span><br><span class="line">    <span class="keyword">int</span> temp[<span class="number">510</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = num[<span class="number">0</span>][<span class="number">0</span>];    <span class="comment">//先将结果其设为第一个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//核心代码</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(temp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(temp));<span class="comment">//数组清零</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面两层循环可以确定从i行到j行即ai+..+aj</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">                temp[k] += num[j][k];<span class="comment">//第一次temp数组存的是a0(i=0,j=0),第二次是存的a0+a1(i=0,j=1)</span></span><br><span class="line">            &#125;<span class="comment">//因为第二次时temp[0]还存着num[0][0]呢即存着第一行的值，加上第二行即a0+a1</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对当前temp一维数组求最大子序列和，第一次是求a0,第二次是求a0+a1</span></span><br><span class="line">            dp[<span class="number">0</span>] = temp[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;m;u++)&#123;</span><br><span class="line">                dp[u] = <span class="built_in">max</span>(dp[u<span class="number">-1</span>]+temp[u],temp[u]);<span class="comment">//一维数组求最大子序列和</span></span><br><span class="line"><span class="comment">//如果这次求得的和大于目前最大值则更新</span></span><br><span class="line">                <span class="keyword">if</span>(dp[u]&gt;result)</span><br><span class="line">                    result = dp[u];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line"><span class="comment">//  temp数组每次存的值如下</span></span><br><span class="line"><span class="comment">//  -1 -4  3   a0</span></span><br><span class="line"><span class="comment">//  2  0   2   a0+a1</span></span><br><span class="line"><span class="comment">// -3  -2 10   a0+a1+a2</span></span><br><span class="line"><span class="comment">// 3  4  -1 a1</span></span><br><span class="line"><span class="comment">// -2  2   7 a1+a2</span></span><br><span class="line"><span class="comment">// -5 -2  8 a2</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考</h1><p><a href="https://blog.csdn.net/Jaster_wisdom/article/details/79671736">蓝桥杯-最大子阵 动态规划</a></p><p><a href="https://frostime.github.io/2019/06/02/%E6%9C%80%E5%A4%A7%E5%AD%90%E9%98%B5%E5%92%8C/">最大子阵和</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;题目描述&lt;/h1&gt;
&lt;p&gt;给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。&lt;/p&gt;
&lt;p&gt;其中，A的子矩阵指在A中行和列均连续的一块。&lt;/p&gt;
&lt;p&gt;样例说明&lt;br&gt;
取最后一列，和为10。&lt;br&gt;
数据规模和约定&lt;br&gt;
对于100%的数据，</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>deepin使用记录</title>
    <link href="https://zss192.github.io/2020/10/28/deepin%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://zss192.github.io/2020/10/28/deepin%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-28T06:59:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>这些笔记为我在用deepin 15.11时总结的一些知识点。包括一些技巧还有遇到的一些问题及解决方法。文章长期更新，希望能帮助到有需要的小伙伴。</p><h1>目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin 可执行文件，可在终端输入即可执行</span><br><span class="line">&#x2F;etc  配置文件</span><br><span class="line">&#x2F;home    除root用户的其他用户的家目录</span><br><span class="line">&#x2F;tmp     临时文件，系统运行时产生的临时文件</span><br><span class="line">&#x2F;mnt     外接设备需要挂载时，就挂在在这个目录</span><br><span class="line">&#x2F;opt 用户自己下载的应用存在这(个人习惯)</span><br></pre></td></tr></table></figure><h1>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzPr 源文件 目标文件//快速复制大文件</span><br><span class="line">cat test1.txt test2.txt &gt; test.txt //合并test1和test2到<span class="built_in">test</span>,比如可制作马</span><br><span class="line">df -h//以较高可读性查看磁盘空间</span><br><span class="line">管道 |：ls / | grep abc//查询根目录下包含“abc”的文件，后面是在前面输出的基础上过滤的</span><br><span class="line">top //动态展示进程占得资源，按M(MEM)表示按内存从高到低排列，P表示按CPU使用率从高到低排列</span><br><span class="line">find 路径范围 -name 文件名称  //如find /etc -name *.conf</span><br><span class="line">ps -ef//查看进程信息，如查询appache的httpd服务是否开启，ps -ef | grep httpd</span><br><span class="line">service 服务名 start/stop/restart//如service httpd start</span><br><span class="line"><span class="built_in">kill</span> -9 进程id//如<span class="built_in">kill</span> 29867,进程id可通过top或ps -ef获得</span><br><span class="line">killall 进程名称//如killall httpd</span><br><span class="line">ifconfig//常用于查看ip信息，不一定只有两个</span><br><span class="line">man 指令名//用于查询某指令的用法，如man mv</span><br><span class="line">tar -zxvf 压缩包//解压压缩包</span><br><span class="line">sudo dpkg -i test.deb//安装deb包</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:12333&quot;</span>//终端暂时使用代理(推荐用proxychains)</span><br><span class="line">chown -R 用户名 文件夹//更改指定文件夹下所有文件所有者，</span><br><span class="line">zip -r myFile.zip ./*  //将当前所有文件压缩成zip包</span><br></pre></td></tr></table></figure><h1>使用技巧</h1><ul><li><p>使用<strong>Ctrl+u删除光标前所有内容</strong>，Ctrl+k删除光标后所有内容</p></li><li><p>rm ~/.config/SweetScape/010\ Editor.ini  可无限试用010editor</p></li><li><p>Navicat15破解：<a href="https://www.yuque.com/fank243/devops/crzwuq">点我查看</a></p></li><li><p><sub>/.local/share/applications/wine/Programs/下rm掉多余的wine软件菜单项，再到</sub>/.config/menus/applications-merged/下去清理多余的垃圾。</p></li><li><p>crontab可定时执行脚本</p></li><li><p>安装mysql:<a href="https://wangxin1248.github.io/linux/2018/07/ubuntu18.04-install-mysqlserver.html">https://wangxin1248.github.io/linux/2018/07/ubuntu18.04-install-mysqlserver.html</a></p></li><li><p>终端暂时使用代理 proxychains + 命令</p></li><li><p>格式化U盘为ext4格式(timeshift备份到U盘)</p><ul><li><p># 该命令查看你的设备<br>lsblk -f</p><p># 卸载U盘</p><p>umount 你的U盘设备(如/dev/sdb1)</p><p># 格式化成ext4格式<br>mkfs.ext4 你的U盘设备(如/dev/sdb1)，之后等就行了</p></li></ul></li><li><p>浏览器快捷键：</p><p><strong>Ctrl + L</strong>   地址栏搜索</p><p><strong>Ctrl + T</strong>   打开新标签页；</p><p><strong>Ctrl + W</strong>  关闭当前标签页；</p><p><strong>Ctrl + Shift + W</strong>  关闭整个浏览器</p><p><strong>Ctrl + 数字键 1 至 8</strong> 可以按标签页顺序定位；</p><p><strong>空格键</strong> 可以向下滚动网页，<strong>Shift + 空格键</strong> 则是向上。</p></li></ul><h1>常见问题解决方案</h1><p>1.将一个py文件添加到bash直接在终端输入不用切换到想用目录</p><p>ln -s /opt/tools/dirsearch/dirsearch.py /bin/dirsearch   //在终端输入dirsearch即可运行这个py文件</p><p>2.deepin中默认的编辑器用dedit(ded按tab即可)</p><p>3.普通用户使用sudo免密码：dedit /etc/sudoers 修改your_user_name ALL=(ALL) NOPASSWD: ALL</p><p>4.sudoers文件修改错误导致无法使用sudo：pkexec 代替sudo更改sudoers文件</p><p>5.为bat文件创建含图标快捷方式：在/usr/bin下创建如burpsuite把bat文件复制粘贴(注意路径换成绝对路径)，这样就可在命令行直接运行bat文件，然后用桌面文件创建工具创建快捷方式即可</p><p>6.运行wine报错程序错误：删除~/.wine目录，然后运行winecfg（会重新生成.wine）</p><p>7.安装wine-mono和wine-gecko可去官网：<a href="https://dl.winehq.org/wine/%E5%AE%89%E8%A3%85msi%E6%96%87%E4%BB%B6%EF%BC%8C%E7%A7%BB%E5%8A%A8%E5%88%B0/home/%E7%94%A8%E6%88%B7%E5%90%8D/.wine%E7%9B%AE%E5%BD%95%E4%B8%8B">https://dl.winehq.org/wine/安装msi文件，移动到/home/用户名/.wine目录下</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine  msiexec /i  wine-mono-4.9.4.msi  //例如安装wine-mono</span><br></pre></td></tr></table></figure><p>8.qq无法加载图片</p><p>关闭ipv6</p><p>9.tmp下的mysql.sock文件被删，导致navicat打不开本地数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server start  //启动mysql，重新生成mysql.sock文件</span><br></pre></td></tr></table></figure><p>10.若有时pip安装失败可尝试在加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i http://pypi.douban.com/simple/ --trusted-host [pypi.douban.com](http://pypi.douban.com/)</span><br></pre></td></tr></table></figure><p>11.鼠标变成十字架，无法使用鼠标</p><p>原因：在shell终端误输入了import命令</p><p>解决方法：ps -aux | grep import    找到对应pid,kill -9 pid 即可</p><p>12.运行py文件鼠标变十字架，无法使用鼠标</p><p>打开py文件，在最上方加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3     //指定由哪个解释器来执行脚本</span></span><br></pre></td></tr></table></figure><p>原因：python2和python3不兼容，加上这个就在输入./test.py默认由python3执行</p><p>13.应用选择默认程序页面没有我们想要的应用</p><p>打开/usr/share/applications找到比如typora</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加一行 MimeType&#x3D;*&#x2F;*  即可</span><br></pre></td></tr></table></figure><p>14.telegram不要使用2.1.5的版本会出现无法输入中文的问题，使用2.1.4即可解决</p><p>15.更新最新版的QQ：将Windows的C:\Program Files (x86)\Tencent\QQ\下的文件覆盖~/.deepinwine/Deepin-QQ/drive_c/Program\ Files/Tencent/QQ/即可（先备份）</p><p>16.npm太慢可以用cnpm（镜像，第一次用要下载）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>以后都可以用cnpm代替npm了</p><p>17.百度网盘无法登录</p><p>编辑百度网盘的图标把Exec内容前加上sudo(用管理员身份打开)</p><p>如果用的UTools，修改过图标后重启，UTools里打开才是修改后的</p><p>18.解决QQ崩溃问题(可减少崩溃次数)：</p><p>替换dwrite.dll，<a href="https://bbs.deepin.org/forum.php?mod=attachment&amp;aid=OTg1MTJ8NjBlYzc3NTB8MTYwMTEwMzQxNnwwfDE5NjE4OQ%3D%3D">点我下载</a>，解压后重命名为dwrite.dll然后替换~/.wine/drive_c/windows/system32/下的dwrite.dll。</p><p>之后在winecfg里面设置函数库添加dwrite，同时模拟windows版本只能设置成xp</p><p>19.无法弹出U盘(有程序正在使用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df -h查看挂载点，例如&#x2F;dev&#x2F;sdb1</span><br><span class="line">sudo fuser -mv &#x2F;dev&#x2F;sdb1查看U盘的uid，杀死这个进程</span><br><span class="line">kill -9进程号</span><br><span class="line">正常弹出U盘即可</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;这些笔记为我在用deepin 15.11时总结的一些知识点。包括一些技巧还有遇到的一些问题及解决方法。文章长期更新，希望能帮助到有需要的小伙伴。&lt;/p&gt;
&lt;h1&gt;目录结构&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://zss192.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://zss192.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git使用方法</title>
    <link href="https://zss192.github.io/2020/10/16/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://zss192.github.io/2020/10/16/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-10-16T13:45:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>常用代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init    &#x2F;&#x2F;初始化仓库,若是用的clone则不需要这步</span><br><span class="line">git config --global user.name &quot;账户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱号&quot;</span><br><span class="line">git config --global --list&#x2F;&#x2F;查看全局配置(设置的邮箱等)</span><br><span class="line">git remote add origin 远程库地址 &#x2F;&#x2F;关联到远程库</span><br><span class="line"></span><br><span class="line">日常使用步骤</span><br><span class="line">git add .&#x2F;&#x2F;把文件添加到版本库中</span><br><span class="line">git commit -m &quot;test&quot;&#x2F;&#x2F;把文件提交到仓库。引号内为提交说明</span><br><span class="line">git pull origin master&#x2F;&#x2F;把远程仓库的master分之拉到本地</span><br><span class="line">git push origin master&#x2F;&#x2F;把本地文件推到远程仓库master分支</span><br></pre></td></tr></table></figure><h1>速查表</h1><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/c3564e1d2318110e06be04b97fdf8fd0.png"  alt="img"></p><h1>注意事项</h1><p>1.不到万不得已不要使用强制提交(问就是曾和学长一起开发系统用过，然后把更新记录全部覆盖了，虽然代码没什么大改动，但是提交记录被全部覆盖不利于后期维护)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin master　如果本地比远程仓库版本低，会提醒先git pull更新，但仍要坚持提交可用这个强制提交</span><br></pre></td></tr></table></figure><p>2.github添加了ssh密钥使用ssh -T git@github.com测试报错？</p><p>事实证明重启即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;常用代码&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客部署到服务器</title>
    <link href="https://zss192.github.io/2020/10/15/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://zss192.github.io/2020/10/15/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-10-15T05:14:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>准备工作</h1><ul><li>本地hexo已配置好</li><li>个人系统：deepin15.11</li><li>服务器：Ubuntu 18.04</li></ul><h1>开始吧</h1><h2 id="安装git和nginx"><a class="header-anchor" href="#安装git和nginx">¶</a>安装git和nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install git nginx</span><br></pre></td></tr></table></figure><h2 id="配置nginx"><a class="header-anchor" href="#配置nginx">¶</a>配置nginx</h2><p><strong>nginx version: nginx/1.14.0 (Ubuntu)</strong></p><blockquote><p>在此说明nginx版本是因为我曾试了网上很多nginx配置但都没生效(原谅我只用过Apache)，后来搜了具体版本的配置才生效。所以日后还是要养成搜的时候加上版本的习惯。</p></blockquote><p>我的博客目录在/opt/hexo</p><p>当然你也可以自己设置，之后的步骤里更换成你的目录就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/hexo</span><br></pre></td></tr></table></figure><p>编写 nginx 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/blog.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 ;</span><br><span class="line">        root /opt/hexo;</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line">        server_name 47.93.34.7; #有域名就填域名，也可填服务器公网ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>这个时候我们已经把默认站点更换为/opt/hexo，你可以在相应目录下新建一个文件访问ip查看是否生效。</p><h2 id="配置-Git-Hooks"><a class="header-anchor" href="#配置-Git-Hooks">¶</a>配置 Git Hooks</h2><h3 id="创建-Git-裸仓库"><a class="header-anchor" href="#创建-Git-裸仓库">¶</a>创建 Git 裸仓库</h3><p><strong>blog.git</strong>作为远程 Git 仓库，Hexo 在本地生成的博客静态文件可以通过 push 与其同步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/blog.git &amp;&amp; cd ~/blog.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure><h3 id="配置-Hooks-脚本"><a class="header-anchor" href="#配置-Hooks-脚本">¶</a>配置 Hooks 脚本</h3><p><strong>post-receive</strong>脚本将在<strong>blog.git</strong>仓库接收到 push 时执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./hooks/post-receive</span><br></pre></td></tr></table></figure><p>脚本非常简单，删除原有的**/opt/hexo目录，然后从<strong>blog.git</strong>仓库 clone 新的博客静态文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">rm -rf /opt/hexo</span><br><span class="line">git clone /root/blog.git /opt/hexo</span><br></pre></td></tr></table></figure><p>给<strong>post-receive</strong>脚本执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x .&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure><h2 id="修改本地文件"><a class="header-anchor" href="#修改本地文件">¶</a>修改本地文件</h2><p>修改本地博客根目录下的_config.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: root@你的公网ip:blog.git</span><br></pre></td></tr></table></figure><p>如下图所示</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201014235835414.png"  alt="image-20201014235835414"></p><h2 id="免密推送代码"><a class="header-anchor" href="#免密推送代码">¶</a>免密推送代码</h2><p>前提是本地有ssh密钥(可用cat ~/.ssh/id_rsa.pub查看是否存在)</p><p>若没有ssh密钥则要生成ssh key，按3个回车即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>然后把公钥推到服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub | ssh [username]@[remote_host] <span class="string">&quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：cat ~&#x2F;.ssh&#x2F;id_rsa.pub | ssh root@47.93.34.7 &quot;mkdir -p ~&#x2F;.ssh &amp;&amp; cat &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys&quot;</span><br></pre></td></tr></table></figure><h2 id="部署博客"><a class="header-anchor" href="#部署博客">¶</a>部署博客</h2><p>在本地博客根目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>访问公网ip即可看到博客，若是配置的域名不要忘了去解析域名(注意端口是否开放)。</p><h1>写在最后</h1><p>以上就是hexo博客部署到服务器上的全部过程，之所以写这篇博客是之前白嫖了个服务器部署了博客，过期之后我又买了个服务器还得去搜相关操作比较麻烦。</p><p>在此记录下相关操作方便日后需要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本地hexo已配置好&lt;/li&gt;
&lt;li&gt;个人系统：deepin15.11&lt;/li&gt;
&lt;li&gt;服务器：Ubuntu 18.04&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;开始吧&lt;/h1&gt;
&lt;h2 id=&quot;安装git和nginx&quot;&gt;&lt;a class=</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>hexo迁移至新电脑</title>
    <link href="https://zss192.github.io/2020/10/12/hexo%E8%BF%81%E7%A7%BB%E8%87%B3%E6%96%B0%E7%94%B5%E8%84%91/"/>
    <id>https://zss192.github.io/2020/10/12/hexo%E8%BF%81%E7%A7%BB%E8%87%B3%E6%96%B0%E7%94%B5%E8%84%91/</id>
    <published>2020-10-12T11:18:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>由于想在实验室电脑上也可以用hexo更新博客，特此记录下相关操作</p><p>相关配置：</p><ul><li>系统：deepin15.11</li><li>已配置好git</li></ul><h1>安装 node、npm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装 nodejs和npm </span><br><span class="line">sudo apt install node</span><br><span class="line"></span><br><span class="line">检测是否安装好</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h1>拷贝文件</h1><p>将原来的博客文件拷贝过来即可，例如我的文件件如下所示</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201012190547411.png"  alt="image-20201012190547411"></p><h1>安装hexo和相关模块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br><span class="line">sudo npm install</span><br></pre></td></tr></table></figure><p>接下来就可正常使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  &#x2F;&#x2F;清除缓存</span><br><span class="line">hexo g  &#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo d    &#x2F;&#x2F;推到远程仓库</span><br></pre></td></tr></table></figure><h1>可能遇到的问题</h1><p>我在用hexo d的时候一直提示权限不足。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201012191145211.png"  alt="image-20201012191145211"></p><p>但我github已经添加了SSH密钥，一番检查后发现我的远程仓库不仅有github还有coding，虽然添加了github的SSH密钥，但没添加coding的，导致一直提示权限不足。查看远程仓库在根目录下的_config.yml</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201012191431834.png"  alt="image-20201012191431834"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;由于想在实验室电脑上也可以用hexo更新博客，特此记录下相关操作&lt;/p&gt;
&lt;p&gt;相关配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统：deepin15.11&lt;/li&gt;
&lt;li&gt;已配置好git&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装 node、npm&lt;/h1&gt;
</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>校园网免认证</title>
    <link href="https://zss192.github.io/2020/10/10/%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%85%8D%E8%AE%A4%E8%AF%81/"/>
    <id>https://zss192.github.io/2020/10/10/%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%85%8D%E8%AE%A4%E8%AF%81/</id>
    <published>2020-10-10T13:12:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><blockquote><p>全网首发，仅适用于河南大学，转载前请留言告知。CSDN:<a href="https://blog.csdn.net/zss192/article/details/109004166">点我查看</a></p></blockquote><p>相信大家是不是有这样的经历，每次去综合楼连上校园网后都会跳到认证页面。它长这个亚子</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010161459259.png"  alt="image-20201010161459259"></p><p>更有甚者根本不自动跳到认证页面，频繁的验证着实麻烦。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/0855.png"  alt="1"></p><p>那么有没有一种方法让校园网和平常用的无线网一样自动连接后直接就可以使用呢？？</p><p><strong>恭喜你找到了宝藏</strong>，你只需要简单的几个步骤就可以解决这个问题。</p><h1>简单的亿步</h1><p>按往常一样连接上校园网认证，然后再打开那个认证界面，<a href="http://172.22.255.18/">点我查看</a>。</p><p>点击图中所示的自服务</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162140659.png"  alt="image-20201010162140659"></p><p>账号密码和认证页面一样，登录进去</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162237466.png"  alt="image-20201010162237466"></p><p>点击左侧导航栏的用户–&gt;无感知认证</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162355373.png"  alt="image-20201010162355373"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162416117.png"  alt="image-20201010162416117"></p><p>点击增加MAC地址即可</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162504605.png"  alt="image-20201010162504605"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162522215.png"  alt="image-20201010162522215"></p><p>最最关键的一步，添加完后别忘了开启无感知认证，开启后是这个亚子。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/qq_pic_merged_1602335104702.jpg"  alt="qq_pic_merged_1602335104702"></p><h1>MAC地址查看方法</h1><p>那么问题来了，MAC地址在哪看呢？？？</p><h2 id="电脑端"><a class="header-anchor" href="#电脑端">¶</a>电脑端</h2><p>Win + R 快捷键调出“运行”对话框，输入“cmd”，确定，打开“命令提示符”窗口，输入命令 <strong>ipconfig /all</strong> ，回车运行。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010163445429.png"  alt="image-20201010163445429"></p><p>就是上图所述，但是需要把&quot;-“换成”:&quot;</p><p>例如MAC：a1-b2-c3-d4-e5-f6那么我们输入a1:b2:c3:d4:e5:f6即可</p><h2 id="手机端"><a class="header-anchor" href="#手机端">¶</a>手机端</h2><p>如果是手机的话一般在设置里面的系统–&gt;关于手机–&gt;状态信息里面，它长这个亚子</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/39CB2F22459305D07889EF403613D9E7.jpg"  alt="39CB2F22459305D07889EF403613D9E7"></p><blockquote><p>以上是荣耀手机查看MAC地址方法，其他手机类似。</p></blockquote><h1>结语</h1><p>至此就大功告成了，以后你就可以享受一到综合楼手机直接可以上校园网的快感了</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/16023354244172.png"  alt="16023354244172"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;全网首发，仅适用于河南大学，转载前请留言告知。CSDN:&lt;a href=&quot;https://blog.csdn.net/zss192/article/details/109004166&quot;&gt;点我查看&lt;/a&gt;&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zss192.github.io/2020/09/24/deepin%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zss192.github.io/2020/09/24/deepin%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-09-24T11:56:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>因为实验室电脑重装了deepin系统，想把笔记本上备份下直接恢复到实验室台式机上，但是数据恢复了，启动项也覆盖了，整了一两天也没整好，卒。</p><p>后尝试把用户目录下的.config文件夹下软件配置直接copy过来发现可行，这样不用再配置软件了。</p><p>本篇文章仅为个人笔记，方便日后重装系统免去配置软件等步骤。</p><h1>迁移具体操作</h1><blockquote><p>进行数据迁移前建议备份下原文件或者用timeshift备份下系统</p></blockquote><p>个人安装的软件一般在opt目录下，把这些软件直接copy到台式机上的opt目录下，如sublime_text</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/5dd31e01b012c465c92c2adcfb1bb074.png"  alt="image-20200920112036363"></p><p>然后把笔记本下的.config目录下的sublime对应的文件夹copy到台式机上对应文件夹即可</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/7127f51005fd5ae1256545151abee587.png"  alt="image-20200920112109178"></p><p>然后我们打开sublime，会惊奇的发现下载的插件还有配置什么的都还在</p><blockquote><p>注意在opt目录下的软件需要先创建个快捷图标(y=用桌面文件创建工具即可)</p></blockquote><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/ae9bffee4bbeaf6156825c060ebbb0ed.png"  alt="image-20200920112446748"></p><p>其他软件同理，只需把.config下文件copy过来即可，注意copy过来之前不要打开软件否则可能会覆盖你copy过来的文件导致打开软件还需要配置</p><h1>deepin其它配置</h1><p>安装好deepin后还需要很多配置</p><p>1.首先在设置里更新下系统然后把智能镜像源切换成国内的源</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/dce0a17cef5e42ee5712ae8bce48882e.png"  alt="image-20200920112804733"></p><p>2.把Windows下的C:\Windows\Fonts文件夹复制到deepin下。打开deepin字体安装器，直接把Fonts文件夹拖进去即可。然后去设置里更改下字体</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/74567fb7803add9ec6ff04056712b30b.png"  alt="image-20200920113329172"></p><p>3.由于经常要为一些可执行文件创建桌面图标，安装下一个桌面文件创建软件。<a href="https://blog.csdn.net/zss192/article/details/104427330">点我下载</a></p><p>4.谷歌浏览器登录账号同步即可。若浏览器字体不清楚可以</p><ul><li>用stylus插件，<a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne?utm_source=chrome-ntp-icon">点我下载</a>。然后下载思源黑体即可，<a href="https://userstyles.org/styles/123597/theme">点我下载</a>。这样会强制渲染浏览器字体为思源黑体。</li><li>全部设置字体为微软雅黑（外观-&gt;自定义字体）</li></ul><p>5.普通用户使用sudo免密码：dedit /etc/sudoers 修改your_user_name ALL=(ALL) NOPASSWD: ALL</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;因为实验室电脑重装了deepin系统，想把笔记本上备份下直接恢复到实验室台式机上，但是数据恢复了，启动项也覆盖了，整了一两天也没整好，卒。&lt;/p&gt;
&lt;p&gt;后尝试把用户目录下的.config文件夹下软件配置直接copy过来发现可行，这样不用再配置软</summary>
      
    
    
    
    <category term="Linux" scheme="https://zss192.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://zss192.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>互联网+反爬虫核心技术说明</title>
    <link href="https://zss192.github.io/2020/07/03/%E4%BA%92%E8%81%94%E7%BD%91-%E5%8F%8D%E7%88%AC%E8%99%AB%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%B4%E6%98%8E/"/>
    <id>https://zss192.github.io/2020/07/03/%E4%BA%92%E8%81%94%E7%BD%91-%E5%8F%8D%E7%88%AC%E8%99%AB%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%B4%E6%98%8E/</id>
    <published>2020-07-03T04:56:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>现有爬虫缺点</h1><p>现有反爬虫技术缺点(根据这个图片手动画个这样的图)</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200703123131973.png"  alt="image-20200703123131973"></p><p>现有的网络爬虫检测和防御方案，通过检测用户(包括网络爬虫)的访问频率,行为模式等,进行对恶意网络爬虫的识别。<br>这种方案的弊端是，网络爬虫的编写者有足够的时间和精力，针对静态的HTML(而咱们的项目就是让静态页面变成动态的)。</p><h1>本项目实现过程及优点</h1><p>Web页面动态化，即改变HTML及其他静态资源原本的静态、单一、确定等特性通过动态加密和动态陷阱技术将静态资源进行动态化处理，消除因静态所带来的易匹配、易批量化请求的缺陷。另外本项目采用自适应调整动态频率降低因动态化带来的系统开销。</p><blockquote><p>简单来说就是用动态加密和动态陷阱进行动态处理，为避免过度消耗系统资源用自适应调整动态频率来调整</p></blockquote><h2 id="恶意爬虫主动防御流程图"><a class="header-anchor" href="#恶意爬虫主动防御流程图">¶</a>恶意爬虫主动防御流程图</h2><blockquote><p>把这个流程图加到PPT中(不要放图片，手动画一个流程图)</p></blockquote><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200704103929986.png"  alt="image-20200704103929986"></p><h2 id="动态加密"><a class="header-anchor" href="#动态加密">¶</a>动态加密</h2><p>用动态加密的方式对静态属性进行动态加密处理，使得每次响应的HTML代码中原有的HTML静态属性发生动态变化，且具有不可逆向和不可预测性，增大了爬虫编写过程前期分析阶段的难度。从而主动地将恶意爬出限制在分析阶段，有效的保障Web应用的安全性和服务质量。</p><h3 id="实现过程"><a class="header-anchor" href="#实现过程">¶</a>实现过程</h3><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200704102711974.png"  alt="image-20200704102711974"></p><p>(1)：首先，抽取 HTML 页面中待加密的标签，记为SA；为了能够动态的进行加密，选择密钥串 S 平均切分，得到 SFront 和 SLast</p><p>(2)：利用随机数生成算法生成随机序列 R ，替换原密钥串中的后半部分SLast ，得到 S *，即为动态密钥</p><p>(3)：使用 Rijndael 加密算法对静态标签 SA 进行加密得到密文的后半部分 DLast</p><p>(4)：随机序列R和和密钥串S后半部分SLast 进行异或得到密文的前半部分 DFront</p><p>(5)：组合DFront 和 DLast 得到加密后的动态化 HTML 标签</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200704103302496.png"  alt="image-20200704103302496"></p><p>(6)：发生请求时，先提取 HTML 代码中的动态化标签D ，将其平均切分得到 DFront DLast</p><p>(7)：从数据库中读取该标签所对应的密钥串 S ，平均切分得到SFront 和 SLast</p><p>(8)：DFront和和密钥串S后半部分SLast 进行异或得到随机序列 R</p><p>(9)：SFront和随机序列R组合获取动态密钥 S *</p><p>(10)：用 Rijndael 解密即可得到原来的静态 HTML标签 SA</p><h2 id="动态陷阱"><a class="header-anchor" href="#动态陷阱">¶</a>动态陷阱</h2><p>此外，利用动态陷阱技术，动态陷阱的目标是动态地加入隐藏 DOM 树节点，消除 DOM 树结构导致的静态路径问题，使HTML在动态加密静态属性之后动态混淆DOM层级关系从而避免利用xPath等selector方式进行精准定位。</p><blockquote><p>例如在路径 ’/html/body/div[5]/dl/dd/ul/li[7]/div[2]/div[1]/a’中添加任意节点都会改变指向当前 a节点的路径</p></blockquote><h3 id="实现过程-v2"><a class="header-anchor" href="#实现过程-v2">¶</a>实现过程</h3><p>1.对于插入点的选取：根据设定需要防护的内容首先找到该内容所处 节点的路径，DOM 树节点的精准路径会因为该节点的先辈节点和前驱同胞节点的增减而变化，故选取插入点的方式便是在其先辈节点中进行插入或在其前面插入同胞节点。</p><p>2.对于插入内容选取：首先，插入的 DOM 节点均为 HTML 中的合法节点即可满足不影响代码正常执行；动态插入的 节点中不包含内容且不与已有节点产生冲突即可满足不影响页面显示；满足以上两点的 tag 类型可以自行构造，因此满足不可预测性。</p><p>3.基于梅森旋转算法的插入机制：插入机制通过随机选择的方式从插入点和插入内容中进行选取，为了能够提升随机性和不可预测 性，需要对插入位置和插入内容进行随机选择，用DOM树的层级结构的相对位置，消除 DOM 路径的 单一性和可匹配性。</p><h2 id="自适应调整动态频率"><a class="header-anchor" href="#自适应调整动态频率">¶</a>自适应调整动态频率</h2><p>动态的改变就会给系统带来负面影响，影响系统的响应时间，因此选取一个合理的跳变策略降低因动态化带来的系统开销。</p><h3 id="实现过程-v3"><a class="header-anchor" href="#实现过程-v3">¶</a>实现过程</h3><p>定义系统中当前剩余性能值为 curState，计算方法如下，以此来衡量当前系统整体剩余能力值，考虑到实际情况，当其中任一参数值小于0.1 时，代表该项指标已经过载，此时 curState 整体值应该小于 0.1，其中α=0.5，β=0.3 以及γ=0.2</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200704110031794.png"  alt="image-20200704110031794"></p><p>如式 (13) 所示，定义当前的跳变频率为hopFrequency,当系统性能现在状态值小于 0.35 时，频率可以动态增加；当目前系统状态值处于 0.25~ 0.35 时，此时为最佳状态，这时应该保持现有的变换频率；当目前系统性能值小于 0.2时，此时系统状态处于饱和状态，应该动态的减慢跳变的频率</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;现有爬虫缺点&lt;/h1&gt;
&lt;p&gt;现有反爬虫技术缺点(根据这个图片手动画个这样的图)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/&quot; class=&quot;lazyload&quot; data-src=&quot;https://cdn.jsdelivr.net/gh/zss192/Typora-notes@</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>密码学题型速记</title>
    <link href="https://zss192.github.io/2020/06/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E9%A2%98%E5%9E%8B%E9%80%9F%E8%AE%B0/"/>
    <id>https://zss192.github.io/2020/06/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E9%A2%98%E5%9E%8B%E9%80%9F%E8%AE%B0/</id>
    <published>2020-06-28T09:36:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>本篇文章根据老师给的重点有针对性的快速复习。</p><p>对于河南大学的学弟学妹们，如果你们任课老师是袁老师的话，他会给复习要点，跟着复习要点有针对性的复习就行。</p><h1>判断题2*5</h1><ul><li>题型太杂无法预测，可能考PPT黄色或黑色部分的内容</li></ul><h1>简答题5*6</h1><h2 id="范围"><a class="header-anchor" href="#范围">¶</a>范围</h2><ul><li>清楚信息安全专业学习密码学的原因</li><li>掌握流密码的基本思想</li><li>理解分组密码的CBC工作模式，能够画出该模式的加密示意图</li><li>理解弱单向函数与强单向函数的定义</li><li>能够知道5种密码学新方向或新技术(写出来5个就行)</li><li>第六个可能是标黄的也可能是标黑的</li></ul><h2 id="习题"><a class="header-anchor" href="#习题">¶</a>习题</h2><p>1.==清楚信息安全专业学习密码学的原因==   （非标准答案）（==必考！==）</p><p>答：信息在社会中的地位和作用越来越重要，而其安全也愈发重要，而密码学是保障信息安全的核心技术。密码学已渗透到我们日常生活各个方面。比如公钥密码技术用于数字签名，认证服务，没有它，常用的网上支付系统就无法存在。还有一些重要的用户登录系统，手机通信中的信息加密等也依赖密码学。信息安全专业学习密码学有利于学生了解如何保障信息的安全和基本思想的建立。</p><p>2.==流密码的基本思想==：  (==必考！==)</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200616215215527.png"  alt="image-20200616215215527"></p><p>3.==CBC工作模式为==：它一次对一个明文分组(8个字节一组)加密，每次加密使用同一密钥，加密算法的输入是当前明文分组和前一次密文分组的异或，因此加密算法的输入不会显示出这次的明文分组之间的固定关系，所以重复的明文分组不会在密文中暴露出这种重复关系                   （==必须背会！==）</p><p>==CBC模式加解密示意图== （==必考！==）</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614163017246.png"  alt="image-20200614163017246" style="height:450px" /><p>加密: C<sub>i</sub>= E<sub>k</sub>[P<sub>i</sub>⊕C<sub>i-1</sub>] (可认为C<sub>0</sub>=IV)         解密:P<sub>i</sub>= D<sub>K</sub>[C<sub>i</sub>]⊕C<sub>i-1</sub></p><blockquote><p>IV初始向量与第一个明文分组异或，应像密钥一样被保护。该模式能够获得保密性也可认证，适合加密64比特的消息</p></blockquote><p>4.==弱单向函数和强单向函数==            （==必考！==）</p><p>单向函数：已知h，求使得H(x)=h的x在计算上是不可行的。</p><p>已知x，找出y (y≠x) 使得H(y)=H(x)在计算上是不可行的，若单向函数满足这种性质则称其为弱单向函数            （==必须会背！==）</p><p>找出任意两个不同的输入x、y，使得H(x)=H(y)在计算上是不可行的，若单向函数满足这种性质则称其为强单向函数                   （==必须会背！==）</p><blockquote><p>已知一个另找一个使得H函数相等是弱单向，任意给倆使其H函数相等是强单向（看谁单的很）</p></blockquote><p>5.写出5个密码学新方向或新技术</p><p>身份基加密(IBE)、属性基加密(ABE)、全同态加密、动态加密、可搜索加密</p><h1>计算题10*4</h1><h2 id="范围-v2"><a class="header-anchor" href="#范围-v2">¶</a>范围</h2><ul><li>能够根据给定的一个字节a，给定的AES仿射变换(*)和不可约多项式m(x)，求出字节a在AES S盒中字节代替变换的结果(需要自己求逆,自己试试就出来了)</li><li>能够根据RSA算法进行加密与解密计算<ul><li>a*b (mod q) = a (mod q) * b (mod q)</li><li>φ(n) = φ§*φ(q) = (p-1)*(q-1)</li></ul></li><li>能够使用ElGamal数字签名体制，进行签名与验证计算<ul><li>a*b (mod q) = a (mod q) * b (mod q)</li></ul></li><li>能够基于D-H密钥交换协议计算生成通信双方的共享密钥</li></ul><h2 id="习题-v2"><a class="header-anchor" href="#习题-v2">¶</a>习题</h2><p>1.==对字节a=1011  0110字节替代变换，设a的逆为a<sup>-1</sup>==                 （ ==必考！==）</p><p>答：先求a的逆，再用仿射变换即可</p><p>:one: 由a得(x<sup>7</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>2</sup>+x)a<sup>-1</sup> ≡ 1(mod x<sup>8</sup>+x<sup>4</sup>+x<sup>3</sup>+x+1)</p><p>所以a<sup>-1</sup>=x<sup>6</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>3</sup>             即0111 1000     （二进制对应位数有1就代表有x的那一次方）</p><blockquote><p>根据老师给的考试要点，仿射变换和m(x)题目会给出，a的逆试试就出来了</p><p>a*a<sup>-1</sup>即1011 0110*0111 1000 = 1101 0110 0100 00</p><p>a*a<sup>-1</sup> mod m(x)：1101 0110 0100 00 % 1000 1101 1(m(x)) = 1</p><p>考试时试试1的二进制，2的二进制，3的二进制，和a相乘%m(x)看是否为1</p></blockquote><p>:two: 使用仿射变换   （注意要用a的逆而且注意x的顺序从下往上读）</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/QQ%E5%9B%BE%E7%89%8720200614210639.jpg"  alt=""></p><blockquote><p>注意是模2加，即只有0和1</p></blockquote><p>即(0100 1110)<sub>2</sub>=(4E)<sub>16</sub>                 注意也是从下开始读  因为最下面的是字节高位即最前面的01…</p><p>2.1 ==RSA加密体制中，接收方的公开钥是(e,n)=(5,35)，接收到的密文是C=10，求明文M== （==必考！==）</p><p>答：（    m ≡ c<sup>d</sup> mod n         所以得先算出d  -----&gt; d*e ≡ 1 mod φ(n)  ）</p><p>n=35             所以 p=5，q=7</p><p>φ(35) = (p-1)*(q-1) =4*6=24</p><p>因为 d*e ≡ 1 mod φ(n)   所以d=5      （这个到时候一个一个试就行）</p><p>m ≡ c<sup>d</sup> mod n ≡ 10<sup>5</sup> mod 35 ≡ 5          （注意不是等号）</p><blockquote><p>考试可求出明文再反推密文试下看看密文是不是10</p></blockquote><p>2.2 ==假设明文m=5，e=7，p=11，q=13，给出RSA的加密解密过程==     （==必考！==）</p><p>答：n=p*q=11*13=143           φ(143) = (p-1)*(q-1) = 10*12=120</p><p>因为d*e ≡ 1 mod φ(n)  即d*7 ≡ 1 mod 120   所以 d=103</p><p>加密：c ≡ m<sup>e</sup> mod n  ≡ 5<sup>7</sup> ≡ 47 mod 143</p><p>解密：m ≡ c<sup>d</sup> mod n  ≡ 47<sup>103</sup> ≡ 5 mod 143</p><p>3.ElGamal签名体制中，假设p=19，g=13。签名者A的私钥为x = 10，试计算公钥。设消息M=15，k=11，求签名过程并验证。  (==必考！==)</p><p>答：公钥：y ≡ g<sup>x</sup> mod p ≡ 13<sup>10</sup> mod 19 = 6</p><p>签名：r ≡ g<sup>k</sup>  (mod p) ≡ 13<sup>11</sup> mod 19 =2</p><p>s ≡ (H(m)-xr)k<sup>-1</sup> (mod p-1) ≡ (m-xr)k<sup>-1</sup> (mod p-1) ≡ (15-10*2)*11<sup>-1</sup> mod 18 = 11</p><p>所以(r,s)=(2,11)</p><p>验证：y<sup>r</sup>r<sup>s</sup> ≡ 6<sup>2</sup>*2<sup>11</sup> mod 19 ≡ 8 ≡ g<sup>m</sup> (mod p) ≡ 13<sup>15</sup> ≡ 8 mod 19</p><blockquote><p>根据老师的重点中给出的a*b (mod q) = a (mod q) * b (mod q)应该是用在比如这题求6<sup>2</sup>*2<sup>11</sup> mod 19就等同于求6<sup>2</sup> mod 19 * 2<sup>11</sup> mod 19 ≡ 17 *15 ≡ 8 mod 19</p></blockquote><p>求上面的11<sup>-1</sup>mod 18：</p><p>11*x ≡ 1 mod 18可算出x=5，而11*11<sup>-1</sup> ≡ 1 mod 18 即11<sup>-1</sup> ≡ 5 mod 18</p><p>4.在Diffie- Hellman密钥交换过程中，设大素数p=11,a=2是p的本原根。  （==必考！==）<br>(1) 用户A的公开钥Y<sub>A</sub>=9,求其秘密钥XA。<br>(2)设用户B的公开钥Y<sub>B</sub>=3,求A和B的共享密钥K。</p><p>答：:one: Y<sub>A</sub>=a<sup>XA</sup> mod p = a<sup>XA</sup> mod p 即 9=2<sup>XA</sup> mod 11   所以 X<sub>A</sub>=6  (考试时一个一个试就行)</p><p>:two: K=Y<sub>B</sub><sup>XA</sup> mod p = 3<sup>6</sup> mod 11 =3</p><h1>论述题1*20  （任选一个即可）</h1><ul><li>介绍一种密码学协议研究与应用动态。</li><li>提出一种安全应用场景，试设计出相应的密码协议实现安全应用。</li><li>介绍一种安全应用场景，分析该安全场景应用了哪些密码技术，并简述如何保障了安全性。</li></ul><p><a href="https://baike.baidu.com/item/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E">https://baike.baidu.com/item/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E</a></p><h2 id="零知识证明"><a class="header-anchor" href="#零知识证明">¶</a>零知识证明</h2><h3 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h3><p>零知识证明是在20世纪80年代初提出的。它指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的。零知识证明实质上是一种涉及两方或更多方的协议，即两方或更多方完成一项任务所需采取的一系列步骤。证明者向验证者证明并使其相信自己知道或拥有某一消息，但证明过程不能向验证者泄漏任何关于被证明消息的信息。</p><blockquote><p>要是太多这段可省略</p><p>零知识证明起源于最小泄露证明。设P表示掌握某些信息，并希望证实这一事实的实体，设V是证明这一事实的实体。假如某个协议向V证明P的确掌握某些信息，但V无法推断出这些信息是什么，我们称P实现了最小泄露证明。不仅如此，如果V除了知道P能够证明某一事实外，不能够得到其他任何知识，我们称P实现了零知识证明，相应的协议称作零知识协议。</p></blockquote><p>例如，A要向B证明自己拥有某个房间的钥匙，假设该房间只能用钥匙打开锁，而其他任何方法都打不开。这时有2个方法：</p><p>①A把钥匙出示给B，B用这把钥匙打开该房间的锁，从而证明A拥有该房间的正确的钥匙。</p><p>②B确定该房间内有某一物体，A用自己拥有的钥匙打开该房间的门，然后把物体拿出来出示给B，从而证明自己确实拥有该房间的钥匙。</p><p>后面的②方法属于零知识证明。它的好处在于，在整个证明的过程中，B始终不能看到钥匙的样子，从而避免了钥匙的泄露。</p><h3 id="应用动态"><a class="header-anchor" href="#应用动态">¶</a>应用动态</h3><p>零知识证明在区块链里的应用非常广泛。最早使用零知识证明技术的区块链叫做 Zcash，这是许多零知识证明的做法之一，也是最有名的一个。V神就曾表示称，零知识证明能够被应用于以太坊区块链上几乎所有的场景。</p><p>相对于ZCash来说，比特币的转账并不是完全匿名的，只要知道了一个比特币地址，任何人都可以通过这个网站，查到这个地址的所有“消费”行为。比如给谁转了账，又从谁那里收到过转账，在以区块链技术为基础的“账本”上都详细地记录着。</p><p>例如A有3个BTC，要给B转账1个BTC，那么在账本上就会记录着：A转出了两笔BTC，一笔为1BTC，转给了B；另一笔为2BTC，转给了自己。</p><p>那么利用了“零知识证明”的ZCash是怎么做到的所谓匿名呢？</p><p>ZCash的代币为ZEC。同样假设A有3个ZEC，要给B转账1个ZEC。</p><p>首先，A会将自己的1个ZEC分成若干份随机投入一系列的“混合容器”中，指定接收方B的地址，同时混入的时候还有其他交易方输出的若干份ZEC。这些ZEC又被混合容器随机拆分，再从这些被拆分生成的所有的ZEC中取出合计为1ZEC的若干份，转移到B的地址中，同时在发送的时间上也可以设置一定的延迟。</p><p>其中的“混合容器”，就是一条“公有链”。经过这条公有链一系列的“混币”过程，就使得包括交易地址和具体金额在内的交易信息变得无从考证了。</p><p>零知识证明技术虽然会给区块链带来更强的匿名性，但同时会引起大量的监管问题，这是零知识证明技术无法回避的一个问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;本篇文章根据老师给的重点有针对性的快速复习。&lt;/p&gt;
&lt;p&gt;对于河南大学的学弟学妹们，如果你们任课老师是袁老师的话，他会给复习要点，跟着复习要点有针对性的复习就行。&lt;/p&gt;
&lt;h1&gt;判断题2*5&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;题型太杂无法预测，可能</summary>
      
    
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>现代密码学期末总结</title>
    <link href="https://zss192.github.io/2020/06/14/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2020/06/14/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-14T15:33:00.000Z</published>
    <updated>2021-03-30T03:45:21.153Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>由于老师后来给画了重点，本篇博客后半部分主要记录的是老师画的重点。个人复习使用，仅供参考</p><p>对于河南大学的学弟学妹们，如果你们任课老师是袁老师的话，他会给复习要点，跟着复习要点有针对性的复习就行。</p><h1>引言</h1><h2 id="知识点"><a class="header-anchor" href="#知识点">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616202612666.png"  alt="image-20200616202612666"></p><p>1.在本书中，c指密文，m指明文，E()表示加密函数，D()表示解密函数</p><p>2.仿射变换：加密和解密中a，b为秘钥  （属于单表变换）</p><p>c=E<sub>a,b</sub>(m)=am+b(mod 26)</p><p>m=D<sub>a,b</sub>(m)=a<sup>-1</sup>(c-b)(mod 26)</p><blockquote><p>注意a<sup>-1</sup>*a≡1 mod 26</p></blockquote><p>3.多表代换密码：其中A为n*n的矩阵，n等于几代表明文每几个分成一组。一般N为26。</p><p>C<sub>i</sub>≡AM<sub>i</sub>+B(mod N)，i=1,2,3…</p><p>M<sub>i</sub>≡A<sup>-1</sup>(C<sub>i</sub>-B)(mod N)，i=1,2,3…</p><p>4.人为攻击分为</p><ul><li>被动攻击       就是窃听，是对系统保密性的攻击<ul><li>获取信息的内容</li><li>业务流分析     敌收无法获得消息但可能获得通信双方身份、次数…</li></ul></li><li>主动攻击       对数据流的篡改或产生假数据流<ul><li>中断      如破坏硬件、系统是对系统可用性的攻击</li><li>篡改      修改数据是对系统完整性的攻击</li><li>伪造      如插入伪造消息或记录，是对系统真实性的攻击</li></ul></li></ul><blockquote><p>被动攻击不改变消息而主动攻击改变消息内容</p><p>抵抗被动攻击：预防                抵抗主动攻击：检测修复</p></blockquote><p>5.密码算法的安全性包括哪两类？？(暂时没找到)</p><p>6.密钥管理：密钥产生、分配、存储、销毁等问题</p><p>7.密码体质从原理上可分为两类</p><ul><li>对称(单钥)密码体制             （可用于数据加密和消息认证）<ul><li>流密码                             逐位加密</li><li>分组密码                         消息分组，逐组加密</li></ul></li><li>非对称(双钥)密码体制            两密钥，一公开一私密</li></ul><p>8.对密码系统的攻击按攻击者可获取的信息量可分为</p><ul><li>唯密文攻击                           仅知道一些密文</li><li>已知明文攻击                       知道一些密文和相应的明文</li><li>选择明文攻击                       密码分析者可以选择一些明文并得到相应的密文</li><li>选择密文攻击                       密码分析者可以选择一些密文，并得到相应的明文</li></ul><blockquote><p>以上攻击都建立在已知算法的基础之上，且攻击强度依次增加</p></blockquote><p>9.单向陷门函数就是有一个陷门的一类特殊单向函数。</p><p>若y=f(x)，已知x很容易计算y，但已知y很难计算x（单向性）。特别的是存在一个z使得知道了z那么就很容易由y计算出x，那么z则称为陷门（有陷门也称后门）</p><p>10.加密算法满足下列两点则认为是计算上安全的</p><ul><li>破译密文的代价超过被加密信息的价值</li><li>破译密文所花的时间超过信息的有用期</li></ul><p>11.攻击密码体制的常用方法</p><ul><li>穷举攻击                             （解决方法 : 增大密钥量）</li><li>统计分析攻击                     （解决方法：使明文的统计特性与密文的统计特性不一样）</li><li>数学分析攻击                     （解决方法：选用足够复杂的加密算法）</li></ul><p>12.密钥体制组成部分（加密系统的五元组）：明文，密文，密钥，加密算法，解密算法。</p><p>13.一个好密钥体制至少应满足的两个条件：</p><ul><li>已知明文和加密密钥计算密文容易，已知密文和解密密钥计算明文容易</li><li>在不知解密密钥的情况下，不可能由密文 c 推出明文</li></ul><h2 id="习题"><a class="header-anchor" href="#习题">¶</a>习题</h2><p>1.设由仿射变换对一个明文加密得到的密文为edsgickxhuklzveqzvkxwkzukvcuh，又已知明文的前两个字符是“if&quot;，对该密文解密。</p><p>答：e=4  d=3  i=8   f=5    （26个字母下标从0开始）E<sub>a,b</sub>(m)=am+b(mod 26)</p><p>E(i)=e，4≡8*a+b(mod 26)</p><p>E(f)=d，3≡5*a+b(mod 26)</p><p>由上述两个式子可推出a=9，b=10，所以m=9<sup>-1</sup>(c-10)(mod 26)</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609204054393.png"  alt="image-20200609204054393" style="zoom:80%;" /><p>2.设多表代换密码C≡AM<sub>i</sub>+ B(mod26)中，A是2X2矩阵，B是0矩阵，又知明文“dont”被加密为“elni”，求矩阵A。</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609205229494.png"  alt="image-20200609205229494" style="zoom:67%;" /><blockquote><p>注意矩阵相乘的结果要模26，上式求b的时候算得125b=13，其实应是125b≡13(mod 26)，即为21b≡13(mod 26)，解得b=13，其他类似</p></blockquote><h1>流密码</h1><h2 id="知识点-v2"><a class="header-anchor" href="#知识点-v2">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616202720122.png"  alt="image-20200616202720122"></p><p>1.==流密码的基本思想==：  (==必考！==)</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616215215527.png"  alt="image-20200616215215527"></p><p>2.流密码中密钥流就等于明文串和密文串异或</p><p>3.移位寄存器是流密码产生密钥流的一个重要组成部分</p><p>4.m序列密码的破译就是求密钥流的递推关系即a<sub>m+i</sub>=c<sub>m</sub>ai⊕c<sub>m-1</sub>a<sub>i+1</sub>⊕…⊕c<sub>1</sub>a<sub>m+i-1</sub></p><p>(公式中的m即题目说多少级级线性反馈移位寄存器就是多少)</p><blockquote><p>比如是3级，我们求得是a<sub>i+3</sub>，当i=1，i+3=4即第四个这样根据前三个就可知道后面所有的数</p></blockquote><h2 id="习题-v2"><a class="header-anchor" href="#习题-v2">¶</a>习题</h2><p>1.求矩阵的逆（这章习题会用到，复习下）</p><p>核心公式：A<sup>-1</sup>=A<sup>*</sup>/|A|</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609214703300.png"  alt="image-20200609214703300" style="zoom:80%;" /><p>若是三阶矩阵：A<sub>ij</sub>=(-1)<sup>i+j</sup>M<sub>ij</sub>，M<sub>ij</sub>为除去a<sub>ij</sub>所在那一行和那一列得到的二阶矩阵</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609215140551.png"  alt="image-20200609215140551"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609215521885.png"  alt="image-20200609215521885"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609215736609.png"  alt="image-20200609215736609"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609215941959.png"  alt="image-20200609215941959"></p><p>2.已知流密码的密文串1010110110和相应的明文串0100010001，而且还已知密钥流是使用3级线性反馈移位寄存器产生的，试破译该密码系统。(和P65例2-6类似)</p><p>答：由已知可得密钥流为1010110110⊕0100010001=1110100111，因为是3级线性反馈</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609212249326.png"  alt="image-20200609212249326"></p><blockquote><p>按照上面矩阵：a<sub>4</sub>=c<sub>3</sub>*a<sub>1</sub>+c<sub>2</sub>*a<sub>2</sub>+c<sub>1</sub>*a<sub>3</sub>正是密钥流递推关系(m=3,i=1然后是m=3,i=2…)</p></blockquote><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609214235084.png"  alt="image-20200609214235084"></p><blockquote><p>记住c从高到低，a从低到高</p></blockquote><p>3.如图是一个3级反馈移位寄存器，其初始状态为(a1,a2,a3)=(1,0,1)，求输出序列</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609221112648.png"  alt="image-20200609221112648" style="zoom:80%;" /><p>从图中可看到a1、a2、a3经f函数送至左边形成一个循环，比如f(a1,a2,a3)=b，那么b将代替a3的位置，a3～a1均右移，所以a1输出，以此类推。</p><p>答：f(a1,a2,a3)=f(1,0,1)=1*0⊕1=1，然后f(1,1,0)</p><p>可总结规律，右边的3为参与f函数生成的数放在左边，然后以左边这个数向右数3个数分别当做a3,a2,a1参与f生成的又放在最左边…最后输出是从右到左</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/IMG_20200609_222216.jpg"  alt="IMG_20200609_222216" style="height:170px;" /><p>即输出序列为10111011101…，周期为4</p><h1>分组密码</h1><h2 id="知识点-v3"><a class="header-anchor" href="#知识点-v3">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616202818895.png"  alt="image-20200616202818895" style="zoom:80%;" /><p>1.分组密码：将明文划分为长为n的组x(x0,x1,…,xn-1)，各组在密钥k=(k0,k1,…kt-1)控制下变换成等长的数字序列y=(y0,y1,…ym-1)。实质是对字长为n的数字序列的代换密码 （一般m=n）</p><p>2.扩散和混淆是Shannon提出的设计密码系统的两个基本方法(分组密码安全设计性原则)  (了解)</p><ul><li>扩散：使明文与密文之间的统计关系变得尽可能复杂，以使敌手无法得到密钥<ul><li>明文每一比特变换尽量多的影响密文序列的变化，以隐蔽明文的统计特性（雪崩效应）</li><li>P盒(置换)用于扩散</li></ul></li><li>混淆：使密文与密钥之间的统计关系变得尽可能复杂，以使敌手无法得到密钥<ul><li>S盒(代换)用于混淆</li></ul></li></ul><p>3.很多分组密码结构本质都基于Feistel结构</p><p>将每组明文分为左右两半L<sub>0</sub>和R<sub>0</sub>，n轮迭代后再合在一起产生密文分组</p><p>第i轮迭代（代换）：      L<sub>i</sub>=R<sub>i-1</sub>  (左等右上)             R<sub>i</sub>=L<sub>i-1</sub>⊕F(R<sub>i-1</sub>,K<sub>i</sub>)  （右等左上异或F即右上和K）</p><p>最后一轮交换左右两半数据（置换用于扩散）</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614145605923.png"  alt="image-20200614145605923" style="zoom: 80%;" /><p>解密和加密本质过程一样，密文作为输入，但使用子密钥K<sub>i</sub>的次序和加密相反（这一特性保证了加密和解密可用同一算法）</p><p>4.DES加密过程可分为四个阶段 (64比特明文，64比特密钥(每个第8位设置奇偶校验位实际56位)）</p><ul><li>初始置换IP，用于重排明文分组的64比特         （由IP置换表实现）</li><li>生成子密钥</li><li>迭代过程即16轮变换然后交换左右次序(代换和置换)</li><li>逆初始置换IP<sup>-1</sup></li></ul><p>:two: 生成子密钥过程                参考：<a href="https://www.cxyxiaowu.com/1478.html">算法科普：神秘的 DES 加密算法</a> ，下同</p><p>56比特密钥经PC-1置换后分为左右C<sub>0</sub>和D<sub>0</sub>，然后由表左循环经PC-2产生48比特的本轮密钥</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/1571057977-17488ca32598db6.jpg"  alt="image-20200614145605923" style="zoom: 80%;" /><p>:three: 迭代过程等同于Feistel结构(左等右上，右等左上异或F)，而其中用到的F函数为：</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614155257147.png"  alt="image-20200614155257147" style="zoom:67%;" /><p>5.分组密码的运行模式</p><ul><li>ECB(电话本)模式                      各明文组以同一密钥加密</li><li><strong>CBC(密码分组链接)模式</strong>          加密的输入是当前明文组和前一密文组的异或</li><li>CFB(密码反馈)模式                  每次处理j位输入，上次密文加密产生伪随机再与当前明文异或</li><li>OFB(输出反馈)模式           与CFB不同的是加密的输入是前一次加密的输出(与明文异或的那个)</li></ul><p>:two: ==CBC模式加解密示意图== （==必考！==）</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614163017246.png"  alt="image-20200614163017246" style="height:450px" /><p>加密: C<sub>i</sub>= E<sub>k</sub>[P<sub>i</sub>⊕C<sub>i-1</sub>] (可认为C<sub>0</sub>=IV)         解密:P<sub>i</sub>= D<sub>K</sub>[C<sub>i</sub>]⊕C<sub>i-1</sub></p><blockquote><p>IV初始向量与第一个明文分组异或，应像密钥一样被保护。该模式能够获得保密性也可认证，适合加密64比特的消息</p></blockquote><p>==工作模式为==：它一次对一个明文分组加密，每次加密使用同一密钥，加密算法的输入是当前明文分组和前一次密文分组的异或，因此加密算法的输入不会显示出这次的明文分组之间的固定关系，所以重复的明文分组不会在密文中暴露出这种重复关系                   （==必须背会！==）</p><p>6.AES是DES的替代者，也是当今最流行的对称加密算法之一</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/20190527200618151.png"   /><p>AES轮函数包括字节代换、行移位、列混合、密钥加</p><p>:one: 字节代换：根据S盒把明文块的每一个字节都替代成另外一个字节</p><p>:two: 行移位：如第1行不变，第2行循环左移C1个字节，第3行左移C2个字节，第4行移C3 要根据表</p><p>:three: 列混合：输入数组每一列和修补矩阵的二维常量数组做矩阵相乘，得到对应的输出列。</p><p>:four: 密钥加：输入数组的每个字节a[i,j]与密钥对应位置的字节k[i,j]异或一次，就生成了输出值b[i,j]</p><p>7.SM4算法，数据和密码分组均为128比特</p><p>加密：X<sub>i</sub>+4=F(X<sub>i</sub>,X<sub>i+1</sub>,X<sub>i+2</sub>,X<sub>i+3</sub>,rk<sub>i</sub>)=X<sub>i</sub>⊕T(X<sub>i+1</sub>⊕X<sub>i+2</sub>⊕X<sub>i+3</sub>⊕rk<sub>i</sub>)（i=0,1,2…31）</p><p>后经反序R处理：(Y<sub>0</sub>,Y<sub>1</sub>,Y<sub>2</sub>,Y<sub>3</sub>)=(X<sub>35</sub>,X<sub>34</sub>,X<sub>33</sub>,X<sub>32</sub>)=R(X<sub>32</sub>,X<sub>33</sub>,X<sub>34</sub>,X<sub>35</sub>)</p><p>解密算法和加密算法相同，轮密钥使用顺序相反</p><p><a href="http://8.GF">8.GF</a>(2<sup>8</sup>)中   a*a<sup>-1</sup>=1(mod x8+x4+x5+x+1)</p><p>GF(2)上的可逆的仿射变换 如下 （x是题目中a的逆）</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614205335632.png"  alt="image-20200614205335632"></p><h2 id="习题-v3"><a class="header-anchor" href="#习题-v3">¶</a>习题</h2><p>1.==对字节a=1011  0110字节替代变换，设a的逆为a<sup>-1</sup>==                 （ ==必考！==）</p><p>答：先求a的逆，再用仿射变换即可</p><p>:one: 由a得(x<sup>7</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>2</sup>+x)a<sup>-1</sup> ≡ 1(mod x<sup>8</sup>+x<sup>4</sup>+x<sup>3</sup>+x+1)</p><p>所以a<sup>-1</sup>=x<sup>6</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>3</sup>             即0111 1000     （二进制对应位数有1就代表有x的那一次方）</p><blockquote><p>根据老师给的考试要点，仿射变换和m(x)题目会给出，a的逆试试就出来了</p></blockquote><p>:two: 使用仿射变换   （注意要用a的逆而且注意x的顺序从下往上读）</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/QQ%E5%9B%BE%E7%89%8720200614210639.jpg"  alt="QQ图片20200614210639"></p><p>即(0100 1110)<sub>2</sub>=(4E)<sub>16</sub>                 注意也是从下开始读  因为最下面的是字节高位即最前面的01…</p><p>2.利用DES算法和全0密钥对输入(1000 0001 1960 0000)进行一圈加密的结果 （需要查表P39）</p><p>答：:one: 输入的右半部分是1960 0000 = 0001 1001 0110 0000    0000 0000 0000 0000</p><p>:two: 经E盒扩展后为：000011 110010 101100 000000      000000 000000 000000 000000</p><p>:three: 与全0密钥对异或后为：000011 110010 101100 000000      000000 000000 000000 000000</p><p>:four: 经S盒后变为：15 8 3 7 2 12 4 13 即1111 1000 0011 0111 0010 1100 0100 1101</p><p>:five: 经P盒后变为 1001 1100 1101 1000     1001 1010 1010 1110</p><p>:six: 输出的左半部分即输入的右半部分为1960 0000，输出的右半部分为F函数输出和左半部分输入异或即8cd8 9aaf，最终输出为 1960 0000  8cd8 9aaf</p><blockquote><p>这题主要是加深对DES迭代过程的理解，由于要查表，考试应该不会考</p></blockquote><p>3.在DES的ECB模式中,如果在密文分组中有一个错误,解密后仅相应的明文分组受到影响。然而在CBC模式中，将有错误传播。加密解密图中C1中的一个错误明显地将影响到P1和P2的结果。</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614163017246.png"  alt="image-20200614163017246" style="zoom: 50%;" /><p>(1) P2后的分组是否受到影响?<br>(2)设加密前的明文分组P1中有1比特的错误，问这一错误将在多少个密文分组中传播?<br>对接收者产生什么影响?</p><p>答：:one: CBC的加密: C<sub>i</sub>= E<sub>k</sub>[P<sub>i</sub>⊕C<sub>i-1</sub>]，i≥2           解密:P<sub>i</sub>= D<sub>K</sub>[C<sub>i</sub>]⊕C<sub>i-1</sub>，i≥1</p><p>若C1有错误，P2=D<sub>K</sub>[C<sub>2</sub>]⊕C<sub>1</sub>所以P2也会受影响，但i≥3时，P<sub>i</sub>= D<sub>K</sub>[C<sub>i</sub>]⊕C<sub>i-1</sub>与C1无关因此不会受到影响</p><blockquote><p>本题由于C1错误事实上C2、C3、C4…都会和原来不一样，但即使它是错的经密钥解密后还是可以得到原明文(可理解为是明文的另一种加密结果)，所以说P2后不受影响</p></blockquote><p>:two: 若P1出错，则C1会是错的，由C<sub>i</sub>= E<sub>k</sub>[P<sub>i</sub>⊕C<sub>i-1</sub>]得，C<sub>i≥2</sub>也都是错误的，因此会传递到每一个分组</p><p>由加密解密方式可知，若只是P1出错，解密后得到的还是原来的输入。即接收者解密后的P1和原来输入的一样会有1比特的错误，而其他的可以解密得到正确的明文</p><h1>公钥密码</h1><h2 id="知识点-v4"><a class="header-anchor" href="#知识点-v4">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616203037349.png"  alt="image-20200616203037349" style="zoom:80%;" /><p>1.==RSA加密解密==      (==必考！==)</p><p>选倆素数p,q       n=p*q      φ(n)=(p-1)*(q-1)            d*e ≡ 1 mod φ(n)</p><p>加密：c ≡ m<sup>e</sup> mod n    （e和n会给出）</p><p>解密：m ≡ c<sup>d</sup> mod n      (一般d要自己求)</p><p>2.可能会用到的公式：a*b (mod q) = a (mod q) * b (mod q)</p><blockquote><p>推测是RSA中m<sup>e</sup>或c<sup>d</sup>可以拆成两个乘积的形式</p></blockquote><h2 id="习题-v4"><a class="header-anchor" href="#习题-v4">¶</a>习题</h2><p>1.==RSA加密体制中，接收方的公开钥是(e,n)=(5,35)，接收到的密文是C=10，求明文M== （==必考！==）</p><p>答：（    m ≡ c<sup>d</sup> mod n         所以得先算出d  -----&gt; d*e ≡ 1 mod φ(n)  ）</p><p>n=35             所以 p=5，q=7</p><p>φ(35) = (p-1)*(q-1) =4*6=24</p><p>因为 d*e ≡ 1 mod φ(n)   所以d=5      （这个到时候一个一个试就行）</p><p>m ≡ c<sup>d</sup> mod n ≡ 10<sup>5</sup> mod 35 ≡ 5          （注意不是等号）</p><p>2.==假设明文m=5，e=7，p=11，q=13，给出RSA的加密解密过程==     （==必考！==）</p><p>答：n=p*q=11*13=143           φ(143) = (p-1)*(q-1) = 10*12=120</p><p>因为d*e ≡ 1 mod φ(n)  即d*7 ≡ 1 mod 120   所以 d=103</p><p>加密：c ≡ m<sup>e</sup> mod n  ≡ 5<sup>7</sup> ≡ 47 mod 143</p><p>解密：m ≡ c<sup>d</sup> mod n  ≡ 47<sup>103</sup> ≡ 5 mod 143</p><h1>数字签名</h1><h2 id="知识点-v5"><a class="header-anchor" href="#知识点-v5">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616210115666.png"  alt="image-20200616210115744" style="zoom:80%;" /><p>1.==ElGamal签名体制：==                       （==必考！==）</p><p>用户A的公钥：y ≡ g<sup>x</sup>  (mod p)          x为用户A的私钥</p><p>签名的产生过程：</p><ul><li>计算 r ≡ g<sup>k</sup>  (mod p)</li><li>计算 s ≡ (H(m)-xr)k<sup>-1</sup> (mod p-1)           H(m)为m的哈希值，计算取H(m)=m，注意是p-1</li><li>(r,s)即为签名</li></ul><p>签名的验证过程</p><ul><li>计算y<sup>r</sup>r<sup>s</sup> ≡ g<sup>H(m)</sup> (mod p)</li><li>就是验证 y<sup>r</sup>r<sup>s</sup>（mod p）是不是等于 g<sup>H(m)</sup> (mod p)</li></ul><h2 id="习题-v5"><a class="header-anchor" href="#习题-v5">¶</a>习题</h2><p>1.ElGamal签名体制中，假设p=19，g=13。签名者A的私钥为x = 10，试计算公钥。设消息M=15，k=11，求签名过程并验证。  (==必考！==)</p><p>答：公钥：y ≡ g<sup>x</sup> mod p ≡ 13<sup>10</sup> mod 19 = 6</p><p>签名：r ≡ g<sup>k</sup>  (mod p) ≡ 13<sup>11</sup> mod 19 =2</p><p>s ≡ (H(m)-xr)k<sup>-1</sup> (mod p-1) ≡ (m-xr)k<sup>-1</sup> (mod p-1) ≡ (15-10*2)*11<sup>-1</sup> mod 18 = 11</p><p>所以(r,s)=(2,11)</p><p>验证：y<sup>r</sup>r<sup>s</sup> ≡ 6<sup>2</sup>*2<sup>11</sup> mod 19 ≡ 8 ≡ g<sup>m</sup> (mod p) ≡ 13<sup>15</sup> ≡ 8 mod 19</p><blockquote><p>根据老师的重点中给出的a*b (mod q) = a (mod q) * b (mod q)应该是用在比如这题求6<sup>2</sup>*2<sup>11</sup> mod 19就等同于求6<sup>2</sup> mod 19 * 2<sup>11</sup> mod 19 ≡ 17 *15 ≡ 8 mod 19</p></blockquote><h1>哈希函数</h1><h2 id="知识点-v6"><a class="header-anchor" href="#知识点-v6">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200616215652197.png"  alt="image-20200616215652197"></p><p>1.单向函数：已知h，求使得H(x)=h的x在计算上是不可行的。</p><p>2.==弱单向哈希函数和强单向哈希函数==            （==必考！==）</p><p>已知x，找出y (y≠x) 使得H(y)=H(x)在计算上是不可行的，若单向函数满足这种性质则称其为弱单向哈希函数         （==必须会背！==）</p><p>找出任意两个不同的输入x、y，使得H(x)=H(y)在计算上是不可行的，若单向函数满足这种性质则称其为强单向哈希函数                  （==必须会背！==）</p><blockquote><p>已知一个另找一个使得H函数相等是弱单向，任意给倆使其H函数相等是强单向（看谁单的很）</p></blockquote><p>3.如果哈希函数对不同的输入可产生相同的输出，则称该函数具有碰撞性。</p><p>4.抗弱碰撞哈希函数：对于任意给定的x，找到满足y≠x且H(x)=H(y)的y在计算上是不可行的</p><p>抗强碰撞哈希函数：找到任何满足H(x)=H(y)的x,y在计算上是不可行的</p><h1>认证技术</h1><h2 id="知识点-v7"><a class="header-anchor" href="#知识点-v7">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616221851197.png"  alt="image-20200616221851197"></p><p>1.消息认证是一个过程，用于验证接收消息的真实性(确实是它声称的实体发来的)和完整性(未被篡改、插入、删除)，同时还用于验证消息的顺序性和时间性(未重排、重放、延迟)以及消息的不可否认性。</p><h1>密钥分配与密钥管理</h1><h2 id="知识点-v8"><a class="header-anchor" href="#知识点-v8">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616222510012.png"  alt="image-20200616222510012"></p><p>1.Diffie-Hellman密钥交换简称D-H密钥交换的目的是使得两个用户能够安全的交换密钥，得到一个共享的会话密钥，算法本身不能用于加密解密。</p><p>2.==D-H密钥交换协议==：                            （==必考！==）</p><p>已知私钥为X，公钥为Y，p是一大素数，a是p的本原根，a和p公开，K为共享密钥</p><p>用户A：计算Y<sub>A</sub>=a<sup>XA</sup> mod p发送给B         共享密钥K=Y<sub>B</sub><sup>XA</sup> mod p</p><p>用户B：计算Y<sub>B</sub>=a<sup>XB</sup> mod p发送给A         共享密钥K=Y<sub>A</sub><sup>XB</sup> mod p</p><blockquote><p>通过上述操作求得的两个K值相等，这样就安全的求得了一个公共的密钥</p></blockquote><h2 id="习题-v6"><a class="header-anchor" href="#习题-v6">¶</a>习题</h2><p>1.在Diffie- Hellman密钥交换过程中，设大素数p=11,a=2是p的本原根。  （==必考！==）<br>(1) 用户A的公开钥Y<sub>A</sub>=9,求其秘密钥XA。<br>(2)设用户B的公开钥Y<sub>B</sub>=3,求A和B的共享密钥K。</p><p>答：:one: Y<sub>A</sub>=a<sup>XA</sup> mod p = a<sup>XA</sup> mod p 即 9=2<sup>XA</sup> mod 11   所以 X<sub>A</sub>=6  (考试时一个一个试就行)</p><p>:two: K=Y<sub>B</sub><sup>XA</sup> mod p = 3<sup>6</sup> mod 11 =3</p><h1>密码协议</h1><h2 id="知识点-v9"><a class="header-anchor" href="#知识点-v9">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616230655359.png"  alt="image-20200616230655359"></p><p>1.密码协议是指利用密码工具实现与安全相关的协议或函数的计算</p><h1>可证明安全</h1><h2 id="知识点-v10"><a class="header-anchor" href="#知识点-v10">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616231333668.png"  alt="image-20200616231333668"></p><p>1.可证明安全性：将密码系统的安全性归结为某个经过深入研究的数学难题（如大整数素因子分解、计算离散对数等），数学难题被证明求解困难。这种评估方法存在的问题是它只说明了这个密码方法的安全性与某个困难问题相关，没有完全证明问题本身的安全性。</p><h1>密码学新方向</h1><h2 id="知识点-v11"><a class="header-anchor" href="#知识点-v11">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616231741030.png"  alt="image-20200616231741030"></p><p>1.写出5中密码学新方向或新技术       （==必考！==）</p><p>答：身份基加密(IBE)、属性基加密(ABE)、全同态加密、动态加密、可搜索加密</p><h1>计算公式</h1><p>1.==RSA加密解密==      (==必考！==)</p><p>选倆素数p,q       n=p*q      φ(n)=(p-1)*(q-1)            d*e ≡ 1 mod φ(n)</p><p>加密：c ≡ m<sup>e</sup> mod n    （e和n会给出）</p><p>解密：m ≡ c<sup>d</sup> mod n      (一般d要自己求)</p><p>2.==ElGamal签名体制：==                       （==必考！==）</p><p>用户A的公钥：y ≡ g<sup>x</sup>  (mod p)          x为用户A的私钥 （公钥要和私钥有关所以用x）</p><p>签名的产生过程：</p><ul><li>计算 r ≡ g<sup>k</sup>  (mod p)</li><li>计算 s ≡ (H(m)-xr)k<sup>-1</sup> (mod p-1)           H(m)为m的哈希值，计算取H(m)=m，==注意是p-1==</li><li>(r,s)即为签名</li></ul><p>签名的验证过程</p><ul><li>计算y<sup>r</sup>r<sup>s</sup> ≡ g<sup>H(m)</sup> (mod p)   （上面先后算出y,r,s所以是y<sup>r</sup>r<sup>s</sup>）</li><li>就是验证 y<sup>r</sup>r<sup>s</sup>（mod p）是不是等于 g<sup>H(m)</sup> (mod p)</li></ul><p>3.==D-H密钥交换协议==：                            （==必考！==）</p><p>已知私钥为X，公钥为Y，p是一大素数，a是p的本原根，a和p公开，K为共享密钥</p><p>用户A：计算Y<sub>A</sub>=a<sup>XA</sup> mod p发送给B         共享密钥K=Y<sub>B</sub><sup>XA</sup> mod p</p><p>用户B：计算Y<sub>B</sub>=a<sup>XB</sup> mod p发送给A         共享密钥K=Y<sub>A</sub><sup>XB</sup> mod p</p><blockquote><p>通过上述操作求得的两个K值相等，这样就安全的求得了一个公共的密钥</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;由于老师后来给画了重点，本篇博客后半部分主要记录的是老师画的重点。个人复习使用，仅供参考&lt;/p&gt;
&lt;p&gt;对于河南大学的学弟学妹们，如果你们任课老师是袁老师的话，他会给复习要点，跟着复习要点有针对性的复习就行。&lt;/p&gt;
&lt;h1&gt;引言&lt;/h1&gt;
&lt;h</summary>
      
    
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
</feed>
