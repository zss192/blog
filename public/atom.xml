<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏日 の blog</title>
  
  
  <link href="https://zss192.github.io/atom.xml" rel="self"/>
  
  <link href="https://zss192.github.io/"/>
  <updated>2021-03-30T03:54:56.627Z</updated>
  <id>https://zss192.github.io/</id>
  
  <author>
    <name>夏日</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划算法总结</title>
    <link href="https://zss192.github.io/2021/03/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2021/03/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-30T03:54:00.000Z</published>
    <updated>2021-03-30T03:54:56.627Z</updated>
    
    <content type="html"><![CDATA[<h1>思想</h1><p>名词解释：通过一个例子来解释</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A : <span class="string">&quot;1+1+1+1+1+1+1+1 =？&quot;</span> </span><br><span class="line"></span><br><span class="line">A : <span class="string">&quot;上面等式的值是多少&quot;</span></span><br><span class="line">B : 计算 <span class="string">&quot;8!&quot;</span></span><br><span class="line"></span><br><span class="line">A : 在上面等式的左边写上 <span class="string">&quot;1+&quot;</span> </span><br><span class="line">A : <span class="string">&quot;此时等式的值为多少&quot;</span></span><br><span class="line">B :  <span class="string">&quot;9!&quot;</span>  (quickly)</span><br><span class="line">A : <span class="string">&quot;你怎么这么快就知道答案了&quot;</span></span><br><span class="line">A : <span class="string">&quot;只要在8的基础上加1就行了&quot;</span></span><br><span class="line">A : <span class="string">&quot;所以你不用重新计算因为你记住了第一个等式的值为8!动态规划算法也可以说是 &#x27;记住求过的解来节省时间&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>例如斐波拉契数列Fibonacci</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Fibonacci</span> (n) = <span class="number">1</span>;   n = <span class="number">0</span></span><br><span class="line"><span class="built_in">Fibonacci</span> (n) = <span class="number">1</span>;   n = <span class="number">1</span></span><br><span class="line"><span class="built_in">Fibonacci</span> (n) = <span class="built_in">Fibonacci</span>(n<span class="number">-1</span>) + <span class="built_in">Fibonacci</span>(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">fib</span>(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fib</span>(n<span class="number">-1</span>)+<span class="built_in">fib</span>(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是常用的递归法，但是我们发现很多fib()会重复执行，而我们可以算出来一个fib()后把它存到一个数组中再次用到的时候直接根据数组取值，这就是动态规划</p><h1>经典例题</h1><h2 id="🚩1-01背包问题（物品个数为1）"><a class="header-anchor" href="#🚩1-01背包问题（物品个数为1）">¶</a>🚩1. 01背包问题（物品个数为1）</h2><p>有N个物品，其重量分别为weight[i]，其价值分别为value[i]，现有一个容量为V的背包，问怎样装商品才能使得背包中的价值最大？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;   <span class="comment">//方便统计从1开始</span></span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><p>可先看B站这个视频讲解：<a href="https://www.bilibili.com/video/BV1K4411X766/">https://www.bilibili.com/video/BV1K4411X766/</a></p><p>其实就是相当于我们创建一个表格即dp[][]，左边那一列表示商品编号，上面那一行表示背包容量，表格内容是此时状态的最大价值</p><p>先看结果，如下</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210330112048755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>解释：</p><p>一行一行的填写，从上至下从左至右。如编号1重量为3，那么容量为0、1、2时都不能放下，最大价值都为0</p><p>当背包重量为3时可以放下商品1所以最大价值为4</p><p>再考虑第二行，j等于0<sub>2时都放不下最大价值为0，由于商品2重量为6，那么背包容量为3</sub>5时都放不下商品2只能放商品1最大价值为商品1的价值4。</p><p>而当背包容量为6时，此时能够放下商品2，那么就要考虑要不要放商品2</p><p>1️⃣放商品2，那么最大价值就是此时背包的容量减去商品2的重量为0，再看第一行重量为0时的价值也是0，那么最大价值为6</p><p>2️⃣不放商品2，那么最大价值就是第一行背包容量为6时的最大价值为4</p><p>放商品2最大价值为6，不放最大价值为4，我们选最大值为6</p><p>总结如下：</p><p>若背包容量小于商品n的重量放不下商品</p><ul><li>那么前n个商品的最大价值和前n-1个商品的最大价值是一样的（既然不放相当于就不考虑这个商品，那么考虑前n个商品其实就是考虑前n-1个商品）</li></ul><p>若此时背包装得下商品n</p><ul><li>若选择放商品n，那么背包可用容量KV就等于背包总容量SV减去商品n的重量nV，那么问题就变成了只考虑前n-1个商品且背包容量为KV时的最大价值，而此前我们已经求得了这个值填写在了表中所以直接用这个值加上商品n的价值就是最大价值</li><li>若不放商品n，那么前n个商品的最大价值和前n-1个商品的最大价值是一样的</li><li>从以上两个选择选一个最大的就是最终的最大价值</li></ul><p>对应的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= N; n++)<span class="comment">//遍历商品1~N</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++)<span class="comment">//遍历容量0~V</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=weight[n])<span class="comment">//背包容量大于等于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=<span class="built_in">max</span>(dp[n<span class="number">-1</span>][v-weight[n]]+value[n],dp[n<span class="number">-1</span>][v]); <span class="comment">//选择放商品n和不放商品n哪个价值最大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//背包容量小于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=dp[n<span class="number">-1</span>][v];<span class="comment">//此时商品n一定不能放，此时最大价值就是商品1到i-1中，容量为v时的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而其实我们也可以用一维数组优化下代码，代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=N;n++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=V;v&gt;=w[i];v--)</span><br><span class="line">dp[v]=<span class="built_in">max</span>(dp[v],dp[v-weight[n]]+value[n]);</span><br></pre></td></tr></table></figure><p>而我们怎么知道求得的最大价值其中我们选了哪些商品呢</p><p>其实就是从表的右下角开始回溯，如果dp[n][j]和dp[n-1][j]值是一样的，那么我们肯定没装商品n(相当于我们就没考虑商品n)。事实上，我们推dp[n][j]时如果选择不放商品n那么我们就让dp[n][j]=dp[n-1][j]</p><p>所以相当于我们根据两个数值是否相等来判断当时我们是否选了商品n</p><p>相当于是求最大价值的一个逆过程</p><p>如果装了商品n，那么用总容量减去商品n的容量得到可用容量kV再来判断是否放了商品n-1，其实也就是看dp[n-1][kv]和dp[n-2][kv]是否相等，以此类推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n=N,v=V;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][v]==dp[n<span class="number">-1</span>][v])</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;未被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">v=v-weight[n];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🦄完整代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印初始状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;共&quot;</span>&lt;&lt;N&lt;&lt;<span class="string">&quot;个商品，&quot;</span>&lt;&lt;<span class="string">&quot;背包容量为&quot;</span>&lt;&lt;V&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;的重量为&quot;</span>&lt;&lt;weight[i]&lt;&lt;<span class="string">&quot;，价值为&quot;</span>&lt;&lt;value[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求最大价值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= N; n++)<span class="comment">//遍历商品1~N</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++)<span class="comment">//遍历容量0~V</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=weight[n])<span class="comment">//背包容量大于等于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=<span class="built_in">max</span>(dp[n<span class="number">-1</span>][v-weight[n]]+value[n],dp[n<span class="number">-1</span>][v]); <span class="comment">//选择放商品n和不放商品n哪个价值最大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//背包容量小于商品i的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=dp[n<span class="number">-1</span>][v];<span class="comment">//此时商品n一定不能放，此时最大价值就是商品1到n-1中，容量为v时的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N][V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印最大价值的商品选择情况</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSelect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=N,v=V;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][v]==dp[n<span class="number">-1</span>][v])</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;未被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">v=v-weight[n];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printInit</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;最大价值为：&quot;</span>&lt;&lt;<span class="built_in">maxValue</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printSelect</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🚩2-多重背包问题（物品个数有限）"><a class="header-anchor" href="#🚩2-多重背包问题（物品个数有限）">¶</a>🚩2.多重背包问题（物品个数有限）</h2><p>在01背包的基础上每个商品可以有多个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> number[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>&#125;;<span class="comment">//每个商品的个数</span></span><br><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)<span class="comment">//对于每个物品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= V; j++)<span class="comment">//对于每个容量</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= number[i]; k++)<span class="comment">//放几个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=weight[i]*k)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-weight[i]*k]+value[i]*k , dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[N][V]&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🚩3-完全背包问题（物品个数无限）"><a class="header-anchor" href="#🚩3-完全背包问题（物品个数无限）">¶</a>🚩3. 完全背包问题（物品个数无限）</h2><p>在01背包的基础上每个商品的数量是无限的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)<span class="comment">//对于每个商品</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= V; j++)<span class="comment">//对于背包容量</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=weight[i])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i][j-weight[i]]+value[i],dp[i<span class="number">-1</span>][j]);   <span class="comment">//和01背包相比就这句不同</span></span><br><span class="line"><span class="comment">//dp[i][j]=max(dp[i-1][j-weight[i]]+value[i],dp[i-1][j]);    01背包</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;dp[N][V]&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;思想&lt;/h1&gt;
&lt;p&gt;名词解释：通过一个例子来解释&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯-完美的代价(C++详细解释版)</title>
    <link href="https://zss192.github.io/2021/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%AE%8C%E7%BE%8E%E7%9A%84%E4%BB%A3%E4%BB%B7-C-%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E7%89%88/"/>
    <id>https://zss192.github.io/2021/03/29/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E5%AE%8C%E7%BE%8E%E7%9A%84%E4%BB%A3%E4%BB%B7-C-%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E7%89%88/</id>
    <published>2021-03-29T03:53:00.000Z</published>
    <updated>2021-03-30T03:53:44.078Z</updated>
    
    <content type="html"><![CDATA[<h1>题目</h1><p><strong>题目描述</strong></p><p>回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。</p><p>交换的定义是：交换两个相邻的字符例如mamad</p><p>第一次交换  ad  :  mamda</p><p>第二次交换  md  :  madma</p><p>第三次交换  ma  :  madam  (回文！完美！)</p><p><strong>输入</strong></p><p>第一行是一个整数N，表示接下来的字符串的长度(N  &lt; =  8000) 第二行是一个字符串，长度为N.只包含小写字母</p><p><strong>输出</strong></p><p>如果可能，输出最少的交换次数。 否则输出Impossible</p><p><strong>样例输入</strong></p><p><code>5  mamad</code></p><p><strong>样例输出</strong></p><p><code>3</code></p><h1>思路讲解</h1><p><strong>首先是Impossible的情况</strong></p><p>1️⃣当N是偶数且有一个字符出现次数为奇数时那一定不可能构成回文数如adaaaa</p><p>2️⃣当N是奇数且有两个不等的字符出现次数为奇数时页一定不可能构成回文数如abada</p><p><strong>然后是可以移成回文数的情况</strong></p><p>采用贪心思想，从左向右遍历当前字符串s[i]，然后从右向左遍历找到与当前字符串s[i]相等的字符串s[k]，将s[k]移到字符串末尾(彼此相邻的移动)，然后将指向末尾的指针减一。</p><p>再看s[i+1]，从右(末尾已经减一)向左遍历找到与其相同的字符再将其移到末尾，再将末尾减一，以此类推</p><p>🌰<strong>举个例子</strong></p><p>比如mamad，首先从左到右s[0]即m，然后从右向左遍历找到与其相同的字符即s[2]</p><p>然后将s[2]移到字符末尾即s[4]，移动的过程是s[2]和s[3]交换然后s[3]再和s[4]交换，然后将末尾指针减一，此时字符串变成了maadm</p><p>接着是s[1]即a从右向左遍历找到了s[2]与其相等，然后将其移到末尾，注意此时末尾指针已经减一，也就是s[2]移到s[3]的位置，此时字符串变成了madam</p><p>此时从左到右遍历的指针和从右向左的指针相等程序结束</p><p>整个过程一共移动了3次而3就是答案</p><p>可以发现整个移动过程其实和题目说的移动过程并不一致</p><h1>完整代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;<span class="comment">//res用来统计交换的次数</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;<span class="comment">//flag用来统计出现奇数次数的字符个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++)<span class="comment">//i指针从头遍历到倒数第二个字符</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &gt;= i; k--)<span class="comment">//k指针从后面往前一直到i寻找和s[i]相同的s[k]</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(k == i)<span class="comment">//如果找不到相同的</span></span><br><span class="line">&#123;</span><br><span class="line">flag++;</span><br><span class="line">                <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span> || flag == <span class="number">2</span>)<span class="comment">//impossible的两种情况</span></span><br><span class="line">&#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;               </span><br><span class="line">                res += n / <span class="number">2</span> - i;<span class="comment">//n为奇数时唯一一个奇数次出现的字符移到中间的次数</span></span><br><span class="line"><span class="comment">//n/2-i一定大于0即这个数是在整体的左边位置，如果在右边遍历前面的i时就已经把它移到中间了，如aaaad  </span></span><br><span class="line">            &#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == s[k])   </span><br><span class="line">&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l = k; l &lt; j; l++) </span><br><span class="line">&#123;</span><br><span class="line">                    <span class="built_in">swap</span>(s[l], s[l+<span class="number">1</span>]);<span class="comment">//把s[k]换到s[j]处  </span></span><br><span class="line">                    res++;<span class="comment">//统计交换次数</span></span><br><span class="line">                &#125;</span><br><span class="line">                j--;<span class="comment">//将一个字符调到末尾后j减一即将末尾指针往前移一位</span></span><br><span class="line"><span class="comment">//方便下次交换到末尾且i和j相等时此时已经是回文数第一个for循环就结束了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考</h1><p><a href="https://blog.csdn.net/liuchuo/article/details/51990430">蓝桥杯 BASIC-19 基础练习 完美的代价</a><br><a href="https://github.com/hushhw/LQOJ/blob/master/BASIC/BASIC-19%20%E5%AE%8C%E7%BE%8E%E7%9A%84%E4%BB%A3%E4%BB%B7.cpp">BASIC-19 完美的代价</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;题目&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>01背包问题---动态规划</title>
    <link href="https://zss192.github.io/2021/03/28/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://zss192.github.io/2021/03/28/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-03-28T03:51:00.000Z</published>
    <updated>2021-03-30T03:52:18.954Z</updated>
    
    <content type="html"><![CDATA[<h1>问题描述</h1><p>🚩有N个物品，其重量分别为weight[i]，其价值分别为value[i]，现有一个容量为V的背包，问怎样装商品才能使得背包中的价值最大？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><h1>思路讲解</h1><p>可先看B站这个视频讲解：<a href="https://www.bilibili.com/video/BV1K4411X766/">https://www.bilibili.com/video/BV1K4411X766/</a></p><p>其实就是相当于我们创建一个表格即dp[][]，左边那一列表示商品编号，上面那一行表示背包容量，表格内容是此时状态的最大价值</p><p>先看结果，如下</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210328182340133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>解释：</p><p>一行一行的填写，从上至下从左至右。如编号1重量为3，那么容量为0、1、2时都不能放下，最大价值都为0</p><p>当背包重量为3时可以放下商品1所以最大价值为4</p><p>再考虑第二行，j等于0~2时都放不下最大价值为0，由于商品2重量为6，那么背包容量为3~5时都放不下商品2只能放商品1最大价值为商品1的价值4。</p><p>而当背包容量为6时，此时能够放下商品2，那么就要考虑要不要放尚品2</p><p>1️⃣放商品2，那么最大价值就是此时背包的容量减去商品2的重量为0，再看第一行重量为0时的价值也是0，那么最大价值为6</p><p>2️⃣不放商品2，那么最大价值就是第一行背包容量为6时的最大价值为4</p><p>放商品2最大价值为6，不放最大价值为4，我们选最大值为6</p><p>总结如下：</p><p>若背包容量小于商品n的重量放不下商品</p><ul><li>那么前n个商品的最大价值和前n-1个商品的最大价值是一样的（既然不放相当于就不考虑这个商品，那么考虑前n个商品其实就是考虑前n-1个商品）</li></ul><p>若此时背包装得下商品n</p><ul><li>若选择放商品n，那么背包可用容量KV就等于背包总容量SV减去商品n的重量nV，那么问题就变成了只考虑前n-1个商品且背包容量为KV时的最大价值，而此前我们已经求得了这个值填写在了表中所以直接用这个值加上商品n的价值就是最大价值</li><li>若不放商品n，那么前n个商品的最大价值和前n-1个商品的最大价值是一样的</li><li>从以上两个选择选一个最大的就是最终的最大价值</li></ul><p>对应的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= N; n++)<span class="comment">//遍历商品1~N</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++)<span class="comment">//遍历容量0~V</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=weight[n])<span class="comment">//背包容量大于等于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=<span class="built_in">max</span>(dp[n<span class="number">-1</span>][v-weight[n]]+value[n],dp[n<span class="number">-1</span>][v]); <span class="comment">//选择放商品n和不放商品n哪个价值最大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//背包容量小于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=dp[n<span class="number">-1</span>][v];<span class="comment">//此时商品n一定不能放，此时最大价值就是商品1到i-1中，容量为v时的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们怎么知道求得的最大价值其中我们选了哪些商品呢</p><p>其实就是从表的右下角开始回溯，如果dp[n][j]和dp[n-1][j]值是一样的，那么我们肯定没装商品i(相当于我们就没考虑商品n)。事实上，我们推dp[n][j]时如果选择不放商品n那么我们就让dp[n][j]=dp[n-1][j]</p><p>所以相当于我们根据两个数值是否相等来判断当时我们是否选了商品n</p><p>相当于是求最大价值的一个逆过程</p><p>如果装了商品n，那么用总容量减去商品n的容量得到可用容量kV再来判断是否放了商品n-1，其实也就是看dp[n-1][kv]和dp[n-2][kv]是否相等，以此类推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n=N,v=V;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][v]==dp[n<span class="number">-1</span>][v])</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;未被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">v=v-weight[n];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>🦄完整代码如下</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> N=<span class="number">5</span>,V=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> weight[]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> value[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印初始状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;共&quot;</span>&lt;&lt;N&lt;&lt;<span class="string">&quot;个商品，&quot;</span>&lt;&lt;<span class="string">&quot;背包容量为&quot;</span>&lt;&lt;V&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;的重量为&quot;</span>&lt;&lt;weight[i]&lt;&lt;<span class="string">&quot;，价值为&quot;</span>&lt;&lt;value[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求最大价值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= N; n++)<span class="comment">//遍历商品1~N</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt;= V; v++)<span class="comment">//遍历容量0~V</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;=weight[n])<span class="comment">//背包容量大于等于商品n的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=<span class="built_in">max</span>(dp[n<span class="number">-1</span>][v-weight[n]]+value[n],dp[n<span class="number">-1</span>][v]); <span class="comment">//选择放商品n和不放商品n哪个价值最大</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//背包容量小于商品i的容量时</span></span><br><span class="line">&#123;</span><br><span class="line">dp[n][v]=dp[n<span class="number">-1</span>][v];<span class="comment">//此时商品n一定不能放，此时最大价值就是商品1到n-1中，容量为v时的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N][V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印最大价值的商品选择情况</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSelect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=N,v=V;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[n][v]==dp[n<span class="number">-1</span>][v])</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;未被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;商品&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;被选中&quot;</span>&lt;&lt;endl;</span><br><span class="line">v=v-weight[n];</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printInit</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;最大价值为：&quot;</span>&lt;&lt;<span class="built_in">maxValue</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printSelect</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;p&gt;🚩有N个物品，其重量分别为weight[i]，其价值分别为value[i]，现有一个容量为V的背包，问怎样装商品才能使得背包中的价值最大？&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯迷宫题解</title>
    <link href="https://zss192.github.io/2021/03/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BF%B7%E5%AE%AB%E9%A2%98%E8%A7%A3/"/>
    <id>https://zss192.github.io/2021/03/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BF%B7%E5%AE%AB%E9%A2%98%E8%A7%A3/</id>
    <published>2021-03-26T12:50:00.000Z</published>
    <updated>2021-03-30T03:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1>问题描述</h1><p>下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可 以通行的地方。</p><p>010000<br>000100<br>001001<br>110000</p><p>迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。</p><p>对于上面的迷宫，从入口开始，可以按 DRRURRDDDR 的顺序通过迷宫，一共 10 步。</p><p>其中 D、U、L、R 分别表示向下、向上、向左、向右走。</p><p>对于下面这个更复杂的迷宫（30 行 50 列）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01010101001011001001010110010110100100001000101010</span></span><br><span class="line"><span class="number">00001000100000101010010000100000001001100110100101</span></span><br><span class="line"><span class="number">01111011010010001000001101001011100011000000010000</span></span><br><span class="line"><span class="number">01000000001010100011010000101000001010101011001011</span></span><br><span class="line"><span class="number">00011111000000101000010010100010100000101100000000</span></span><br><span class="line"><span class="number">11001000110101000010101100011010011010101011110111</span></span><br><span class="line"><span class="number">00011011010101001001001010000001000101001110000000</span></span><br><span class="line"><span class="number">10100000101000100110101010111110011000010000111010</span></span><br><span class="line"><span class="number">00111000001010100001100010000001000101001100001001</span></span><br><span class="line"><span class="number">11000110100001110010001001010101010101010001101000</span></span><br><span class="line"><span class="number">00010000100100000101001010101110100010101010000101</span></span><br><span class="line"><span class="number">11100100101001001000010000010101010100100100010100</span></span><br><span class="line"><span class="number">00000010000000101011001111010001100000101010100011</span></span><br><span class="line"><span class="number">10101010011100001000011000010110011110110100001000</span></span><br><span class="line"><span class="number">10101010100001101010100101000010100000111011101001</span></span><br><span class="line"><span class="number">10000000101100010000101100101101001011100000000100</span></span><br><span class="line"><span class="number">10101001000000010100100001000100000100011110101001</span></span><br><span class="line"><span class="number">00101001010101101001010100011010101101110000110101</span></span><br><span class="line"><span class="number">11001010000100001100000010100101000001000111000010</span></span><br><span class="line"><span class="number">00001000110000110101101000000100101001001000011101</span></span><br><span class="line"><span class="number">10100101000101000000001110110010110101101010100001</span></span><br><span class="line"><span class="number">00101000010000110101010000100010001001000100010101</span></span><br><span class="line"><span class="number">10100001000110010001000010101001010101011111010010</span></span><br><span class="line"><span class="number">00000100101000000110010100101001000001000000000010</span></span><br><span class="line"><span class="number">11010000001001110111001001000011101001011011101000</span></span><br><span class="line"><span class="number">00000110100010001000100000001000011101000000110011</span></span><br><span class="line"><span class="number">10101000101000100010001111100010101001010000001000</span></span><br><span class="line"><span class="number">10000010100101001010110000000100101010001011101000</span></span><br><span class="line"><span class="number">00111100001000010000000110111000000001000000001011</span></span><br><span class="line"><span class="number">10000001100111010111010001000110111010101101111000</span></span><br></pre></td></tr></table></figure><p>请找出一种通过迷宫的方式， 其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。</p><p>请注意在字典序中 D &lt; L &lt; R &lt; U。</p><p>答案提交<br>这是一道结果填空的题，你只需要算出结果后提交即可。<br>本题的结果为一 个字符串，包含四种字母 D、U、L、R，在提交答案时只填写这个字符串，填写多余的内容将无法得分。</p><h1>题解</h1><p>迷宫类求最短路径问题所以用bfs来求，注意如果使用dfs会很长时间跑不出结果。<br>题目中要求步数相同的情况下输出字典序最小的那个，那么我们可以在遍历四个方向的时候顺序也是D  L  R  U，这样就保证了第一个找到的解既满足步数最小也满足字典序最小</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> //结构体<span class="title">node</span>记录<span class="title">xy</span>坐标和走的顺序</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;string s;</span><br><span class="line"><span class="built_in">node</span>(<span class="keyword">int</span> xx,<span class="keyword">int</span> yy,string ss)</span><br><span class="line">&#123;</span><br><span class="line">x=xx;y=yy,s=ss;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">string mp[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span> zimu[<span class="number">4</span>]=&#123;<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> m=<span class="number">30</span>,n=<span class="number">50</span>;</span><br><span class="line">queue&lt;node &gt; qn;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">qn.<span class="built_in">push</span>(<span class="built_in">node</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">visited[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!qn.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">node t=qn.<span class="built_in">front</span>();</span><br><span class="line">qn.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tx=t.x+dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> ty=t.y+dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(tx&gt;=<span class="number">0</span>&amp;&amp;tx&lt;m&amp;&amp;ty&gt;=<span class="number">0</span>&amp;&amp;ty&lt;n&amp;&amp;!visited[tx][ty]&amp;&amp;mp[tx][ty]!=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tx==m<span class="number">-1</span>&amp;&amp;ty==n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;t.s&lt;&lt;zimu[i]&lt;&lt;endl;<span class="comment">//注意也要将zimu[i]一并输出因为此时它还没有被加到t.s</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">visited[tx][ty]=<span class="number">1</span>;</span><br><span class="line">qn.<span class="built_in">push</span>(<span class="built_in">node</span>(tx,ty,t.s+zimu[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;mp[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果为：<br>DDDDRRURRRRRRDRRRRDDDLDDRDDDDDDDDDDDDRDDRRRURRUURRDDDDRDRRRRRRDRRURRDDDRRRRUURUUUUUUULULLUUUURRRRUULLLUUUULLUUULUURRURRURURRRDDRRRRRDDRRDDLLLDDRRDDRDDLDDDLLDDLLLDLDDDLDDRRRRRRRRRDDDDDDRR</p><h1>bfs模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;type&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(初始状态);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">  type t = q.<span class="built_in">front</span>() ;</span><br><span class="line">  q.<span class="built_in">pop</span>();</span><br><span class="line">  遍历 t 的各个Next状态  next</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="keyword">if</span> (next is legal)</span><br><span class="line">      q.<span class="built_in">push</span>(next的状态); 计数或维护等; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;p&gt;下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可 以通行的地方。&lt;/p&gt;
&lt;p&gt;010000&lt;br&gt;
000100&lt;br&gt;
001001&lt;br&gt;
110000&lt;/p&gt;
&lt;p&gt;迷宫的入口为左上角，出口为右下角，在迷宫中，只能</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>递归算法总结</title>
    <link href="https://zss192.github.io/2021/03/26/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2021/03/26/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-26T09:49:00.000Z</published>
    <updated>2021-03-30T03:50:05.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个函数调用其自身就是递归，也是利用栈实现，每调用一次进一次栈</p></blockquote><p>注意找到递归的终止条件</p><p>作用</p><ul><li>替代多重循环</li><li>解决本来就是用递归形式定义的问题</li><li>将问题分解规模更小的子问题求解（如求阶乘）</li></ul><h2 id="例题讲解"><a class="header-anchor" href="#例题讲解">¶</a>例题讲解</h2><p>🚩1.阶乘问题</p><p>思路讲解：如我们要求3的阶乘，那我们可以把问题分解成求3乘上2的阶乘，然后还可以再把2的阶乘分解成2乘上1的阶乘。</p><p>现在我们已知digui()这个函数就是求一个数的阶乘的函数，3的阶乘分解成两个小问题，对于2的阶乘我们直接可以用digui(2)就可以求。</p><p>但要注意不能无穷的递归下去，要有一个临界点，到了这个临界点后就可以直接返回不用再接着调用digui()函数了，在这题里，如果要求1的阶乘那么可以直接返回1而不用再接着分解问题了。</p><p>作为基础入门，代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">digui</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="built_in">digui</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🚩2.汉诺塔问题（分解成小问题）</p><p>有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:<br>(1) 每次只能移动一个盘子;<br>(2) 盘子只能从柱子顶端滑出移到下一根柱子;<br>(3) 盘子只能叠在比它大的盘子上。</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/202103261436302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>思路讲解：比如我们现在要把3个圆盘从塔1移到塔3，那么一定是A先放到塔3最下面，然后B和C再移到塔3，这样的话就要先把B和C移走。</p><p>B和C又不能移到塔3，可以先移到塔2作为中间结点然后再移到塔3。这样要解决3层汉诺塔问题要先解决2层汉诺塔问题即把BC如何移到塔2</p><p>B和C要想移到塔2首先C要先移走且不能移到塔2因为塔2必须是最底下的B先移动，那么BC要从塔1移到塔2就要利用塔3当做中间节点</p><p>这样两层汉诺塔问题就拆解成了两个1层汉诺塔的问题而1层汉诺塔可以直接移动至此解决</p><p>解题步骤：</p><ul><li>第一步<ul><li>把n-1个圆盘 从塔1移动到塔2</li></ul></li><li>第二步<ul><li>把第n个圆盘 从塔1移动到塔3</li></ul></li><li>第三步<ul><li>把n-1个圆盘 从塔2移动到塔3</li></ul></li></ul><p>原理：看到这里是不是觉得和阶乘的解决方法类似</p><ul><li>要想解决n层汉诺塔问题必须解决n-1层汉诺塔问题</li><li>解决n-1层汉诺塔问题必须解决n-2层汉诺塔问题</li><li>…</li><li>必须解决1层汉诺塔问题，而1层可以直接移动。类似于阶乘中如果求1的阶乘那么不用再调用函数可以直接返回</li></ul><p>🦄代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> src,<span class="keyword">char</span> mid,<span class="keyword">char</span> dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)    <span class="comment">//递归结束条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;src&lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt;dest&lt;&lt;endl; <span class="comment">//只有一个盘子时直接移动即可</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Hanoi</span>(n<span class="number">-1</span>,src,dest,mid);        <span class="comment">//第一步，把n-1个圆盘 从塔1移动到塔2</span></span><br><span class="line">    cout&lt;&lt;src&lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt;dest&lt;&lt;endl;  <span class="comment">//第二步, 把第n个圆盘 从塔1移动到塔3</span></span><br><span class="line">    <span class="built_in">Hanoi</span>(n<span class="number">-1</span>,mid,src,dest);        <span class="comment">//第三步，把n-1个圆盘 从塔2移动到塔3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Hanoi(3,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;);</span></span><br><span class="line"><span class="comment">//1-&gt;3  第一步，2个圆盘从塔1移到塔2</span></span><br><span class="line"><span class="comment">//1-&gt;2</span></span><br><span class="line"><span class="comment">//3-&gt;2  第一步结束</span></span><br><span class="line"><span class="comment">//1-&gt;3  第二步，到这塔1移到了塔3</span></span><br><span class="line"><span class="comment">//2-&gt;1  第三步，2个圆盘从塔2移到塔3</span></span><br><span class="line"><span class="comment">//2-&gt;3</span></span><br><span class="line"><span class="comment">//1-&gt;3  第三步结束</span></span><br></pre></td></tr></table></figure><blockquote><p>把问题拆解分成几个小步骤，而对于n-1个圆盘的移动直接调用函数改下参数即可</p></blockquote><p><a href="http://player.bilibili.com/player.html?aid=753044588&amp;bvid=BV1Hk4y1k7KL&amp;cid=186093717&amp;page=1">http://player.bilibili.com/player.html?aid=753044588&amp;bvid=BV1Hk4y1k7KL&amp;cid=186093717&amp;page=1</a></p><p>🚩3.[蓝桥杯][算法提高VIP]最大乘积（替代多重循环）</p><p>对于n个数，从中取出m个数，如何取使得这m个数的乘积最大呢？</p><p><strong>输入</strong></p><p>第一行一个数表示数据组数每组输入数据共2行：第1行给出总共的数字的个数n和要取的数的个数m，1&lt;=n&lt;=m&lt;=15，第2行依次给出这n个数，其中每个数字的范围满足:a[i]的绝对值小于等于4。</p><p><strong>输出</strong></p><p>每组数据输出1行，为最大的乘积。</p><p><strong>样例输入</strong></p><p><code>1 5 5 1 2 3 4 2</code></p><p><strong>样例输出</strong></p><p><code>48</code></p><p>思路：用递归代替多重循环(因为不知道有几重)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> maxn=<span class="number">-1e8</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> sum,<span class="keyword">int</span> step)</span>   <span class="comment">//x记录起始搜寻位置，sum记录当前乘积，step记录当前找了几个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(step==m)</span><br><span class="line">    &#123;</span><br><span class="line">        maxn=<span class="built_in">max</span>(maxn,sum);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i+<span class="number">1</span>,sum*a[i],step+<span class="number">1</span>);</span><br><span class="line">            vis[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        cout&lt;&lt;maxn&lt;&lt;endl;</span><br><span class="line">        maxn=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>🚩4.N皇后问题（替代多重循环）</p><p>在N×N格的国际象棋上摆放N个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。</p><p>思路讲解：可以递归来求解，尝试每种解法，如果都不冲突就输出这种解法</p><p>对于第k行的皇后依次遍历所放位置i和前k-1行已经摆好的皇后判断是否冲突。</p><p>若在同一列那所放位置和之前某个皇后的列位置相同，若斜线冲突，那两个冲突的皇后行的差值和列的差值的绝对值相同</p><p>🦄代码如下（本质上是N重循环只不过用递归代替）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> queenPos[<span class="number">100</span>];  <span class="comment">//第i行的皇后放在哪一列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NQueen</span><span class="params">(<span class="keyword">int</span> k)</span>  <span class="comment">//在1~k-1行皇后已经摆好的情况下，摆第k行及其后的皇后</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==N+<span class="number">1</span>)    <span class="comment">//N个皇后已经摆好，此时输出摆法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;queenPos[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="comment">//逐个尝试第k行皇后的列位置i</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="comment">//和已经摆好的前k个皇后的位置比较，看是否冲突</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(queenPos[j]==i || <span class="built_in">abs</span>(queenPos[j]-i)==<span class="built_in">abs</span>(k-j))</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//冲突，尝试下一个位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==k)    <span class="comment">//当前选的列位置i不冲突（只有不冲突上面的for循环才不会break）</span></span><br><span class="line">        &#123;</span><br><span class="line">            queenPos[k]=i; <span class="comment">//将第k个皇后摆放在列位置i</span></span><br><span class="line">            <span class="built_in">NQueen</span>(k+<span class="number">1</span>);</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="built_in">NQueen</span>(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🚩5.逆波兰表达式（递归解决递归形式的问题）</p><p>如2 + 3用逆波兰表达式为+ 2 3，（2+3）* 4表示为* + 2 3 4，本题求逆波兰表达式的值</p><p>输入：* + 11.0 12.0 + 24.0 35.0</p><p>输出：1357.000000</p><p>提示：(11.0+12.0)*(24.0+35.0)</p><p>思路：首先来看逆波兰表达式的定义</p><ul><li>一个数就是一个逆波兰表达式，值为该数</li><li>&quot;运算符 逆波兰表达式 逆波兰表达式&quot;也是逆波兰表达式</li></ul><p>从上面的逆波兰表达式的定义可以看到定义中又出现了逆波兰表达式这不就和递归一样吗，自身又用到了自身</p><p>而显然终止条件就是一个数的情况</p><p>🦄代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">exp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;    <span class="comment">//cin遇到空格会停止</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (s[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()+<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()-<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()*<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> <span class="built_in">exp</span>()/<span class="built_in">exp</span>();</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="built_in">stod</span>(s);   <span class="comment">//stod函数将字符串类型转换为double类型</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">exp</span>()&lt;&lt;endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// + 2 3</span></span><br><span class="line"><span class="comment">// 首先读入+然后case &#x27;+&#x27;执行return exp()+exp()</span></span><br><span class="line"><span class="comment">//第一个exp()也会执行cin&gt;&gt;s;这时的s是2直接return stod(&quot;2&quot;)</span></span><br><span class="line"><span class="comment">//第二个exp()也会执行cin&gt;&gt;s;这时的s是2直接return stod(&quot;3&quot;)</span></span><br><span class="line"><span class="comment">//然后二者返回了2和3再执行加法操作返回5输出</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个函数调用其自身就是递归，也是利用栈实现，每调用一次进一次栈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意找到递归的终止条件&lt;/p&gt;
&lt;p&gt;作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替代多重循环&lt;/li&gt;
&lt;li&gt;解决本来就是用递归形式定义的问题&lt;/li</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法总结</title>
    <link href="https://zss192.github.io/2021/03/26/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2021/03/26/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-26T07:48:00.000Z</published>
    <updated>2021-03-30T03:49:08.433Z</updated>
    
    <content type="html"><![CDATA[<p>优点：简单，高效，省去了为了找最优解可能需要穷举操作，通常作为其它算法的辅助算法来使用；</p><p>缺点：不从总体上考虑其它可能情况，每次选取局部最优解，不再进行回溯处理，所以很少情况下得到最优解。</p><blockquote><p>每一步都选取当前状态下最好的选择(局部最优)。(整体不一定是最优解)<br>助记：贪心即比较贪婪只注重&quot;眼前利益&quot;不能长远考虑</p></blockquote><p>正是因为原问题太复杂无法直接得到全局最优解，所以也无法判定贪心算法得到的结果是否逼近全局最优解，只要最终得到的结果在接受范围内即可</p><h2 id="例题案例"><a class="header-anchor" href="#例题案例">¶</a>例题案例</h2><blockquote><p>注：以下两个案例均不能得到最优解，只能得到近似最优解，案例只是解释思想</p></blockquote><h3 id="1-找零钱问题"><a class="header-anchor" href="#1-找零钱问题">¶</a>1.找零钱问题</h3><p>假设你开了间小店，不能电子支付，钱柜里的货币只有 25 分、10 分、5 分和 1 分四种硬币，如果你是售货员且要找给客户 41 分钱的硬币，如何安排才能找给客人的钱既正确且硬币的个数又最少？</p><p>思路：如果用贪心算法求解</p><p>要找给顾客41分且硬币数最少，那么大数值的硬币数越多越好。先用一个25分的，41-25=16。</p><p>然后根据局部最优当找零为16时从25，10，5，1中选一个，我们可以选10，16-10=6</p><p>找零数为6时从25，10，5，1中选一个，我们可以选5，6-5=1，以此类推</p><blockquote><p>我们可以看到当做出一个选择后，然后相当于以现在的状态为起始状态，再次做出选择</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*<span class="keyword">int</span>* money=<span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num_25=<span class="number">0</span>,num_10=<span class="number">0</span>,num_5=<span class="number">0</span>,num_1=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不断尝试每一种硬币</span></span><br><span class="line"><span class="keyword">while</span>(money&gt;=<span class="number">25</span>) &#123; num_25++; money -=<span class="number">25</span>; &#125;</span><br><span class="line"><span class="keyword">while</span>(money&gt;=<span class="number">10</span>) &#123; num_10++; money -=<span class="number">10</span>; &#125;</span><br><span class="line"><span class="keyword">while</span>(money&gt;=<span class="number">5</span>)  &#123; num_5++;  money -=<span class="number">5</span>; &#125;</span><br><span class="line"><span class="keyword">while</span>(money&gt;=<span class="number">1</span>)  &#123; num_1++;  money -=<span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">cout&lt;&lt; <span class="string">&quot;25分硬币数：&quot;</span>&lt;&lt;num_25&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;10分硬币数：&quot;</span>&lt;&lt;num_10&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;5分硬币数：&quot;</span>&lt;&lt;num_5&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt; <span class="string">&quot;1分硬币数：&quot;</span>&lt;&lt;num_1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*25分硬币数：1</span></span><br><span class="line"><span class="comment">10分硬币数：1</span></span><br><span class="line"><span class="comment">5分硬币数：1</span></span><br><span class="line"><span class="comment">1分硬币数：1*/</span></span><br></pre></td></tr></table></figure><h3 id="2-01背包问题"><a class="header-anchor" href="#2-01背包问题">¶</a>2.01背包问题</h3><p>有一个背包，最多能承载重量为 C=150的物品，现在有7个物品（物品不能分割成任意大小），编号为 1~7。</p><p>重量分别是 wi=[35,30,60,50,40,10,25]，价值分别是 pi=[10,40,30,50,35,40,30]。</p><p>现在从这 7 个物品中选择一个或多个装入背包，要求在物品总重量不超过 C 的前提下，所装入的物品总价值最高。</p><p>思路：若用贪心算法，有3种策略</p><ol><li>价值主导选择，每次都选价值最高的物品放进背包；</li><li>重量主导选择，每次都选择重量最轻的物品放进背包；</li><li>价值密度主导选择，每次选择都选价值/重量最高的(性价比最高的)物品放进背包。</li></ol><p>策略1：每次优先选价值最高的</p><p>解：按照价值排序则放入背包的编号依次为4、2、6、5。</p><p>其价值为50+40+40+35=165，其重量为50+30+10+40=130</p><p>策略2：每次优先选重量最轻的</p><p>解：按照重量最轻则放入的编号依次为6、7、2、1、5</p><p>其价值为40+30+40+10+35=155，其重量为10+25+30+35+40=140</p><p>策略3：每次优先选价值/重量最大的</p><p>解：这7件物品的价值密度分别为0.286、1.333、0.5、1.0、0.875、4.0、1.2</p><p>所以放入的编号依次为6、2、7、4、1</p><p>其价值为40+40+30+50+10=170，其重量为10+30+25+50+35=150</p><h2 id="LeetCode习题"><a class="header-anchor" href="#LeetCode习题">¶</a>LeetCode习题</h2><p>🚩1.题目1221分割平衡字符串问题</p><p>在一个 平衡字符串 中，‘L’ 和 ‘R’ 字符的数量是相同的。给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。</p><p>注意：分割得到的每个字符串都必须是平衡字符串。返回可以通过分割得到的平衡字符串的最大数量 。</p><blockquote><p>输入：s = “RLRRLLRLRL”<br>输出：4<br>解释：s 可以分割为 “RL”、“RRLL”、“RL”、“RL” ，每个子字符串中都包含相同数量的 ‘L’ 和 ‘R’ 。</p></blockquote><p>解：用变量balance(初始为0)记录扫描到的L和R的数目，遇到L则balance+1否则减1当其为0的时候说明当前找到了平衡子串</p><p>上一次划分后balance=0，剩下的平衡子串接着用上述思想（贪心思想）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">balancedStringSplit</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> len=s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">int</span> balance=<span class="number">0</span>,result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;L&#x27;</span>)balance++;</span><br><span class="line">    <span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>)balance--;</span><br><span class="line">    <span class="keyword">if</span>(balance==<span class="number">0</span>)result++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;优点：简单，高效，省去了为了找最优解可能需要穷举操作，通常作为其它算法的辅助算法来使用；&lt;/p&gt;
&lt;p&gt;缺点：不从总体上考虑其它可能情况，每次选取局部最优解，不再进行回溯处理，所以很少情况下得到最优解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一步都选取当前状态下最好的选</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>STL知识点</title>
    <link href="https://zss192.github.io/2021/03/21/STL%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zss192.github.io/2021/03/21/STL%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-03-21T03:47:00.000Z</published>
    <updated>2021-03-30T03:48:10.017Z</updated>
    
    <content type="html"><![CDATA[<h1>STL知识点</h1><p>STL，即标准模板库或者泛型库，其包含有大量的模板类和模板函数，是 C++ 提供的一个基础模板的集合，用于完成诸如输入/输出、数学计算等功能。可以理解成动态数组</p><p>优点：举个例子，定义一个数组int a[n]，这种方法必须事先确定好长度，而如果无法事先确定长度一般都会把n设的比较大，就会造成空间的浪费。用指针则会比较麻烦，而STL可以很好地解决这个问题，而且所有容器和算法都是总结了几十年来算法和数据结构的研究成果。</p><h2 id="1-vector容器"><a class="header-anchor" href="#1-vector容器">¶</a>1.vector容器</h2><h3 id="🧨简单用法"><a class="header-anchor" href="#🧨简单用法">¶</a>🧨简单用法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个向量存储 int</span></span><br><span class="line"> vector&lt;<span class="keyword">int</span>&gt; vec; </span><br><span class="line"> <span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 显示 vec 的原始大小</span></span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;vector size = &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;  <span class="comment">//0</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 推入 5 个值到向量中</span></span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(i);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 显示 vec 扩展后的大小</span></span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;extended vector size = &quot;</span> &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;   <span class="comment">//5</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 访问向量中的 5 个值</span></span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;value of vec [&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; vec[i] &lt;&lt; endl; <span class="comment">//0 1 2 3 4</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="🏄🏼‍♂️进阶用法"><a class="header-anchor" href="#🏄🏼‍♂️进阶用法">¶</a>🏄🏼‍♂️进阶用法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;   <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素(在末尾)</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);  <span class="comment">//[1]</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">2</span>);  <span class="comment">//[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素(也是删末尾的那个)</span></span><br><span class="line">vec.<span class="built_in">pop_back</span>();    <span class="comment">//[1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空vector</span></span><br><span class="line">vec.<span class="built_in">clear</span>();       <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器 iterator 访问值</span></span><br><span class="line"><span class="comment">//注意begin指向第一个元素，而end指向的是最后一个元素的下一个位置</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator v = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>( v != vec.<span class="built_in">end</span>()) &#123;    <span class="comment">//如果等于end说明前面有效元素都访问了</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;value of v = &quot;</span> &lt;&lt; *v &lt;&lt; endl;  <span class="comment">//0 1 2 3 4</span></span><br><span class="line">v++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数初始化</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">10</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(n,<span class="number">1</span>)</span></span>;  <span class="comment">//相当于push_back了10个1</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(n)</span></span>;    <span class="comment">//不传初始值，默认为0即10个0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义二维数组</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; vec2;</span><br></pre></td></tr></table></figure><h2 id="2-set集合（不存在重复元素）"><a class="header-anchor" href="#2-set集合（不存在重复元素）">¶</a>2.set集合（不存在重复元素）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合</span></span><br><span class="line">set&lt;string&gt; country;   <span class="comment">//&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">country.<span class="built_in">insert</span>(<span class="string">&quot;China&quot;</span>);      <span class="comment">//&#123;&quot;China&quot;&#125;</span></span><br><span class="line">country.<span class="built_in">insert</span>(<span class="string">&quot;America&quot;</span>);    <span class="comment">//&#123;&quot;China&quot;,America&quot;&#125;</span></span><br><span class="line"><span class="comment">//如果插入已经存在的元素不会产生任何效果</span></span><br><span class="line">country.<span class="built_in">insert</span>(<span class="string">&quot;China&quot;</span>);      <span class="comment">//&#123;&quot;China&quot;,&quot;America&quot;&#125;  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">country.<span class="built_in">erase</span>(<span class="string">&quot;America&quot;</span>);     <span class="comment">//&#123;&quot;China&quot;&#125;</span></span><br><span class="line"><span class="comment">//如果删除的元素不存在也不会产生任何效果</span></span><br><span class="line">country.<span class="built_in">erase</span>(<span class="string">&quot;Japan&quot;</span>);       <span class="comment">//&#123;&quot;China&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定某元素是否存在</span></span><br><span class="line">country.<span class="built_in">count</span>(<span class="string">&quot;China&quot;</span>);       <span class="comment">//若存在返回1否则返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器 iterator 访问值(类似于vector)</span></span><br><span class="line"><span class="comment">// 注意set集合会自动排序，如若先前插入了2543则会输出2345</span></span><br><span class="line"><span class="keyword">for</span> (set&lt;string&gt;::iterator it=country.<span class="built_in">begin</span>();it!=country.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">      cout &lt;&lt; *it &lt;&lt; endl;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空set</span></span><br><span class="line">set.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用来存结构体，但结构体没法判断顺序需要手动设置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">people</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">people</span>(string _name,<span class="keyword">int</span> _age)</span><br><span class="line">    &#123;</span><br><span class="line">        name=_name;</span><br><span class="line">        age=_age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按照年龄排序</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> people &amp;rhs) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> age &lt; rhs.age;    <span class="comment">//这里直接返回了，如果年龄可能相同那么要判断下如果年龄相同那就用姓名比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;people&gt; s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">people</span>(<span class="string">&quot;bob&quot;</span>,<span class="number">10</span>));s.<span class="built_in">insert</span>(<span class="built_in">people</span>(<span class="string">&quot;alice&quot;</span>,<span class="number">20</span>));s.<span class="built_in">insert</span>(<span class="built_in">people</span>(<span class="string">&quot;linda&quot;</span>,<span class="number">15</span>));</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (set&lt;people&gt;::iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">       cout &lt;&lt; it-&gt;name &lt;&lt;<span class="string">&quot;  &quot;</span>&lt;&lt;it-&gt;age &lt;&lt;endl;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-map字典映射-一对一映射"><a class="header-anchor" href="#3-map字典映射-一对一映射">¶</a>3.map字典映射(一对一映射)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个map</span></span><br><span class="line">map&lt;string,<span class="keyword">int</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">dict[<span class="string">&quot;Tom&quot;</span>]=<span class="number">3</span>;                       <span class="comment">//dict[key]=value,这种遍历时不会排序</span></span><br><span class="line"><span class="comment">//这样遍历时可以通过it-&gt;first(Tom)和it-&gt;second(3)取值</span></span><br><span class="line">dict.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">3</span>));   <span class="comment">//而且遍历时会按key(这里是string)排序  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取元素</span></span><br><span class="line">dict[<span class="string">&quot;Tom&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断关键字是否存在</span></span><br><span class="line">dict.<span class="built_in">count</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取个数</span></span><br><span class="line">dict.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure><h2 id="例题讲解"><a class="header-anchor" href="#例题讲解">¶</a>例题讲解</h2><p>🚩1.n块积木，编号1到n，初始时，第i块放在第i个位置。现在，进行a b操作，每次操作把b位置积木全放到a位置上。输出操作完之后每个位置上的木块。<br>输入:n,m。n代表有n个积木，m代表有m个操作（1≤n≤10000，1≤m≤10000）</p><p>接下来m行是m个操作。如果ab相等则本次不移动木块。</p><p>输出每个位置从下到上的积木编号，如果该位置没有积木，输出一行空行。</p><p>样例输入：</p><p>4 4</p><p>3 1</p><p>4 3</p><p>2 4</p><p>2 2</p><p>样例输出：（为了更直观此处用*表示换行，代码里是按题意）</p><p>/*<br>2 4 3 1*<br>*<br>*</p><p>思路：如果用数组会爆内存(n和m范围都很大而且还要移动)，所以用动态数组，而且用动态数组刚好每一个vec[i]代表一个位置如下图所示</p><p>每个位置放的积木数也可以不确定，通过vec[1][0]、vec[1][1]可以得到对应的数值</p><p>对于每一个ab操作，对vec[b]遍历将里面的积木都push到vec[a]中再清空vec[b]即可</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20210321120147976.png"  alt="在这里插入图片描述"></p><p>🦄代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;    <span class="comment">//n个积木，m个操作</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec[<span class="number">10010</span>];   <span class="comment">//vec[i]相当于一个vector里面可以放若干整数,对应n个位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vec[i].<span class="built_in">push_back</span>(i);  <span class="comment">//c[i]位置放编号为i的积木</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行a b操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(a==b)    <span class="comment">//若相等不进行任何操作</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec[b].<span class="built_in">size</span>(); j++)   <span class="comment">//对于c[b]位置的积木遍历</span></span><br><span class="line">            &#123;</span><br><span class="line">                vec[a].<span class="built_in">push_back</span>(vec[b][j]);    <span class="comment">//将c[b]位置的积木全部push到c[a]位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt;().<span class="built_in">swap</span>(vec[b]);       <span class="comment">//清空c[b]且释放内存</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j!=vec[i].<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                cout&lt;&lt;vec[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">else</span>   </span><br><span class="line">                cout&lt;&lt;vec[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;STL知识点&lt;/h1&gt;
&lt;p&gt;STL，即标准模板库或者泛型库，其包含有大量的模板类和模板函数，是 C++ 提供的一个基础模板的集合，用于完成诸如输入/输出、数学计算等功能。可以理解成动态数组&lt;/p&gt;
&lt;p&gt;优点：举个例子，定义一个数组int a[n]，这种方法必须事先确定</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯-最大子阵(C++详细解释版)</title>
    <link href="https://zss192.github.io/2021/03/19/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%9C%80%E5%A4%A7%E5%AD%90%E9%98%B5-C-%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E7%89%88/"/>
    <id>https://zss192.github.io/2021/03/19/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E6%9C%80%E5%A4%A7%E5%AD%90%E9%98%B5-C-%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A%E7%89%88/</id>
    <published>2021-03-19T11:30:00.000Z</published>
    <updated>2021-03-30T03:46:51.585Z</updated>
    
    <content type="html"><![CDATA[<h1>题目描述</h1><p>给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。</p><p>其中，A的子矩阵指在A中行和列均连续的一块。</p><p>样例说明<br>取最后一列，和为10。<br>数据规模和约定<br>对于100%的数据，1&lt; =n, m&lt; =500，A中每个元素的绝对值不超过5000。</p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入的第一行包含两个整数n, m，分别表示矩阵A的行数和列数。 </span><br><span class="line">接下来n行，每行m个整数，表示矩阵A。 </span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一行，包含一个整数，表示A中最大的子矩阵中的元素和。 </span><br></pre></td></tr></table></figure><p>样例输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3 </span><br><span class="line">-1 -4 3</span><br><span class="line">3 4 -1</span><br><span class="line">-5 -2 8</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>题目在这：<a href="https://www.dotcpp.com/oj/problem1445.html"><strong>题目 1445: [蓝桥杯][历届试题]最大子阵</strong></a></p><h1>题目分析</h1><p>假设现在有个一维数组nums[4]={-1,2,3,-4}。</p><p>如果要求他的最大连续子序列的和，假设max_sum[i]表示以第i个元素结尾的连续子序列的最大和，可以推出max_sum[i]=max(max_sum[i-1]+nums[i],nums[i])</p><blockquote><p>可以理解为比如max_sum[2]它的值为max(max_sum[1]+nums[2],nums[2])，因为必须包含nums[2]，所以如果max_sum[1]&gt;0那肯定加上max_sum[1]最大，而如果max_sum[1]&lt;0那加上他反而更小。所以取这两个的最大值</p></blockquote><p>这是求一维数组的最大子序列和，而题目要求的是二维数组的最大子序列和。</p><p>如果能把题目中求二维变成求一维就好了，其实是可以的。</p><p>我们可以看下面这样一个数组，其中ai表示第i行</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/c1e8bd87984f77d8ef38424afae4e532.png"  alt="image-20210318180509897"></p><p>如果要求它的最大子阵，我们可以变成这样</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/82605d992d320644f9befb595ac61cf7.png"  alt="image-20210318180706949"></p><p>如图所示，可以用一维数组分别表示第一行、第一行加第二行、第一行加第二行加第三行…</p><p>这样求它们每个的最大子序列和，然后其中最大的数值就是题目所求</p><blockquote><p>假设最大子矩阵是右下角那四个的和，那么等效为a2+a3的子序列最大和</p><p>假设最大子矩阵是9、2、-4、1、-1、8左下角那块，它们等效为a1+a2+a3的子序列最大和</p><p>由此我们可以看出无论最大子矩阵是在哪一块，图中红色方框中的10行一定有一行求得的最大子序列的值可以表示它们</p></blockquote><p>这样的话，题目则由求二维数组最大子矩阵的和转变为求图中红色方框那10行哪一行的最大子序列的和最大。我们只要单独求出每一个的最大值，在找到它们的最大值的最大值即可。</p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//定义变量，读入输入的值存入数组，没什么说的</span></span><br><span class="line"> <span class="keyword">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">510</span>];</span><br><span class="line">    <span class="keyword">int</span> temp[<span class="number">510</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;num[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = num[<span class="number">0</span>][<span class="number">0</span>];    <span class="comment">//先将结果其设为第一个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//核心代码</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(temp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(temp));<span class="comment">//数组清零</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面两层循环可以确定从i行到j行即ai+..+aj</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">                temp[k] += num[j][k];<span class="comment">//第一次temp数组存的是a0(i=0,j=0),第二次是存的a0+a1(i=0,j=1)</span></span><br><span class="line">            &#125;<span class="comment">//因为第二次时temp[0]还存着num[0][0]呢即存着第一行的值，加上第二行即a0+a1</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对当前temp一维数组求最大子序列和，第一次是求a0,第二次是求a0+a1</span></span><br><span class="line">            dp[<span class="number">0</span>] = temp[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;m;u++)&#123;</span><br><span class="line">                dp[u] = <span class="built_in">max</span>(dp[u<span class="number">-1</span>]+temp[u],temp[u]);<span class="comment">//一维数组求最大子序列和</span></span><br><span class="line"><span class="comment">//如果这次求得的和大于目前最大值则更新</span></span><br><span class="line">                <span class="keyword">if</span>(dp[u]&gt;result)</span><br><span class="line">                    result = dp[u];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line"><span class="comment">//  temp数组每次存的值如下</span></span><br><span class="line"><span class="comment">//  -1 -4  3   a0</span></span><br><span class="line"><span class="comment">//  2  0   2   a0+a1</span></span><br><span class="line"><span class="comment">// -3  -2 10   a0+a1+a2</span></span><br><span class="line"><span class="comment">// 3  4  -1 a1</span></span><br><span class="line"><span class="comment">// -2  2   7 a1+a2</span></span><br><span class="line"><span class="comment">// -5 -2  8 a2</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考</h1><p><a href="https://blog.csdn.net/Jaster_wisdom/article/details/79671736">蓝桥杯-最大子阵 动态规划</a></p><p><a href="https://frostime.github.io/2019/06/02/%E6%9C%80%E5%A4%A7%E5%AD%90%E9%98%B5%E5%92%8C/">最大子阵和</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;题目描述&lt;/h1&gt;
&lt;p&gt;给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。&lt;/p&gt;
&lt;p&gt;其中，A的子矩阵指在A中行和列均连续的一块。&lt;/p&gt;
&lt;p&gt;样例说明&lt;br&gt;
取最后一列，和为10。&lt;br&gt;
数据规模和约定&lt;br&gt;
对于100%的数据，</summary>
      
    
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/categories/%E7%AE%97%E6%B3%95-C/"/>
    
    
    <category term="算法(C++)" scheme="https://zss192.github.io/tags/%E7%AE%97%E6%B3%95-C/"/>
    
  </entry>
  
  <entry>
    <title>deepin使用记录</title>
    <link href="https://zss192.github.io/2020/10/28/deepin%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://zss192.github.io/2020/10/28/deepin%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-28T06:59:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>这些笔记为我在用deepin 15.11时总结的一些知识点。包括一些技巧还有遇到的一些问题及解决方法。文章长期更新，希望能帮助到有需要的小伙伴。</p><h1>目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin 可执行文件，可在终端输入即可执行</span><br><span class="line">&#x2F;etc  配置文件</span><br><span class="line">&#x2F;home    除root用户的其他用户的家目录</span><br><span class="line">&#x2F;tmp     临时文件，系统运行时产生的临时文件</span><br><span class="line">&#x2F;mnt     外接设备需要挂载时，就挂在在这个目录</span><br><span class="line">&#x2F;opt 用户自己下载的应用存在这(个人习惯)</span><br></pre></td></tr></table></figure><h1>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzPr 源文件 目标文件//快速复制大文件</span><br><span class="line">cat test1.txt test2.txt &gt; test.txt //合并test1和test2到<span class="built_in">test</span>,比如可制作马</span><br><span class="line">df -h//以较高可读性查看磁盘空间</span><br><span class="line">管道 |：ls / | grep abc//查询根目录下包含“abc”的文件，后面是在前面输出的基础上过滤的</span><br><span class="line">top //动态展示进程占得资源，按M(MEM)表示按内存从高到低排列，P表示按CPU使用率从高到低排列</span><br><span class="line">find 路径范围 -name 文件名称  //如find /etc -name *.conf</span><br><span class="line">ps -ef//查看进程信息，如查询appache的httpd服务是否开启，ps -ef | grep httpd</span><br><span class="line">service 服务名 start/stop/restart//如service httpd start</span><br><span class="line"><span class="built_in">kill</span> -9 进程id//如<span class="built_in">kill</span> 29867,进程id可通过top或ps -ef获得</span><br><span class="line">killall 进程名称//如killall httpd</span><br><span class="line">ifconfig//常用于查看ip信息，不一定只有两个</span><br><span class="line">man 指令名//用于查询某指令的用法，如man mv</span><br><span class="line">tar -zxvf 压缩包//解压压缩包</span><br><span class="line">sudo dpkg -i test.deb//安装deb包</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:12333&quot;</span>//终端暂时使用代理(推荐用proxychains)</span><br><span class="line">chown -R 用户名 文件夹//更改指定文件夹下所有文件所有者，</span><br><span class="line">zip -r myFile.zip ./*  //将当前所有文件压缩成zip包</span><br></pre></td></tr></table></figure><h1>使用技巧</h1><ul><li><p>使用<strong>Ctrl+u删除光标前所有内容</strong>，Ctrl+k删除光标后所有内容</p></li><li><p>rm ~/.config/SweetScape/010\ Editor.ini  可无限试用010editor</p></li><li><p>Navicat15破解：<a href="https://www.yuque.com/fank243/devops/crzwuq">点我查看</a></p></li><li><p><sub>/.local/share/applications/wine/Programs/下rm掉多余的wine软件菜单项，再到</sub>/.config/menus/applications-merged/下去清理多余的垃圾。</p></li><li><p>crontab可定时执行脚本</p></li><li><p>安装mysql:<a href="https://wangxin1248.github.io/linux/2018/07/ubuntu18.04-install-mysqlserver.html">https://wangxin1248.github.io/linux/2018/07/ubuntu18.04-install-mysqlserver.html</a></p></li><li><p>终端暂时使用代理 proxychains + 命令</p></li><li><p>格式化U盘为ext4格式(timeshift备份到U盘)</p><ul><li><p># 该命令查看你的设备<br>lsblk -f</p><p># 卸载U盘</p><p>umount 你的U盘设备(如/dev/sdb1)</p><p># 格式化成ext4格式<br>mkfs.ext4 你的U盘设备(如/dev/sdb1)，之后等就行了</p></li></ul></li><li><p>浏览器快捷键：</p><p><strong>Ctrl + L</strong>   地址栏搜索</p><p><strong>Ctrl + T</strong>   打开新标签页；</p><p><strong>Ctrl + W</strong>  关闭当前标签页；</p><p><strong>Ctrl + Shift + W</strong>  关闭整个浏览器</p><p><strong>Ctrl + 数字键 1 至 8</strong> 可以按标签页顺序定位；</p><p><strong>空格键</strong> 可以向下滚动网页，<strong>Shift + 空格键</strong> 则是向上。</p></li></ul><h1>常见问题解决方案</h1><p>1.将一个py文件添加到bash直接在终端输入不用切换到想用目录</p><p>ln -s /opt/tools/dirsearch/dirsearch.py /bin/dirsearch   //在终端输入dirsearch即可运行这个py文件</p><p>2.deepin中默认的编辑器用dedit(ded按tab即可)</p><p>3.普通用户使用sudo免密码：dedit /etc/sudoers 修改your_user_name ALL=(ALL) NOPASSWD: ALL</p><p>4.sudoers文件修改错误导致无法使用sudo：pkexec 代替sudo更改sudoers文件</p><p>5.为bat文件创建含图标快捷方式：在/usr/bin下创建如burpsuite把bat文件复制粘贴(注意路径换成绝对路径)，这样就可在命令行直接运行bat文件，然后用桌面文件创建工具创建快捷方式即可</p><p>6.运行wine报错程序错误：删除~/.wine目录，然后运行winecfg（会重新生成.wine）</p><p>7.安装wine-mono和wine-gecko可去官网：<a href="https://dl.winehq.org/wine/%E5%AE%89%E8%A3%85msi%E6%96%87%E4%BB%B6%EF%BC%8C%E7%A7%BB%E5%8A%A8%E5%88%B0/home/%E7%94%A8%E6%88%B7%E5%90%8D/.wine%E7%9B%AE%E5%BD%95%E4%B8%8B">https://dl.winehq.org/wine/安装msi文件，移动到/home/用户名/.wine目录下</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine  msiexec /i  wine-mono-4.9.4.msi  //例如安装wine-mono</span><br></pre></td></tr></table></figure><p>8.qq无法加载图片</p><p>关闭ipv6</p><p>9.tmp下的mysql.sock文件被删，导致navicat打不开本地数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server start  //启动mysql，重新生成mysql.sock文件</span><br></pre></td></tr></table></figure><p>10.若有时pip安装失败可尝试在加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i http://pypi.douban.com/simple/ --trusted-host [pypi.douban.com](http://pypi.douban.com/)</span><br></pre></td></tr></table></figure><p>11.鼠标变成十字架，无法使用鼠标</p><p>原因：在shell终端误输入了import命令</p><p>解决方法：ps -aux | grep import    找到对应pid,kill -9 pid 即可</p><p>12.运行py文件鼠标变十字架，无法使用鼠标</p><p>打开py文件，在最上方加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3     //指定由哪个解释器来执行脚本</span></span><br></pre></td></tr></table></figure><p>原因：python2和python3不兼容，加上这个就在输入./test.py默认由python3执行</p><p>13.应用选择默认程序页面没有我们想要的应用</p><p>打开/usr/share/applications找到比如typora</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加一行 MimeType&#x3D;*&#x2F;*  即可</span><br></pre></td></tr></table></figure><p>14.telegram不要使用2.1.5的版本会出现无法输入中文的问题，使用2.1.4即可解决</p><p>15.更新最新版的QQ：将Windows的C:\Program Files (x86)\Tencent\QQ\下的文件覆盖~/.deepinwine/Deepin-QQ/drive_c/Program\ Files/Tencent/QQ/即可（先备份）</p><p>16.npm太慢可以用cnpm（镜像，第一次用要下载）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>以后都可以用cnpm代替npm了</p><p>17.百度网盘无法登录</p><p>编辑百度网盘的图标把Exec内容前加上sudo(用管理员身份打开)</p><p>如果用的UTools，修改过图标后重启，UTools里打开才是修改后的</p><p>18.解决QQ崩溃问题(可减少崩溃次数)：</p><p>替换dwrite.dll，<a href="https://bbs.deepin.org/forum.php?mod=attachment&amp;aid=OTg1MTJ8NjBlYzc3NTB8MTYwMTEwMzQxNnwwfDE5NjE4OQ%3D%3D">点我下载</a>，解压后重命名为dwrite.dll然后替换~/.wine/drive_c/windows/system32/下的dwrite.dll。</p><p>之后在winecfg里面设置函数库添加dwrite，同时模拟windows版本只能设置成xp</p><p>19.无法弹出U盘(有程序正在使用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df -h查看挂载点，例如&#x2F;dev&#x2F;sdb1</span><br><span class="line">sudo fuser -mv &#x2F;dev&#x2F;sdb1查看U盘的uid，杀死这个进程</span><br><span class="line">kill -9进程号</span><br><span class="line">正常弹出U盘即可</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;这些笔记为我在用deepin 15.11时总结的一些知识点。包括一些技巧还有遇到的一些问题及解决方法。文章长期更新，希望能帮助到有需要的小伙伴。&lt;/p&gt;
&lt;h1&gt;目录结构&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://zss192.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://zss192.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git使用方法</title>
    <link href="https://zss192.github.io/2020/10/16/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://zss192.github.io/2020/10/16/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2020-10-16T13:45:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>常用代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init    &#x2F;&#x2F;初始化仓库,若是用的clone则不需要这步</span><br><span class="line">git config --global user.name &quot;账户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱号&quot;</span><br><span class="line">git config --global --list&#x2F;&#x2F;查看全局配置(设置的邮箱等)</span><br><span class="line">git remote add origin 远程库地址 &#x2F;&#x2F;关联到远程库</span><br><span class="line"></span><br><span class="line">日常使用步骤</span><br><span class="line">git add .&#x2F;&#x2F;把文件添加到版本库中</span><br><span class="line">git commit -m &quot;test&quot;&#x2F;&#x2F;把文件提交到仓库。引号内为提交说明</span><br><span class="line">git pull origin master&#x2F;&#x2F;把远程仓库的master分之拉到本地</span><br><span class="line">git push origin master&#x2F;&#x2F;把本地文件推到远程仓库master分支</span><br></pre></td></tr></table></figure><h1>速查表</h1><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/c3564e1d2318110e06be04b97fdf8fd0.png"  alt="img"></p><h1>注意事项</h1><p>1.不到万不得已不要使用强制提交(问就是曾和学长一起开发系统用过，然后把更新记录全部覆盖了，虽然代码没什么大改动，但是提交记录被全部覆盖不利于后期维护)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin master　如果本地比远程仓库版本低，会提醒先git pull更新，但仍要坚持提交可用这个强制提交</span><br></pre></td></tr></table></figure><p>2.github添加了ssh密钥使用ssh -T git@github.com测试报错？</p><p>事实证明重启即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;常用代码&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客部署到服务器</title>
    <link href="https://zss192.github.io/2020/10/15/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://zss192.github.io/2020/10/15/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-10-15T05:14:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>准备工作</h1><ul><li>本地hexo已配置好</li><li>个人系统：deepin15.11</li><li>服务器：Ubuntu 18.04</li></ul><h1>开始吧</h1><h2 id="安装git和nginx"><a class="header-anchor" href="#安装git和nginx">¶</a>安装git和nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install git nginx</span><br></pre></td></tr></table></figure><h2 id="配置nginx"><a class="header-anchor" href="#配置nginx">¶</a>配置nginx</h2><p><strong>nginx version: nginx/1.14.0 (Ubuntu)</strong></p><blockquote><p>在此说明nginx版本是因为我曾试了网上很多nginx配置但都没生效(原谅我只用过Apache)，后来搜了具体版本的配置才生效。所以日后还是要养成搜的时候加上版本的习惯。</p></blockquote><p>我的博客目录在/opt/hexo</p><p>当然你也可以自己设置，之后的步骤里更换成你的目录就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/hexo</span><br></pre></td></tr></table></figure><p>编写 nginx 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/blog.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 ;</span><br><span class="line">        root /opt/hexo;</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line">        server_name 47.93.34.7; #有域名就填域名，也可填服务器公网ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>这个时候我们已经把默认站点更换为/opt/hexo，你可以在相应目录下新建一个文件访问ip查看是否生效。</p><h2 id="配置-Git-Hooks"><a class="header-anchor" href="#配置-Git-Hooks">¶</a>配置 Git Hooks</h2><h3 id="创建-Git-裸仓库"><a class="header-anchor" href="#创建-Git-裸仓库">¶</a>创建 Git 裸仓库</h3><p><strong>blog.git</strong>作为远程 Git 仓库，Hexo 在本地生成的博客静态文件可以通过 push 与其同步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/blog.git &amp;&amp; cd ~/blog.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure><h3 id="配置-Hooks-脚本"><a class="header-anchor" href="#配置-Hooks-脚本">¶</a>配置 Hooks 脚本</h3><p><strong>post-receive</strong>脚本将在<strong>blog.git</strong>仓库接收到 push 时执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./hooks/post-receive</span><br></pre></td></tr></table></figure><p>脚本非常简单，删除原有的**/opt/hexo目录，然后从<strong>blog.git</strong>仓库 clone 新的博客静态文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">rm -rf /opt/hexo</span><br><span class="line">git clone /root/blog.git /opt/hexo</span><br></pre></td></tr></table></figure><p>给<strong>post-receive</strong>脚本执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x .&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure><h2 id="修改本地文件"><a class="header-anchor" href="#修改本地文件">¶</a>修改本地文件</h2><p>修改本地博客根目录下的_config.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: root@你的公网ip:blog.git</span><br></pre></td></tr></table></figure><p>如下图所示</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201014235835414.png"  alt="image-20201014235835414"></p><h2 id="免密推送代码"><a class="header-anchor" href="#免密推送代码">¶</a>免密推送代码</h2><p>前提是本地有ssh密钥(可用cat ~/.ssh/id_rsa.pub查看是否存在)</p><p>若没有ssh密钥则要生成ssh key，按3个回车即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>然后把公钥推到服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub | ssh [username]@[remote_host] <span class="string">&quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：cat ~&#x2F;.ssh&#x2F;id_rsa.pub | ssh root@47.93.34.7 &quot;mkdir -p ~&#x2F;.ssh &amp;&amp; cat &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys&quot;</span><br></pre></td></tr></table></figure><h2 id="部署博客"><a class="header-anchor" href="#部署博客">¶</a>部署博客</h2><p>在本地博客根目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>访问公网ip即可看到博客，若是配置的域名不要忘了去解析域名(注意端口是否开放)。</p><h1>写在最后</h1><p>以上就是hexo博客部署到服务器上的全部过程，之所以写这篇博客是之前白嫖了个服务器部署了博客，过期之后我又买了个服务器还得去搜相关操作比较麻烦。</p><p>在此记录下相关操作方便日后需要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;准备工作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本地hexo已配置好&lt;/li&gt;
&lt;li&gt;个人系统：deepin15.11&lt;/li&gt;
&lt;li&gt;服务器：Ubuntu 18.04&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;开始吧&lt;/h1&gt;
&lt;h2 id=&quot;安装git和nginx&quot;&gt;&lt;a class=</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>hexo迁移至新电脑</title>
    <link href="https://zss192.github.io/2020/10/12/hexo%E8%BF%81%E7%A7%BB%E8%87%B3%E6%96%B0%E7%94%B5%E8%84%91/"/>
    <id>https://zss192.github.io/2020/10/12/hexo%E8%BF%81%E7%A7%BB%E8%87%B3%E6%96%B0%E7%94%B5%E8%84%91/</id>
    <published>2020-10-12T11:18:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>由于想在实验室电脑上也可以用hexo更新博客，特此记录下相关操作</p><p>相关配置：</p><ul><li>系统：deepin15.11</li><li>已配置好git</li></ul><h1>安装 node、npm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装 nodejs和npm </span><br><span class="line">sudo apt install node</span><br><span class="line"></span><br><span class="line">检测是否安装好</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h1>拷贝文件</h1><p>将原来的博客文件拷贝过来即可，例如我的文件件如下所示</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201012190547411.png"  alt="image-20201012190547411"></p><h1>安装hexo和相关模块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br><span class="line">sudo npm install</span><br></pre></td></tr></table></figure><p>接下来就可正常使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  &#x2F;&#x2F;清除缓存</span><br><span class="line">hexo g  &#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo d    &#x2F;&#x2F;推到远程仓库</span><br></pre></td></tr></table></figure><h1>可能遇到的问题</h1><p>我在用hexo d的时候一直提示权限不足。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201012191145211.png"  alt="image-20201012191145211"></p><p>但我github已经添加了SSH密钥，一番检查后发现我的远程仓库不仅有github还有coding，虽然添加了github的SSH密钥，但没添加coding的，导致一直提示权限不足。查看远程仓库在根目录下的_config.yml</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201012191431834.png"  alt="image-20201012191431834"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;由于想在实验室电脑上也可以用hexo更新博客，特此记录下相关操作&lt;/p&gt;
&lt;p&gt;相关配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统：deepin15.11&lt;/li&gt;
&lt;li&gt;已配置好git&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装 node、npm&lt;/h1&gt;
</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>校园网免认证</title>
    <link href="https://zss192.github.io/2020/10/10/%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%85%8D%E8%AE%A4%E8%AF%81/"/>
    <id>https://zss192.github.io/2020/10/10/%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%85%8D%E8%AE%A4%E8%AF%81/</id>
    <published>2020-10-10T13:12:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><blockquote><p>全网首发，仅适用于河南大学，转载前请留言告知。CSDN:<a href="https://blog.csdn.net/zss192/article/details/109004166">点我查看</a></p></blockquote><p>相信大家是不是有这样的经历，每次去综合楼连上校园网后都会跳到认证页面。它长这个亚子</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010161459259.png"  alt="image-20201010161459259"></p><p>更有甚者根本不自动跳到认证页面，频繁的验证着实麻烦。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/0855.png"  alt="1"></p><p>那么有没有一种方法让校园网和平常用的无线网一样自动连接后直接就可以使用呢？？</p><p><strong>恭喜你找到了宝藏</strong>，你只需要简单的几个步骤就可以解决这个问题。</p><h1>简单的亿步</h1><p>按往常一样连接上校园网认证，然后再打开那个认证界面，<a href="http://172.22.255.18/">点我查看</a>。</p><p>点击图中所示的自服务</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162140659.png"  alt="image-20201010162140659"></p><p>账号密码和认证页面一样，登录进去</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162237466.png"  alt="image-20201010162237466"></p><p>点击左侧导航栏的用户–&gt;无感知认证</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162355373.png"  alt="image-20201010162355373"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162416117.png"  alt="image-20201010162416117"></p><p>点击增加MAC地址即可</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162504605.png"  alt="image-20201010162504605"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010162522215.png"  alt="image-20201010162522215"></p><p>最最关键的一步，添加完后别忘了开启无感知认证，开启后是这个亚子。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/qq_pic_merged_1602335104702.jpg"  alt="qq_pic_merged_1602335104702"></p><h1>MAC地址查看方法</h1><p>那么问题来了，MAC地址在哪看呢？？？</p><h2 id="电脑端"><a class="header-anchor" href="#电脑端">¶</a>电脑端</h2><p>Win + R 快捷键调出“运行”对话框，输入“cmd”，确定，打开“命令提示符”窗口，输入命令 <strong>ipconfig /all</strong> ，回车运行。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20201010163445429.png"  alt="image-20201010163445429"></p><p>就是上图所述，但是需要把&quot;-“换成”:&quot;</p><p>例如MAC：a1-b2-c3-d4-e5-f6那么我们输入a1:b2:c3:d4:e5:f6即可</p><h2 id="手机端"><a class="header-anchor" href="#手机端">¶</a>手机端</h2><p>如果是手机的话一般在设置里面的系统–&gt;关于手机–&gt;状态信息里面，它长这个亚子</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/39CB2F22459305D07889EF403613D9E7.jpg"  alt="39CB2F22459305D07889EF403613D9E7"></p><blockquote><p>以上是荣耀手机查看MAC地址方法，其他手机类似。</p></blockquote><h1>结语</h1><p>至此就大功告成了，以后你就可以享受一到综合楼手机直接可以上校园网的快感了</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/16023354244172.png"  alt="16023354244172"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;全网首发，仅适用于河南大学，转载前请留言告知。CSDN:&lt;a href=&quot;https://blog.csdn.net/zss192/article/details/109004166&quot;&gt;点我查看&lt;/a&gt;&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zss192.github.io/2020/09/24/deepin%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zss192.github.io/2020/09/24/deepin%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-09-24T11:56:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>因为实验室电脑重装了deepin系统，想把笔记本上备份下直接恢复到实验室台式机上，但是数据恢复了，启动项也覆盖了，整了一两天也没整好，卒。</p><p>后尝试把用户目录下的.config文件夹下软件配置直接copy过来发现可行，这样不用再配置软件了。</p><p>本篇文章仅为个人笔记，方便日后重装系统免去配置软件等步骤。</p><h1>迁移具体操作</h1><blockquote><p>进行数据迁移前建议备份下原文件或者用timeshift备份下系统</p></blockquote><p>个人安装的软件一般在opt目录下，把这些软件直接copy到台式机上的opt目录下，如sublime_text</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/5dd31e01b012c465c92c2adcfb1bb074.png"  alt="image-20200920112036363"></p><p>然后把笔记本下的.config目录下的sublime对应的文件夹copy到台式机上对应文件夹即可</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/7127f51005fd5ae1256545151abee587.png"  alt="image-20200920112109178"></p><p>然后我们打开sublime，会惊奇的发现下载的插件还有配置什么的都还在</p><blockquote><p>注意在opt目录下的软件需要先创建个快捷图标(y=用桌面文件创建工具即可)</p></blockquote><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/ae9bffee4bbeaf6156825c060ebbb0ed.png"  alt="image-20200920112446748"></p><p>其他软件同理，只需把.config下文件copy过来即可，注意copy过来之前不要打开软件否则可能会覆盖你copy过来的文件导致打开软件还需要配置</p><h1>deepin其它配置</h1><p>安装好deepin后还需要很多配置</p><p>1.首先在设置里更新下系统然后把智能镜像源切换成国内的源</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/dce0a17cef5e42ee5712ae8bce48882e.png"  alt="image-20200920112804733"></p><p>2.把Windows下的C:\Windows\Fonts文件夹复制到deepin下。打开deepin字体安装器，直接把Fonts文件夹拖进去即可。然后去设置里更改下字体</p><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/img_convert/74567fb7803add9ec6ff04056712b30b.png"  alt="image-20200920113329172"></p><p>3.由于经常要为一些可执行文件创建桌面图标，安装下一个桌面文件创建软件。<a href="https://blog.csdn.net/zss192/article/details/104427330">点我下载</a></p><p>4.谷歌浏览器登录账号同步即可。若浏览器字体不清楚可以</p><ul><li>用stylus插件，<a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne?utm_source=chrome-ntp-icon">点我下载</a>。然后下载思源黑体即可，<a href="https://userstyles.org/styles/123597/theme">点我下载</a>。这样会强制渲染浏览器字体为思源黑体。</li><li>全部设置字体为微软雅黑（外观-&gt;自定义字体）</li></ul><p>5.普通用户使用sudo免密码：dedit /etc/sudoers 修改your_user_name ALL=(ALL) NOPASSWD: ALL</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;因为实验室电脑重装了deepin系统，想把笔记本上备份下直接恢复到实验室台式机上，但是数据恢复了，启动项也覆盖了，整了一两天也没整好，卒。&lt;/p&gt;
&lt;p&gt;后尝试把用户目录下的.config文件夹下软件配置直接copy过来发现可行，这样不用再配置软</summary>
      
    
    
    
    <category term="Linux" scheme="https://zss192.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://zss192.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>互联网+反爬虫核心技术说明</title>
    <link href="https://zss192.github.io/2020/07/03/%E4%BA%92%E8%81%94%E7%BD%91-%E5%8F%8D%E7%88%AC%E8%99%AB%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%B4%E6%98%8E/"/>
    <id>https://zss192.github.io/2020/07/03/%E4%BA%92%E8%81%94%E7%BD%91-%E5%8F%8D%E7%88%AC%E8%99%AB%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%B4%E6%98%8E/</id>
    <published>2020-07-03T04:56:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>现有爬虫缺点</h1><p>现有反爬虫技术缺点(根据这个图片手动画个这样的图)</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200703123131973.png"  alt="image-20200703123131973"></p><p>现有的网络爬虫检测和防御方案，通过检测用户(包括网络爬虫)的访问频率,行为模式等,进行对恶意网络爬虫的识别。<br>这种方案的弊端是，网络爬虫的编写者有足够的时间和精力，针对静态的HTML(而咱们的项目就是让静态页面变成动态的)。</p><h1>本项目实现过程及优点</h1><p>Web页面动态化，即改变HTML及其他静态资源原本的静态、单一、确定等特性通过动态加密和动态陷阱技术将静态资源进行动态化处理，消除因静态所带来的易匹配、易批量化请求的缺陷。另外本项目采用自适应调整动态频率降低因动态化带来的系统开销。</p><blockquote><p>简单来说就是用动态加密和动态陷阱进行动态处理，为避免过度消耗系统资源用自适应调整动态频率来调整</p></blockquote><h2 id="恶意爬虫主动防御流程图"><a class="header-anchor" href="#恶意爬虫主动防御流程图">¶</a>恶意爬虫主动防御流程图</h2><blockquote><p>把这个流程图加到PPT中(不要放图片，手动画一个流程图)</p></blockquote><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200704103929986.png"  alt="image-20200704103929986"></p><h2 id="动态加密"><a class="header-anchor" href="#动态加密">¶</a>动态加密</h2><p>用动态加密的方式对静态属性进行动态加密处理，使得每次响应的HTML代码中原有的HTML静态属性发生动态变化，且具有不可逆向和不可预测性，增大了爬虫编写过程前期分析阶段的难度。从而主动地将恶意爬出限制在分析阶段，有效的保障Web应用的安全性和服务质量。</p><h3 id="实现过程"><a class="header-anchor" href="#实现过程">¶</a>实现过程</h3><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200704102711974.png"  alt="image-20200704102711974"></p><p>(1)：首先，抽取 HTML 页面中待加密的标签，记为SA；为了能够动态的进行加密，选择密钥串 S 平均切分，得到 SFront 和 SLast</p><p>(2)：利用随机数生成算法生成随机序列 R ，替换原密钥串中的后半部分SLast ，得到 S *，即为动态密钥</p><p>(3)：使用 Rijndael 加密算法对静态标签 SA 进行加密得到密文的后半部分 DLast</p><p>(4)：随机序列R和和密钥串S后半部分SLast 进行异或得到密文的前半部分 DFront</p><p>(5)：组合DFront 和 DLast 得到加密后的动态化 HTML 标签</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200704103302496.png"  alt="image-20200704103302496"></p><p>(6)：发生请求时，先提取 HTML 代码中的动态化标签D ，将其平均切分得到 DFront DLast</p><p>(7)：从数据库中读取该标签所对应的密钥串 S ，平均切分得到SFront 和 SLast</p><p>(8)：DFront和和密钥串S后半部分SLast 进行异或得到随机序列 R</p><p>(9)：SFront和随机序列R组合获取动态密钥 S *</p><p>(10)：用 Rijndael 解密即可得到原来的静态 HTML标签 SA</p><h2 id="动态陷阱"><a class="header-anchor" href="#动态陷阱">¶</a>动态陷阱</h2><p>此外，利用动态陷阱技术，动态陷阱的目标是动态地加入隐藏 DOM 树节点，消除 DOM 树结构导致的静态路径问题，使HTML在动态加密静态属性之后动态混淆DOM层级关系从而避免利用xPath等selector方式进行精准定位。</p><blockquote><p>例如在路径 ’/html/body/div[5]/dl/dd/ul/li[7]/div[2]/div[1]/a’中添加任意节点都会改变指向当前 a节点的路径</p></blockquote><h3 id="实现过程-v2"><a class="header-anchor" href="#实现过程-v2">¶</a>实现过程</h3><p>1.对于插入点的选取：根据设定需要防护的内容首先找到该内容所处 节点的路径，DOM 树节点的精准路径会因为该节点的先辈节点和前驱同胞节点的增减而变化，故选取插入点的方式便是在其先辈节点中进行插入或在其前面插入同胞节点。</p><p>2.对于插入内容选取：首先，插入的 DOM 节点均为 HTML 中的合法节点即可满足不影响代码正常执行；动态插入的 节点中不包含内容且不与已有节点产生冲突即可满足不影响页面显示；满足以上两点的 tag 类型可以自行构造，因此满足不可预测性。</p><p>3.基于梅森旋转算法的插入机制：插入机制通过随机选择的方式从插入点和插入内容中进行选取，为了能够提升随机性和不可预测 性，需要对插入位置和插入内容进行随机选择，用DOM树的层级结构的相对位置，消除 DOM 路径的 单一性和可匹配性。</p><h2 id="自适应调整动态频率"><a class="header-anchor" href="#自适应调整动态频率">¶</a>自适应调整动态频率</h2><p>动态的改变就会给系统带来负面影响，影响系统的响应时间，因此选取一个合理的跳变策略降低因动态化带来的系统开销。</p><h3 id="实现过程-v3"><a class="header-anchor" href="#实现过程-v3">¶</a>实现过程</h3><p>定义系统中当前剩余性能值为 curState，计算方法如下，以此来衡量当前系统整体剩余能力值，考虑到实际情况，当其中任一参数值小于0.1 时，代表该项指标已经过载，此时 curState 整体值应该小于 0.1，其中α=0.5，β=0.3 以及γ=0.2</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200704110031794.png"  alt="image-20200704110031794"></p><p>如式 (13) 所示，定义当前的跳变频率为hopFrequency,当系统性能现在状态值小于 0.35 时，频率可以动态增加；当目前系统状态值处于 0.25~ 0.35 时，此时为最佳状态，这时应该保持现有的变换频率；当目前系统性能值小于 0.2时，此时系统状态处于饱和状态，应该动态的减慢跳变的频率</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;现有爬虫缺点&lt;/h1&gt;
&lt;p&gt;现有反爬虫技术缺点(根据这个图片手动画个这样的图)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/&quot; class=&quot;lazyload&quot; data-src=&quot;https://cdn.jsdelivr.net/gh/zss192/Typora-notes@</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>密码学题型速记</title>
    <link href="https://zss192.github.io/2020/06/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E9%A2%98%E5%9E%8B%E9%80%9F%E8%AE%B0/"/>
    <id>https://zss192.github.io/2020/06/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E9%A2%98%E5%9E%8B%E9%80%9F%E8%AE%B0/</id>
    <published>2020-06-28T09:36:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>本篇文章根据老师给的重点有针对性的快速复习。</p><p>对于河南大学的学弟学妹们，如果你们任课老师是袁老师的话，他会给复习要点，跟着复习要点有针对性的复习就行。</p><h1>判断题2*5</h1><ul><li>题型太杂无法预测，可能考PPT黄色或黑色部分的内容</li></ul><h1>简答题5*6</h1><h2 id="范围"><a class="header-anchor" href="#范围">¶</a>范围</h2><ul><li>清楚信息安全专业学习密码学的原因</li><li>掌握流密码的基本思想</li><li>理解分组密码的CBC工作模式，能够画出该模式的加密示意图</li><li>理解弱单向函数与强单向函数的定义</li><li>能够知道5种密码学新方向或新技术(写出来5个就行)</li><li>第六个可能是标黄的也可能是标黑的</li></ul><h2 id="习题"><a class="header-anchor" href="#习题">¶</a>习题</h2><p>1.==清楚信息安全专业学习密码学的原因==   （非标准答案）（==必考！==）</p><p>答：信息在社会中的地位和作用越来越重要，而其安全也愈发重要，而密码学是保障信息安全的核心技术。密码学已渗透到我们日常生活各个方面。比如公钥密码技术用于数字签名，认证服务，没有它，常用的网上支付系统就无法存在。还有一些重要的用户登录系统，手机通信中的信息加密等也依赖密码学。信息安全专业学习密码学有利于学生了解如何保障信息的安全和基本思想的建立。</p><p>2.==流密码的基本思想==：  (==必考！==)</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200616215215527.png"  alt="image-20200616215215527"></p><p>3.==CBC工作模式为==：它一次对一个明文分组(8个字节一组)加密，每次加密使用同一密钥，加密算法的输入是当前明文分组和前一次密文分组的异或，因此加密算法的输入不会显示出这次的明文分组之间的固定关系，所以重复的明文分组不会在密文中暴露出这种重复关系                   （==必须背会！==）</p><p>==CBC模式加解密示意图== （==必考！==）</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614163017246.png"  alt="image-20200614163017246" style="height:450px" /><p>加密: C<sub>i</sub>= E<sub>k</sub>[P<sub>i</sub>⊕C<sub>i-1</sub>] (可认为C<sub>0</sub>=IV)         解密:P<sub>i</sub>= D<sub>K</sub>[C<sub>i</sub>]⊕C<sub>i-1</sub></p><blockquote><p>IV初始向量与第一个明文分组异或，应像密钥一样被保护。该模式能够获得保密性也可认证，适合加密64比特的消息</p></blockquote><p>4.==弱单向函数和强单向函数==            （==必考！==）</p><p>单向函数：已知h，求使得H(x)=h的x在计算上是不可行的。</p><p>已知x，找出y (y≠x) 使得H(y)=H(x)在计算上是不可行的，若单向函数满足这种性质则称其为弱单向函数            （==必须会背！==）</p><p>找出任意两个不同的输入x、y，使得H(x)=H(y)在计算上是不可行的，若单向函数满足这种性质则称其为强单向函数                   （==必须会背！==）</p><blockquote><p>已知一个另找一个使得H函数相等是弱单向，任意给倆使其H函数相等是强单向（看谁单的很）</p></blockquote><p>5.写出5个密码学新方向或新技术</p><p>身份基加密(IBE)、属性基加密(ABE)、全同态加密、动态加密、可搜索加密</p><h1>计算题10*4</h1><h2 id="范围-v2"><a class="header-anchor" href="#范围-v2">¶</a>范围</h2><ul><li>能够根据给定的一个字节a，给定的AES仿射变换(*)和不可约多项式m(x)，求出字节a在AES S盒中字节代替变换的结果(需要自己求逆,自己试试就出来了)</li><li>能够根据RSA算法进行加密与解密计算<ul><li>a*b (mod q) = a (mod q) * b (mod q)</li><li>φ(n) = φ§*φ(q) = (p-1)*(q-1)</li></ul></li><li>能够使用ElGamal数字签名体制，进行签名与验证计算<ul><li>a*b (mod q) = a (mod q) * b (mod q)</li></ul></li><li>能够基于D-H密钥交换协议计算生成通信双方的共享密钥</li></ul><h2 id="习题-v2"><a class="header-anchor" href="#习题-v2">¶</a>习题</h2><p>1.==对字节a=1011  0110字节替代变换，设a的逆为a<sup>-1</sup>==                 （ ==必考！==）</p><p>答：先求a的逆，再用仿射变换即可</p><p>:one: 由a得(x<sup>7</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>2</sup>+x)a<sup>-1</sup> ≡ 1(mod x<sup>8</sup>+x<sup>4</sup>+x<sup>3</sup>+x+1)</p><p>所以a<sup>-1</sup>=x<sup>6</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>3</sup>             即0111 1000     （二进制对应位数有1就代表有x的那一次方）</p><blockquote><p>根据老师给的考试要点，仿射变换和m(x)题目会给出，a的逆试试就出来了</p><p>a*a<sup>-1</sup>即1011 0110*0111 1000 = 1101 0110 0100 00</p><p>a*a<sup>-1</sup> mod m(x)：1101 0110 0100 00 % 1000 1101 1(m(x)) = 1</p><p>考试时试试1的二进制，2的二进制，3的二进制，和a相乘%m(x)看是否为1</p></blockquote><p>:two: 使用仿射变换   （注意要用a的逆而且注意x的顺序从下往上读）</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/QQ%E5%9B%BE%E7%89%8720200614210639.jpg"  alt=""></p><blockquote><p>注意是模2加，即只有0和1</p></blockquote><p>即(0100 1110)<sub>2</sub>=(4E)<sub>16</sub>                 注意也是从下开始读  因为最下面的是字节高位即最前面的01…</p><p>2.1 ==RSA加密体制中，接收方的公开钥是(e,n)=(5,35)，接收到的密文是C=10，求明文M== （==必考！==）</p><p>答：（    m ≡ c<sup>d</sup> mod n         所以得先算出d  -----&gt; d*e ≡ 1 mod φ(n)  ）</p><p>n=35             所以 p=5，q=7</p><p>φ(35) = (p-1)*(q-1) =4*6=24</p><p>因为 d*e ≡ 1 mod φ(n)   所以d=5      （这个到时候一个一个试就行）</p><p>m ≡ c<sup>d</sup> mod n ≡ 10<sup>5</sup> mod 35 ≡ 5          （注意不是等号）</p><blockquote><p>考试可求出明文再反推密文试下看看密文是不是10</p></blockquote><p>2.2 ==假设明文m=5，e=7，p=11，q=13，给出RSA的加密解密过程==     （==必考！==）</p><p>答：n=p*q=11*13=143           φ(143) = (p-1)*(q-1) = 10*12=120</p><p>因为d*e ≡ 1 mod φ(n)  即d*7 ≡ 1 mod 120   所以 d=103</p><p>加密：c ≡ m<sup>e</sup> mod n  ≡ 5<sup>7</sup> ≡ 47 mod 143</p><p>解密：m ≡ c<sup>d</sup> mod n  ≡ 47<sup>103</sup> ≡ 5 mod 143</p><p>3.ElGamal签名体制中，假设p=19，g=13。签名者A的私钥为x = 10，试计算公钥。设消息M=15，k=11，求签名过程并验证。  (==必考！==)</p><p>答：公钥：y ≡ g<sup>x</sup> mod p ≡ 13<sup>10</sup> mod 19 = 6</p><p>签名：r ≡ g<sup>k</sup>  (mod p) ≡ 13<sup>11</sup> mod 19 =2</p><p>s ≡ (H(m)-xr)k<sup>-1</sup> (mod p-1) ≡ (m-xr)k<sup>-1</sup> (mod p-1) ≡ (15-10*2)*11<sup>-1</sup> mod 18 = 11</p><p>所以(r,s)=(2,11)</p><p>验证：y<sup>r</sup>r<sup>s</sup> ≡ 6<sup>2</sup>*2<sup>11</sup> mod 19 ≡ 8 ≡ g<sup>m</sup> (mod p) ≡ 13<sup>15</sup> ≡ 8 mod 19</p><blockquote><p>根据老师的重点中给出的a*b (mod q) = a (mod q) * b (mod q)应该是用在比如这题求6<sup>2</sup>*2<sup>11</sup> mod 19就等同于求6<sup>2</sup> mod 19 * 2<sup>11</sup> mod 19 ≡ 17 *15 ≡ 8 mod 19</p></blockquote><p>求上面的11<sup>-1</sup>mod 18：</p><p>11*x ≡ 1 mod 18可算出x=5，而11*11<sup>-1</sup> ≡ 1 mod 18 即11<sup>-1</sup> ≡ 5 mod 18</p><p>4.在Diffie- Hellman密钥交换过程中，设大素数p=11,a=2是p的本原根。  （==必考！==）<br>(1) 用户A的公开钥Y<sub>A</sub>=9,求其秘密钥XA。<br>(2)设用户B的公开钥Y<sub>B</sub>=3,求A和B的共享密钥K。</p><p>答：:one: Y<sub>A</sub>=a<sup>XA</sup> mod p = a<sup>XA</sup> mod p 即 9=2<sup>XA</sup> mod 11   所以 X<sub>A</sub>=6  (考试时一个一个试就行)</p><p>:two: K=Y<sub>B</sub><sup>XA</sup> mod p = 3<sup>6</sup> mod 11 =3</p><h1>论述题1*20  （任选一个即可）</h1><ul><li>介绍一种密码学协议研究与应用动态。</li><li>提出一种安全应用场景，试设计出相应的密码协议实现安全应用。</li><li>介绍一种安全应用场景，分析该安全场景应用了哪些密码技术，并简述如何保障了安全性。</li></ul><p><a href="https://baike.baidu.com/item/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E">https://baike.baidu.com/item/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E</a></p><h2 id="零知识证明"><a class="header-anchor" href="#零知识证明">¶</a>零知识证明</h2><h3 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h3><p>零知识证明是在20世纪80年代初提出的。它指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的。零知识证明实质上是一种涉及两方或更多方的协议，即两方或更多方完成一项任务所需采取的一系列步骤。证明者向验证者证明并使其相信自己知道或拥有某一消息，但证明过程不能向验证者泄漏任何关于被证明消息的信息。</p><blockquote><p>要是太多这段可省略</p><p>零知识证明起源于最小泄露证明。设P表示掌握某些信息，并希望证实这一事实的实体，设V是证明这一事实的实体。假如某个协议向V证明P的确掌握某些信息，但V无法推断出这些信息是什么，我们称P实现了最小泄露证明。不仅如此，如果V除了知道P能够证明某一事实外，不能够得到其他任何知识，我们称P实现了零知识证明，相应的协议称作零知识协议。</p></blockquote><p>例如，A要向B证明自己拥有某个房间的钥匙，假设该房间只能用钥匙打开锁，而其他任何方法都打不开。这时有2个方法：</p><p>①A把钥匙出示给B，B用这把钥匙打开该房间的锁，从而证明A拥有该房间的正确的钥匙。</p><p>②B确定该房间内有某一物体，A用自己拥有的钥匙打开该房间的门，然后把物体拿出来出示给B，从而证明自己确实拥有该房间的钥匙。</p><p>后面的②方法属于零知识证明。它的好处在于，在整个证明的过程中，B始终不能看到钥匙的样子，从而避免了钥匙的泄露。</p><h3 id="应用动态"><a class="header-anchor" href="#应用动态">¶</a>应用动态</h3><p>零知识证明在区块链里的应用非常广泛。最早使用零知识证明技术的区块链叫做 Zcash，这是许多零知识证明的做法之一，也是最有名的一个。V神就曾表示称，零知识证明能够被应用于以太坊区块链上几乎所有的场景。</p><p>相对于ZCash来说，比特币的转账并不是完全匿名的，只要知道了一个比特币地址，任何人都可以通过这个网站，查到这个地址的所有“消费”行为。比如给谁转了账，又从谁那里收到过转账，在以区块链技术为基础的“账本”上都详细地记录着。</p><p>例如A有3个BTC，要给B转账1个BTC，那么在账本上就会记录着：A转出了两笔BTC，一笔为1BTC，转给了B；另一笔为2BTC，转给了自己。</p><p>那么利用了“零知识证明”的ZCash是怎么做到的所谓匿名呢？</p><p>ZCash的代币为ZEC。同样假设A有3个ZEC，要给B转账1个ZEC。</p><p>首先，A会将自己的1个ZEC分成若干份随机投入一系列的“混合容器”中，指定接收方B的地址，同时混入的时候还有其他交易方输出的若干份ZEC。这些ZEC又被混合容器随机拆分，再从这些被拆分生成的所有的ZEC中取出合计为1ZEC的若干份，转移到B的地址中，同时在发送的时间上也可以设置一定的延迟。</p><p>其中的“混合容器”，就是一条“公有链”。经过这条公有链一系列的“混币”过程，就使得包括交易地址和具体金额在内的交易信息变得无从考证了。</p><p>零知识证明技术虽然会给区块链带来更强的匿名性，但同时会引起大量的监管问题，这是零知识证明技术无法回避的一个问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;本篇文章根据老师给的重点有针对性的快速复习。&lt;/p&gt;
&lt;p&gt;对于河南大学的学弟学妹们，如果你们任课老师是袁老师的话，他会给复习要点，跟着复习要点有针对性的复习就行。&lt;/p&gt;
&lt;h1&gt;判断题2*5&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;题型太杂无法预测，可能</summary>
      
    
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>现代密码学期末总结</title>
    <link href="https://zss192.github.io/2020/06/14/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2020/06/14/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-14T15:33:00.000Z</published>
    <updated>2021-03-30T03:45:21.153Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>由于老师后来给画了重点，本篇博客后半部分主要记录的是老师画的重点。个人复习使用，仅供参考</p><p>对于河南大学的学弟学妹们，如果你们任课老师是袁老师的话，他会给复习要点，跟着复习要点有针对性的复习就行。</p><h1>引言</h1><h2 id="知识点"><a class="header-anchor" href="#知识点">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616202612666.png"  alt="image-20200616202612666"></p><p>1.在本书中，c指密文，m指明文，E()表示加密函数，D()表示解密函数</p><p>2.仿射变换：加密和解密中a，b为秘钥  （属于单表变换）</p><p>c=E<sub>a,b</sub>(m)=am+b(mod 26)</p><p>m=D<sub>a,b</sub>(m)=a<sup>-1</sup>(c-b)(mod 26)</p><blockquote><p>注意a<sup>-1</sup>*a≡1 mod 26</p></blockquote><p>3.多表代换密码：其中A为n*n的矩阵，n等于几代表明文每几个分成一组。一般N为26。</p><p>C<sub>i</sub>≡AM<sub>i</sub>+B(mod N)，i=1,2,3…</p><p>M<sub>i</sub>≡A<sup>-1</sup>(C<sub>i</sub>-B)(mod N)，i=1,2,3…</p><p>4.人为攻击分为</p><ul><li>被动攻击       就是窃听，是对系统保密性的攻击<ul><li>获取信息的内容</li><li>业务流分析     敌收无法获得消息但可能获得通信双方身份、次数…</li></ul></li><li>主动攻击       对数据流的篡改或产生假数据流<ul><li>中断      如破坏硬件、系统是对系统可用性的攻击</li><li>篡改      修改数据是对系统完整性的攻击</li><li>伪造      如插入伪造消息或记录，是对系统真实性的攻击</li></ul></li></ul><blockquote><p>被动攻击不改变消息而主动攻击改变消息内容</p><p>抵抗被动攻击：预防                抵抗主动攻击：检测修复</p></blockquote><p>5.密码算法的安全性包括哪两类？？(暂时没找到)</p><p>6.密钥管理：密钥产生、分配、存储、销毁等问题</p><p>7.密码体质从原理上可分为两类</p><ul><li>对称(单钥)密码体制             （可用于数据加密和消息认证）<ul><li>流密码                             逐位加密</li><li>分组密码                         消息分组，逐组加密</li></ul></li><li>非对称(双钥)密码体制            两密钥，一公开一私密</li></ul><p>8.对密码系统的攻击按攻击者可获取的信息量可分为</p><ul><li>唯密文攻击                           仅知道一些密文</li><li>已知明文攻击                       知道一些密文和相应的明文</li><li>选择明文攻击                       密码分析者可以选择一些明文并得到相应的密文</li><li>选择密文攻击                       密码分析者可以选择一些密文，并得到相应的明文</li></ul><blockquote><p>以上攻击都建立在已知算法的基础之上，且攻击强度依次增加</p></blockquote><p>9.单向陷门函数就是有一个陷门的一类特殊单向函数。</p><p>若y=f(x)，已知x很容易计算y，但已知y很难计算x（单向性）。特别的是存在一个z使得知道了z那么就很容易由y计算出x，那么z则称为陷门（有陷门也称后门）</p><p>10.加密算法满足下列两点则认为是计算上安全的</p><ul><li>破译密文的代价超过被加密信息的价值</li><li>破译密文所花的时间超过信息的有用期</li></ul><p>11.攻击密码体制的常用方法</p><ul><li>穷举攻击                             （解决方法 : 增大密钥量）</li><li>统计分析攻击                     （解决方法：使明文的统计特性与密文的统计特性不一样）</li><li>数学分析攻击                     （解决方法：选用足够复杂的加密算法）</li></ul><p>12.密钥体制组成部分（加密系统的五元组）：明文，密文，密钥，加密算法，解密算法。</p><p>13.一个好密钥体制至少应满足的两个条件：</p><ul><li>已知明文和加密密钥计算密文容易，已知密文和解密密钥计算明文容易</li><li>在不知解密密钥的情况下，不可能由密文 c 推出明文</li></ul><h2 id="习题"><a class="header-anchor" href="#习题">¶</a>习题</h2><p>1.设由仿射变换对一个明文加密得到的密文为edsgickxhuklzveqzvkxwkzukvcuh，又已知明文的前两个字符是“if&quot;，对该密文解密。</p><p>答：e=4  d=3  i=8   f=5    （26个字母下标从0开始）E<sub>a,b</sub>(m)=am+b(mod 26)</p><p>E(i)=e，4≡8*a+b(mod 26)</p><p>E(f)=d，3≡5*a+b(mod 26)</p><p>由上述两个式子可推出a=9，b=10，所以m=9<sup>-1</sup>(c-10)(mod 26)</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609204054393.png"  alt="image-20200609204054393" style="zoom:80%;" /><p>2.设多表代换密码C≡AM<sub>i</sub>+ B(mod26)中，A是2X2矩阵，B是0矩阵，又知明文“dont”被加密为“elni”，求矩阵A。</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609205229494.png"  alt="image-20200609205229494" style="zoom:67%;" /><blockquote><p>注意矩阵相乘的结果要模26，上式求b的时候算得125b=13，其实应是125b≡13(mod 26)，即为21b≡13(mod 26)，解得b=13，其他类似</p></blockquote><h1>流密码</h1><h2 id="知识点-v2"><a class="header-anchor" href="#知识点-v2">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616202720122.png"  alt="image-20200616202720122"></p><p>1.==流密码的基本思想==：  (==必考！==)</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616215215527.png"  alt="image-20200616215215527"></p><p>2.流密码中密钥流就等于明文串和密文串异或</p><p>3.移位寄存器是流密码产生密钥流的一个重要组成部分</p><p>4.m序列密码的破译就是求密钥流的递推关系即a<sub>m+i</sub>=c<sub>m</sub>ai⊕c<sub>m-1</sub>a<sub>i+1</sub>⊕…⊕c<sub>1</sub>a<sub>m+i-1</sub></p><p>(公式中的m即题目说多少级级线性反馈移位寄存器就是多少)</p><blockquote><p>比如是3级，我们求得是a<sub>i+3</sub>，当i=1，i+3=4即第四个这样根据前三个就可知道后面所有的数</p></blockquote><h2 id="习题-v2"><a class="header-anchor" href="#习题-v2">¶</a>习题</h2><p>1.求矩阵的逆（这章习题会用到，复习下）</p><p>核心公式：A<sup>-1</sup>=A<sup>*</sup>/|A|</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609214703300.png"  alt="image-20200609214703300" style="zoom:80%;" /><p>若是三阶矩阵：A<sub>ij</sub>=(-1)<sup>i+j</sup>M<sub>ij</sub>，M<sub>ij</sub>为除去a<sub>ij</sub>所在那一行和那一列得到的二阶矩阵</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609215140551.png"  alt="image-20200609215140551"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609215521885.png"  alt="image-20200609215521885"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609215736609.png"  alt="image-20200609215736609"></p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609215941959.png"  alt="image-20200609215941959"></p><p>2.已知流密码的密文串1010110110和相应的明文串0100010001，而且还已知密钥流是使用3级线性反馈移位寄存器产生的，试破译该密码系统。(和P65例2-6类似)</p><p>答：由已知可得密钥流为1010110110⊕0100010001=1110100111，因为是3级线性反馈</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609212249326.png"  alt="image-20200609212249326"></p><blockquote><p>按照上面矩阵：a<sub>4</sub>=c<sub>3</sub>*a<sub>1</sub>+c<sub>2</sub>*a<sub>2</sub>+c<sub>1</sub>*a<sub>3</sub>正是密钥流递推关系(m=3,i=1然后是m=3,i=2…)</p></blockquote><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609214235084.png"  alt="image-20200609214235084"></p><blockquote><p>记住c从高到低，a从低到高</p></blockquote><p>3.如图是一个3级反馈移位寄存器，其初始状态为(a1,a2,a3)=(1,0,1)，求输出序列</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609221112648.png"  alt="image-20200609221112648" style="zoom:80%;" /><p>从图中可看到a1、a2、a3经f函数送至左边形成一个循环，比如f(a1,a2,a3)=b，那么b将代替a3的位置，a3～a1均右移，所以a1输出，以此类推。</p><p>答：f(a1,a2,a3)=f(1,0,1)=1*0⊕1=1，然后f(1,1,0)</p><p>可总结规律，右边的3为参与f函数生成的数放在左边，然后以左边这个数向右数3个数分别当做a3,a2,a1参与f生成的又放在最左边…最后输出是从右到左</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/IMG_20200609_222216.jpg"  alt="IMG_20200609_222216" style="height:170px;" /><p>即输出序列为10111011101…，周期为4</p><h1>分组密码</h1><h2 id="知识点-v3"><a class="header-anchor" href="#知识点-v3">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616202818895.png"  alt="image-20200616202818895" style="zoom:80%;" /><p>1.分组密码：将明文划分为长为n的组x(x0,x1,…,xn-1)，各组在密钥k=(k0,k1,…kt-1)控制下变换成等长的数字序列y=(y0,y1,…ym-1)。实质是对字长为n的数字序列的代换密码 （一般m=n）</p><p>2.扩散和混淆是Shannon提出的设计密码系统的两个基本方法(分组密码安全设计性原则)  (了解)</p><ul><li>扩散：使明文与密文之间的统计关系变得尽可能复杂，以使敌手无法得到密钥<ul><li>明文每一比特变换尽量多的影响密文序列的变化，以隐蔽明文的统计特性（雪崩效应）</li><li>P盒(置换)用于扩散</li></ul></li><li>混淆：使密文与密钥之间的统计关系变得尽可能复杂，以使敌手无法得到密钥<ul><li>S盒(代换)用于混淆</li></ul></li></ul><p>3.很多分组密码结构本质都基于Feistel结构</p><p>将每组明文分为左右两半L<sub>0</sub>和R<sub>0</sub>，n轮迭代后再合在一起产生密文分组</p><p>第i轮迭代（代换）：      L<sub>i</sub>=R<sub>i-1</sub>  (左等右上)             R<sub>i</sub>=L<sub>i-1</sub>⊕F(R<sub>i-1</sub>,K<sub>i</sub>)  （右等左上异或F即右上和K）</p><p>最后一轮交换左右两半数据（置换用于扩散）</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614145605923.png"  alt="image-20200614145605923" style="zoom: 80%;" /><p>解密和加密本质过程一样，密文作为输入，但使用子密钥K<sub>i</sub>的次序和加密相反（这一特性保证了加密和解密可用同一算法）</p><p>4.DES加密过程可分为四个阶段 (64比特明文，64比特密钥(每个第8位设置奇偶校验位实际56位)）</p><ul><li>初始置换IP，用于重排明文分组的64比特         （由IP置换表实现）</li><li>生成子密钥</li><li>迭代过程即16轮变换然后交换左右次序(代换和置换)</li><li>逆初始置换IP<sup>-1</sup></li></ul><p>:two: 生成子密钥过程                参考：<a href="https://www.cxyxiaowu.com/1478.html">算法科普：神秘的 DES 加密算法</a> ，下同</p><p>56比特密钥经PC-1置换后分为左右C<sub>0</sub>和D<sub>0</sub>，然后由表左循环经PC-2产生48比特的本轮密钥</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/1571057977-17488ca32598db6.jpg"  alt="image-20200614145605923" style="zoom: 80%;" /><p>:three: 迭代过程等同于Feistel结构(左等右上，右等左上异或F)，而其中用到的F函数为：</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614155257147.png"  alt="image-20200614155257147" style="zoom:67%;" /><p>5.分组密码的运行模式</p><ul><li>ECB(电话本)模式                      各明文组以同一密钥加密</li><li><strong>CBC(密码分组链接)模式</strong>          加密的输入是当前明文组和前一密文组的异或</li><li>CFB(密码反馈)模式                  每次处理j位输入，上次密文加密产生伪随机再与当前明文异或</li><li>OFB(输出反馈)模式           与CFB不同的是加密的输入是前一次加密的输出(与明文异或的那个)</li></ul><p>:two: ==CBC模式加解密示意图== （==必考！==）</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614163017246.png"  alt="image-20200614163017246" style="height:450px" /><p>加密: C<sub>i</sub>= E<sub>k</sub>[P<sub>i</sub>⊕C<sub>i-1</sub>] (可认为C<sub>0</sub>=IV)         解密:P<sub>i</sub>= D<sub>K</sub>[C<sub>i</sub>]⊕C<sub>i-1</sub></p><blockquote><p>IV初始向量与第一个明文分组异或，应像密钥一样被保护。该模式能够获得保密性也可认证，适合加密64比特的消息</p></blockquote><p>==工作模式为==：它一次对一个明文分组加密，每次加密使用同一密钥，加密算法的输入是当前明文分组和前一次密文分组的异或，因此加密算法的输入不会显示出这次的明文分组之间的固定关系，所以重复的明文分组不会在密文中暴露出这种重复关系                   （==必须背会！==）</p><p>6.AES是DES的替代者，也是当今最流行的对称加密算法之一</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/20190527200618151.png"   /><p>AES轮函数包括字节代换、行移位、列混合、密钥加</p><p>:one: 字节代换：根据S盒把明文块的每一个字节都替代成另外一个字节</p><p>:two: 行移位：如第1行不变，第2行循环左移C1个字节，第3行左移C2个字节，第4行移C3 要根据表</p><p>:three: 列混合：输入数组每一列和修补矩阵的二维常量数组做矩阵相乘，得到对应的输出列。</p><p>:four: 密钥加：输入数组的每个字节a[i,j]与密钥对应位置的字节k[i,j]异或一次，就生成了输出值b[i,j]</p><p>7.SM4算法，数据和密码分组均为128比特</p><p>加密：X<sub>i</sub>+4=F(X<sub>i</sub>,X<sub>i+1</sub>,X<sub>i+2</sub>,X<sub>i+3</sub>,rk<sub>i</sub>)=X<sub>i</sub>⊕T(X<sub>i+1</sub>⊕X<sub>i+2</sub>⊕X<sub>i+3</sub>⊕rk<sub>i</sub>)（i=0,1,2…31）</p><p>后经反序R处理：(Y<sub>0</sub>,Y<sub>1</sub>,Y<sub>2</sub>,Y<sub>3</sub>)=(X<sub>35</sub>,X<sub>34</sub>,X<sub>33</sub>,X<sub>32</sub>)=R(X<sub>32</sub>,X<sub>33</sub>,X<sub>34</sub>,X<sub>35</sub>)</p><p>解密算法和加密算法相同，轮密钥使用顺序相反</p><p><a href="http://8.GF">8.GF</a>(2<sup>8</sup>)中   a*a<sup>-1</sup>=1(mod x8+x4+x5+x+1)</p><p>GF(2)上的可逆的仿射变换 如下 （x是题目中a的逆）</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614205335632.png"  alt="image-20200614205335632"></p><h2 id="习题-v3"><a class="header-anchor" href="#习题-v3">¶</a>习题</h2><p>1.==对字节a=1011  0110字节替代变换，设a的逆为a<sup>-1</sup>==                 （ ==必考！==）</p><p>答：先求a的逆，再用仿射变换即可</p><p>:one: 由a得(x<sup>7</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>2</sup>+x)a<sup>-1</sup> ≡ 1(mod x<sup>8</sup>+x<sup>4</sup>+x<sup>3</sup>+x+1)</p><p>所以a<sup>-1</sup>=x<sup>6</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>3</sup>             即0111 1000     （二进制对应位数有1就代表有x的那一次方）</p><blockquote><p>根据老师给的考试要点，仿射变换和m(x)题目会给出，a的逆试试就出来了</p></blockquote><p>:two: 使用仿射变换   （注意要用a的逆而且注意x的顺序从下往上读）</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/QQ%E5%9B%BE%E7%89%8720200614210639.jpg"  alt="QQ图片20200614210639"></p><p>即(0100 1110)<sub>2</sub>=(4E)<sub>16</sub>                 注意也是从下开始读  因为最下面的是字节高位即最前面的01…</p><p>2.利用DES算法和全0密钥对输入(1000 0001 1960 0000)进行一圈加密的结果 （需要查表P39）</p><p>答：:one: 输入的右半部分是1960 0000 = 0001 1001 0110 0000    0000 0000 0000 0000</p><p>:two: 经E盒扩展后为：000011 110010 101100 000000      000000 000000 000000 000000</p><p>:three: 与全0密钥对异或后为：000011 110010 101100 000000      000000 000000 000000 000000</p><p>:four: 经S盒后变为：15 8 3 7 2 12 4 13 即1111 1000 0011 0111 0010 1100 0100 1101</p><p>:five: 经P盒后变为 1001 1100 1101 1000     1001 1010 1010 1110</p><p>:six: 输出的左半部分即输入的右半部分为1960 0000，输出的右半部分为F函数输出和左半部分输入异或即8cd8 9aaf，最终输出为 1960 0000  8cd8 9aaf</p><blockquote><p>这题主要是加深对DES迭代过程的理解，由于要查表，考试应该不会考</p></blockquote><p>3.在DES的ECB模式中,如果在密文分组中有一个错误,解密后仅相应的明文分组受到影响。然而在CBC模式中，将有错误传播。加密解密图中C1中的一个错误明显地将影响到P1和P2的结果。</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200614163017246.png"  alt="image-20200614163017246" style="zoom: 50%;" /><p>(1) P2后的分组是否受到影响?<br>(2)设加密前的明文分组P1中有1比特的错误，问这一错误将在多少个密文分组中传播?<br>对接收者产生什么影响?</p><p>答：:one: CBC的加密: C<sub>i</sub>= E<sub>k</sub>[P<sub>i</sub>⊕C<sub>i-1</sub>]，i≥2           解密:P<sub>i</sub>= D<sub>K</sub>[C<sub>i</sub>]⊕C<sub>i-1</sub>，i≥1</p><p>若C1有错误，P2=D<sub>K</sub>[C<sub>2</sub>]⊕C<sub>1</sub>所以P2也会受影响，但i≥3时，P<sub>i</sub>= D<sub>K</sub>[C<sub>i</sub>]⊕C<sub>i-1</sub>与C1无关因此不会受到影响</p><blockquote><p>本题由于C1错误事实上C2、C3、C4…都会和原来不一样，但即使它是错的经密钥解密后还是可以得到原明文(可理解为是明文的另一种加密结果)，所以说P2后不受影响</p></blockquote><p>:two: 若P1出错，则C1会是错的，由C<sub>i</sub>= E<sub>k</sub>[P<sub>i</sub>⊕C<sub>i-1</sub>]得，C<sub>i≥2</sub>也都是错误的，因此会传递到每一个分组</p><p>由加密解密方式可知，若只是P1出错，解密后得到的还是原来的输入。即接收者解密后的P1和原来输入的一样会有1比特的错误，而其他的可以解密得到正确的明文</p><h1>公钥密码</h1><h2 id="知识点-v4"><a class="header-anchor" href="#知识点-v4">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616203037349.png"  alt="image-20200616203037349" style="zoom:80%;" /><p>1.==RSA加密解密==      (==必考！==)</p><p>选倆素数p,q       n=p*q      φ(n)=(p-1)*(q-1)            d*e ≡ 1 mod φ(n)</p><p>加密：c ≡ m<sup>e</sup> mod n    （e和n会给出）</p><p>解密：m ≡ c<sup>d</sup> mod n      (一般d要自己求)</p><p>2.可能会用到的公式：a*b (mod q) = a (mod q) * b (mod q)</p><blockquote><p>推测是RSA中m<sup>e</sup>或c<sup>d</sup>可以拆成两个乘积的形式</p></blockquote><h2 id="习题-v4"><a class="header-anchor" href="#习题-v4">¶</a>习题</h2><p>1.==RSA加密体制中，接收方的公开钥是(e,n)=(5,35)，接收到的密文是C=10，求明文M== （==必考！==）</p><p>答：（    m ≡ c<sup>d</sup> mod n         所以得先算出d  -----&gt; d*e ≡ 1 mod φ(n)  ）</p><p>n=35             所以 p=5，q=7</p><p>φ(35) = (p-1)*(q-1) =4*6=24</p><p>因为 d*e ≡ 1 mod φ(n)   所以d=5      （这个到时候一个一个试就行）</p><p>m ≡ c<sup>d</sup> mod n ≡ 10<sup>5</sup> mod 35 ≡ 5          （注意不是等号）</p><p>2.==假设明文m=5，e=7，p=11，q=13，给出RSA的加密解密过程==     （==必考！==）</p><p>答：n=p*q=11*13=143           φ(143) = (p-1)*(q-1) = 10*12=120</p><p>因为d*e ≡ 1 mod φ(n)  即d*7 ≡ 1 mod 120   所以 d=103</p><p>加密：c ≡ m<sup>e</sup> mod n  ≡ 5<sup>7</sup> ≡ 47 mod 143</p><p>解密：m ≡ c<sup>d</sup> mod n  ≡ 47<sup>103</sup> ≡ 5 mod 143</p><h1>数字签名</h1><h2 id="知识点-v5"><a class="header-anchor" href="#知识点-v5">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616210115666.png"  alt="image-20200616210115744" style="zoom:80%;" /><p>1.==ElGamal签名体制：==                       （==必考！==）</p><p>用户A的公钥：y ≡ g<sup>x</sup>  (mod p)          x为用户A的私钥</p><p>签名的产生过程：</p><ul><li>计算 r ≡ g<sup>k</sup>  (mod p)</li><li>计算 s ≡ (H(m)-xr)k<sup>-1</sup> (mod p-1)           H(m)为m的哈希值，计算取H(m)=m，注意是p-1</li><li>(r,s)即为签名</li></ul><p>签名的验证过程</p><ul><li>计算y<sup>r</sup>r<sup>s</sup> ≡ g<sup>H(m)</sup> (mod p)</li><li>就是验证 y<sup>r</sup>r<sup>s</sup>（mod p）是不是等于 g<sup>H(m)</sup> (mod p)</li></ul><h2 id="习题-v5"><a class="header-anchor" href="#习题-v5">¶</a>习题</h2><p>1.ElGamal签名体制中，假设p=19，g=13。签名者A的私钥为x = 10，试计算公钥。设消息M=15，k=11，求签名过程并验证。  (==必考！==)</p><p>答：公钥：y ≡ g<sup>x</sup> mod p ≡ 13<sup>10</sup> mod 19 = 6</p><p>签名：r ≡ g<sup>k</sup>  (mod p) ≡ 13<sup>11</sup> mod 19 =2</p><p>s ≡ (H(m)-xr)k<sup>-1</sup> (mod p-1) ≡ (m-xr)k<sup>-1</sup> (mod p-1) ≡ (15-10*2)*11<sup>-1</sup> mod 18 = 11</p><p>所以(r,s)=(2,11)</p><p>验证：y<sup>r</sup>r<sup>s</sup> ≡ 6<sup>2</sup>*2<sup>11</sup> mod 19 ≡ 8 ≡ g<sup>m</sup> (mod p) ≡ 13<sup>15</sup> ≡ 8 mod 19</p><blockquote><p>根据老师的重点中给出的a*b (mod q) = a (mod q) * b (mod q)应该是用在比如这题求6<sup>2</sup>*2<sup>11</sup> mod 19就等同于求6<sup>2</sup> mod 19 * 2<sup>11</sup> mod 19 ≡ 17 *15 ≡ 8 mod 19</p></blockquote><h1>哈希函数</h1><h2 id="知识点-v6"><a class="header-anchor" href="#知识点-v6">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200616215652197.png"  alt="image-20200616215652197"></p><p>1.单向函数：已知h，求使得H(x)=h的x在计算上是不可行的。</p><p>2.==弱单向哈希函数和强单向哈希函数==            （==必考！==）</p><p>已知x，找出y (y≠x) 使得H(y)=H(x)在计算上是不可行的，若单向函数满足这种性质则称其为弱单向哈希函数         （==必须会背！==）</p><p>找出任意两个不同的输入x、y，使得H(x)=H(y)在计算上是不可行的，若单向函数满足这种性质则称其为强单向哈希函数                  （==必须会背！==）</p><blockquote><p>已知一个另找一个使得H函数相等是弱单向，任意给倆使其H函数相等是强单向（看谁单的很）</p></blockquote><p>3.如果哈希函数对不同的输入可产生相同的输出，则称该函数具有碰撞性。</p><p>4.抗弱碰撞哈希函数：对于任意给定的x，找到满足y≠x且H(x)=H(y)的y在计算上是不可行的</p><p>抗强碰撞哈希函数：找到任何满足H(x)=H(y)的x,y在计算上是不可行的</p><h1>认证技术</h1><h2 id="知识点-v7"><a class="header-anchor" href="#知识点-v7">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616221851197.png"  alt="image-20200616221851197"></p><p>1.消息认证是一个过程，用于验证接收消息的真实性(确实是它声称的实体发来的)和完整性(未被篡改、插入、删除)，同时还用于验证消息的顺序性和时间性(未重排、重放、延迟)以及消息的不可否认性。</p><h1>密钥分配与密钥管理</h1><h2 id="知识点-v8"><a class="header-anchor" href="#知识点-v8">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616222510012.png"  alt="image-20200616222510012"></p><p>1.Diffie-Hellman密钥交换简称D-H密钥交换的目的是使得两个用户能够安全的交换密钥，得到一个共享的会话密钥，算法本身不能用于加密解密。</p><p>2.==D-H密钥交换协议==：                            （==必考！==）</p><p>已知私钥为X，公钥为Y，p是一大素数，a是p的本原根，a和p公开，K为共享密钥</p><p>用户A：计算Y<sub>A</sub>=a<sup>XA</sup> mod p发送给B         共享密钥K=Y<sub>B</sub><sup>XA</sup> mod p</p><p>用户B：计算Y<sub>B</sub>=a<sup>XB</sup> mod p发送给A         共享密钥K=Y<sub>A</sub><sup>XB</sup> mod p</p><blockquote><p>通过上述操作求得的两个K值相等，这样就安全的求得了一个公共的密钥</p></blockquote><h2 id="习题-v6"><a class="header-anchor" href="#习题-v6">¶</a>习题</h2><p>1.在Diffie- Hellman密钥交换过程中，设大素数p=11,a=2是p的本原根。  （==必考！==）<br>(1) 用户A的公开钥Y<sub>A</sub>=9,求其秘密钥XA。<br>(2)设用户B的公开钥Y<sub>B</sub>=3,求A和B的共享密钥K。</p><p>答：:one: Y<sub>A</sub>=a<sup>XA</sup> mod p = a<sup>XA</sup> mod p 即 9=2<sup>XA</sup> mod 11   所以 X<sub>A</sub>=6  (考试时一个一个试就行)</p><p>:two: K=Y<sub>B</sub><sup>XA</sup> mod p = 3<sup>6</sup> mod 11 =3</p><h1>密码协议</h1><h2 id="知识点-v9"><a class="header-anchor" href="#知识点-v9">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616230655359.png"  alt="image-20200616230655359"></p><p>1.密码协议是指利用密码工具实现与安全相关的协议或函数的计算</p><h1>可证明安全</h1><h2 id="知识点-v10"><a class="header-anchor" href="#知识点-v10">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616231333668.png"  alt="image-20200616231333668"></p><p>1.可证明安全性：将密码系统的安全性归结为某个经过深入研究的数学难题（如大整数素因子分解、计算离散对数等），数学难题被证明求解困难。这种评估方法存在的问题是它只说明了这个密码方法的安全性与某个困难问题相关，没有完全证明问题本身的安全性。</p><h1>密码学新方向</h1><h2 id="知识点-v11"><a class="header-anchor" href="#知识点-v11">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616231741030.png"  alt="image-20200616231741030"></p><p>1.写出5中密码学新方向或新技术       （==必考！==）</p><p>答：身份基加密(IBE)、属性基加密(ABE)、全同态加密、动态加密、可搜索加密</p><h1>计算公式</h1><p>1.==RSA加密解密==      (==必考！==)</p><p>选倆素数p,q       n=p*q      φ(n)=(p-1)*(q-1)            d*e ≡ 1 mod φ(n)</p><p>加密：c ≡ m<sup>e</sup> mod n    （e和n会给出）</p><p>解密：m ≡ c<sup>d</sup> mod n      (一般d要自己求)</p><p>2.==ElGamal签名体制：==                       （==必考！==）</p><p>用户A的公钥：y ≡ g<sup>x</sup>  (mod p)          x为用户A的私钥 （公钥要和私钥有关所以用x）</p><p>签名的产生过程：</p><ul><li>计算 r ≡ g<sup>k</sup>  (mod p)</li><li>计算 s ≡ (H(m)-xr)k<sup>-1</sup> (mod p-1)           H(m)为m的哈希值，计算取H(m)=m，==注意是p-1==</li><li>(r,s)即为签名</li></ul><p>签名的验证过程</p><ul><li>计算y<sup>r</sup>r<sup>s</sup> ≡ g<sup>H(m)</sup> (mod p)   （上面先后算出y,r,s所以是y<sup>r</sup>r<sup>s</sup>）</li><li>就是验证 y<sup>r</sup>r<sup>s</sup>（mod p）是不是等于 g<sup>H(m)</sup> (mod p)</li></ul><p>3.==D-H密钥交换协议==：                            （==必考！==）</p><p>已知私钥为X，公钥为Y，p是一大素数，a是p的本原根，a和p公开，K为共享密钥</p><p>用户A：计算Y<sub>A</sub>=a<sup>XA</sup> mod p发送给B         共享密钥K=Y<sub>B</sub><sup>XA</sup> mod p</p><p>用户B：计算Y<sub>B</sub>=a<sup>XB</sup> mod p发送给A         共享密钥K=Y<sub>A</sub><sup>XB</sup> mod p</p><blockquote><p>通过上述操作求得的两个K值相等，这样就安全的求得了一个公共的密钥</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;由于老师后来给画了重点，本篇博客后半部分主要记录的是老师画的重点。个人复习使用，仅供参考&lt;/p&gt;
&lt;p&gt;对于河南大学的学弟学妹们，如果你们任课老师是袁老师的话，他会给复习要点，跟着复习要点有针对性的复习就行。&lt;/p&gt;
&lt;h1&gt;引言&lt;/h1&gt;
&lt;h</summary>
      
    
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>实验六 查找和排序的实现</title>
    <link href="https://zss192.github.io/2020/06/12/%E5%AE%9E%E9%AA%8C%E5%85%AD-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://zss192.github.io/2020/06/12/%E5%AE%9E%E9%AA%8C%E5%85%AD-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-06-12T04:13:00.000Z</published>
    <updated>2021-03-30T03:45:21.149Z</updated>
    
    <content type="html"><![CDATA[<h1>实验性质：综合性实验</h1><h1>要求：</h1><p>（1）采用邻接矩阵/邻接表建立图；<br>（2）采用深度优先/广度优先搜索方式遍历图；<br>（3）编程实现Dijkstra最短路径算法。</p><h1>目的：</h1><p>（1）掌握图的邻接矩阵和邻接表存储方式；<br>（2）掌握图的遍历算法；<br>（3）掌握图的实际应用——最短路径算法。</p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//**折半查找**//</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;<span class="comment">//查找表中每个数据元素的值</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType *elem;<span class="comment">//存放查找表中数据元素的数组</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//记录查找表中数据的总数量</span></span><br><span class="line">&#125;SSTable;</span><br><span class="line"><span class="comment">//**二叉排序树**//</span></span><br><span class="line"><span class="keyword">int</span> m=<span class="number">-1</span>;   <span class="comment">//二叉排序树初始化计数</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;    <span class="comment">//二叉排序树关键字序列下标和查找次数计数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    string key;<span class="comment">//查找表中每个数据元素的值</span></span><br><span class="line">    <span class="keyword">int</span> position;<span class="comment">//结点在关键字序列中的位置</span></span><br><span class="line">&#125;ElemType2;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType2 data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span> <span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BSTNode,*BSTree;</span><br><span class="line"><span class="comment">//**排序**//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>  key;   <span class="comment">//关键字项</span></span><br><span class="line">&#125;RedType;                     <span class="comment">//记录类型</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    RedType  r[MAXSIZE+<span class="number">1</span>]; <span class="comment">//r[0]闲置</span></span><br><span class="line">    <span class="keyword">int</span>  length;  <span class="comment">//顺序表长度</span></span><br><span class="line">&#125;SqList;  <span class="comment">//顺序表类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(SSTable &amp;ST)</span></span>;   <span class="comment">//创建有序线性表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Search_Bin</span><span class="params">(SSTable ST,<span class="keyword">int</span> key)</span></span>;   <span class="comment">//折半查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateTree</span><span class="params">(BSTree &amp;T)</span></span>; <span class="comment">//创建二叉链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BSTree T)</span></span>; <span class="comment">//中序遍历</span></span><br><span class="line"><span class="function">BSTree <span class="title">SearchBST</span><span class="params">(BSTree T,  string key)</span></span>;<span class="comment">//二叉树的递归查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>;<span class="comment">//初始化及赋初始值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutputKey</span><span class="params">(SqList &amp;L)</span></span>;  <span class="comment">//输出当前顺序表数值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(SqList &amp;L)</span></span>;<span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(SqList &amp;L)</span></span>;  <span class="comment">//折半插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span>;  <span class="comment">//文字菜单提示信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SSTable ST;</span><br><span class="line">    BSTree T;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="built_in">Menu</span>();</span><br><span class="line">    <span class="keyword">int</span> i;  <span class="comment">//输入的数字</span></span><br><span class="line">    <span class="keyword">int</span> key;string key2;    <span class="comment">//输入的待查元素</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入操作代码：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;i;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">CreateList</span>(ST);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请输入待查元素:&quot;</span>;</span><br><span class="line">                cin&gt;&gt;key;</span><br><span class="line">                <span class="built_in">Search_Bin</span>(ST,key);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">CreateTree</span>(T);</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;二叉排序树创建成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;其中序遍历结果为:&quot;</span>;</span><br><span class="line">                n=<span class="number">0</span>;    <span class="comment">//置二叉排序树关键字序列下标从0开始</span></span><br><span class="line">                <span class="built_in">InOrderTraverse</span>(T);</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;请输入待查元素:&quot;</span>;</span><br><span class="line">                cin&gt;&gt;key2;</span><br><span class="line">                n=<span class="number">0</span>;    <span class="comment">//置查找次数为0</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;待查元素为第&quot;</span>&lt;&lt;<span class="built_in">SearchBST</span>(T,key2)-&gt;data.position+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个元素,&quot;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;共查找了&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;顺序表初始化成功,&quot;</span>;</span><br><span class="line">                <span class="built_in">InitList</span>(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">InsertSort</span>(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">BInsertSort</span>(L);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;输入的位置非法，请重新输入&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入操作代码：&quot;</span>;</span><br><span class="line">        cin&gt;&gt;i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**折半查找**//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(SSTable &amp;ST)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ST.elem=<span class="keyword">new</span> ElemType[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!ST.elem)    cout&lt;&lt;<span class="string">&quot;存储分配失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">    ST.length=<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">11</span>]=&#123;<span class="number">5</span>,<span class="number">16</span>,<span class="number">20</span>,<span class="number">27</span>,<span class="number">30</span>,<span class="number">36</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">60</span>,<span class="number">67</span>,<span class="number">71</span>&#125;;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;有序线性表创建成功，其数值为:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=ST.length; i++)    <span class="comment">//从下标1开始存储</span></span><br><span class="line">    &#123;</span><br><span class="line">        ST.elem[i].key=a[i<span class="number">-1</span>];    <span class="comment">//设置初始顺序表数值</span></span><br><span class="line">        cout&lt;&lt;ST.elem[i].key&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Search_Bin</span><span class="params">(SSTable ST,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low=<span class="number">1</span>;<span class="keyword">int</span> high=ST.length;<span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">int</span> times=<span class="number">0</span>;<span class="keyword">bool</span> isHave=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        times++;    <span class="comment">//查找次数</span></span><br><span class="line">        <span class="keyword">if</span>(key==ST.elem[mid].key)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;待查元素为第&quot;</span>&lt;&lt;mid&lt;&lt;<span class="string">&quot;个元素,共查找了&quot;</span>&lt;&lt;times&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">            isHave=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;ST.elem[mid].key)   high=mid<span class="number">-1</span>; <span class="comment">//在前面找</span></span><br><span class="line">        <span class="keyword">else</span> low=mid+<span class="number">1</span>; <span class="comment">//在后面找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!isHave)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;待查元素不在有序表中，共查找了&quot;</span>&lt;&lt;times&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**二叉排序树**//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateTree</span><span class="params">(BSTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ch[<span class="number">13</span>]=&#123;<span class="string">&quot;45&quot;</span>,<span class="string">&quot;24&quot;</span>,<span class="string">&quot;12&quot;</span>,<span class="string">&quot;#&quot;</span>,<span class="string">&quot;#&quot;</span>,<span class="string">&quot;37&quot;</span>,<span class="string">&quot;#&quot;</span>,<span class="string">&quot;#&quot;</span>,<span class="string">&quot;53&quot;</span>,<span class="string">&quot;#&quot;</span>,<span class="string">&quot;93&quot;</span>,<span class="string">&quot;#&quot;</span>,<span class="string">&quot;#&quot;</span>&#125;;</span><br><span class="line">    m+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch[m]==<span class="string">&quot;#&quot;</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T=<span class="keyword">new</span> BSTNode;</span><br><span class="line">        T-&gt;data.key=ch[m];</span><br><span class="line">        <span class="built_in">CreateTree</span>(T-&gt;lchild);    <span class="comment">//递归创建左子树</span></span><br><span class="line">        <span class="built_in">CreateTree</span>(T-&gt;rchild);    <span class="comment">//递归创建右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BSTree T)</span> <span class="comment">//中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InOrderTraverse</span>(T-&gt;lchild); <span class="comment">//中序遍历左子树</span></span><br><span class="line">        cout&lt;&lt;T-&gt;data.key&lt;&lt;<span class="string">&quot; &quot;</span>;  <span class="comment">//访问根节点</span></span><br><span class="line">        T-&gt;data.position=n;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="built_in">InOrderTraverse</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BSTree <span class="title">SearchBST</span><span class="params">(BSTree T,  string key)</span><span class="comment">//二叉树的递归查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">if</span>((!T) || key==T-&gt;data.key) <span class="keyword">return</span> T;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key&lt;T-&gt;data.key)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">SearchBST</span>(T-&gt;lchild,key); <span class="comment">//在左子树中继续查找</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">SearchBST</span>(T-&gt;rchild,key); <span class="comment">//在右子树中继续查找</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**排序**//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span><span class="comment">//初始化且赋初始值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">8</span>]=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L.r[i].key=a[i<span class="number">-1</span>];</span><br><span class="line">        L.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">OutputKey</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutputKey</span><span class="params">(SqList &amp;L)</span> <span class="comment">//输出当前顺序表数值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;当前顺序表值为:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;L.r[i].key&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(SqList &amp;L)</span><span class="comment">//直接插入排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=L.length;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( L.r[i].key&lt;L.r[i<span class="number">-1</span>].key)<span class="comment">//将L.r[i]插入有序子表</span></span><br><span class="line">        &#123;</span><br><span class="line">            L.r[<span class="number">0</span>]=L.r[i]; <span class="comment">// 复制为哨兵</span></span><br><span class="line">            L.r[i]=L.r[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-2</span>; L.r[<span class="number">0</span>].key&lt;L.r[j].key;--j)</span><br><span class="line">                L.r[j+<span class="number">1</span>]=L.r[j]; <span class="comment">// 记录后移</span></span><br><span class="line">            L.r[j+<span class="number">1</span>]=L.r[<span class="number">0</span>]; <span class="comment">//插入到正确位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;直接插入排序成功,&quot;</span>;</span><br><span class="line">    <span class="built_in">OutputKey</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(SqList &amp;L )</span>  <span class="comment">//折半插入排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=L.length; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">         L.r[<span class="number">0</span>] = L.r[i];</span><br><span class="line">         <span class="keyword">int</span> low = <span class="number">1</span> ; <span class="keyword">int</span> high = i<span class="number">-1</span> ;</span><br><span class="line">         <span class="keyword">while</span> (low &lt;=high)</span><br><span class="line">         &#123;</span><br><span class="line">            m=( low + high )/<span class="number">2</span> ;</span><br><span class="line">            <span class="keyword">if</span>(L.r[<span class="number">0</span>].key &lt; L.r[m]. key)</span><br><span class="line">                high = m <span class="number">-1</span> ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low = m + <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i<span class="number">-1</span>; j&gt;=high+<span class="number">1</span>; --j)</span><br><span class="line">            L.r[j+<span class="number">1</span>] = L.r[j];</span><br><span class="line">        L.r[high+<span class="number">1</span>] = L.r[<span class="number">0</span>];</span><br><span class="line">     &#125;</span><br><span class="line">     cout&lt;&lt;<span class="string">&quot;折半插入排序成功,&quot;</span>;</span><br><span class="line">     <span class="built_in">OutputKey</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;********by 夏日********&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1-----创建有序线性表(折半查找前提)&quot;</span>&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2-----折半查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3-----创建二叉排序树 &quot;</span>&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;4-----二叉排序树查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5-----顺序表初始化及赋初始值&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;6-----直接插入排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;7-----折半插入排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;   退出,输入一个负数！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>输出示例</h1><p>1.创建有序线性表<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200612120802268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>2.折半查找<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200612120920647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>3.创建二叉排序树<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200612120943210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>4.二叉排序树查找<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200612120953288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>5.顺序表初始化<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200612121003104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>6.直接插入排序<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020061212101316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>7.折半插入排序<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200612121020825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;实验性质：综合性实验&lt;/h1&gt;
&lt;h1&gt;要求：&lt;/h1&gt;
&lt;p&gt;（1）采用邻接矩阵/邻接表建立图；&lt;br&gt;
（2）采用深度优先/广度优先搜索方式遍历图；&lt;br&gt;
（3）编程实现Dijkstra最短路径算法。&lt;/p&gt;
&lt;h1&gt;目的：&lt;/h1&gt;
&lt;p&gt;（1）掌握图的邻接矩阵和</summary>
      
    
    
    
    <category term="数据结构" scheme="https://zss192.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://zss192.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理期末总结</title>
    <link href="https://zss192.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/"/>
    <id>https://zss192.github.io/2020/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%9C%9F%E6%9C%AB%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-09T14:32:00.000Z</published>
    <updated>2021-03-30T03:45:21.153Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>为迎接期末，总结了下知识点，供个人复习使用，仅供参考。</p><p>本文用到的复习资料：<a href="https://pan.baidu.com/s/1s4kU4UtgG7xiUyssDvuwKw">点我跳转</a>，提取码：1l49</p><p>若需要本文markdown文件下方评论留言看到即回</p><h1>计算机系统概论</h1><h2 id="知识点"><a class="header-anchor" href="#知识点">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200608144821042.png"  alt="image-20200608144821042" style="zoom: 67%;" /><p>1.时钟周期是计算机中最基本的、最小的时间单位。在一个时钟周期内，CPU仅完成一个最基本的动作。</p><p>2.主频(时钟频率)：每秒钟含有多少个时钟周期(1.2GHz即每秒钟含有1.2x10<sup>9</sup>个时钟周期)。</p><p>3.CPI：一条指令所需要的时钟周期个数。</p><p>4.MIPS：每秒钟能执行多少个==100万==条指令。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020021912112010.png"  alt=""></p><p>5.MFLOPS：每秒百万次浮点操作次数。</p><p>6.CPU执行时间：TCPU=In×CPI×TC (指令条数*一条指令需要几个时钟周期*时钟周期长度)</p><blockquote><p>In：执行程序中==指令==的==总数==</p><p>CPI(Clock Cycle Per Instruction)：执行每条==指令所需==的平均时钟==周期个数==<br>TC：时钟==周期时间==的长度</p></blockquote><p>7.吞吐量：计算机某一时间间隔内能够处理的信息量(能吞多少)</p><p>8.响应时间：从事件开始到事件结束的时间,也称执行时间.</p><p>7.冯●诺依曼型计算机设计思想主要有两项:</p><ul><li>将十进制改为二进制,从而太太简化了计算机的结构和运算过程;</li><li>存储程序的思想，将<strong>程序与数据</strong>一起存储在计算机内，使得计算机的全部运算成为真正的自动过程。</li></ul><blockquote><p>存储（程序）并按（地址）顺序执行，这是冯•诺依曼型计算机的工作原理。</p></blockquote><p>8.用嘴(一句一句最后生成目标程序)来解释，用手(一步到位最后不生成目标程序)来编译</p><p>编译程序将高级语言转换为机器代码再执行，解释程序用源程序直接解释，解释一句执行一句不用转换成机器代码。所以编译要比解释速度快</p><p>9.控制器可根据==不同的周期==(取指周期或者执行周期)来区分该地址的存储单元存储的是数据还是指令。</p><h2 id="习题"><a class="header-anchor" href="#习题">¶</a>习题</h2><p>1.假定机器M的时钟频率为200MHz，程序P在机器M上的执行时间为12s。对P优化，将所有乘4指令都换成了一条左移两位的指令，得到优化后的程序P’。若在M上乘法指令的CPI为102，左移指令的CPI为2，P的执行时间是P’执行时间的1.2倍，则P中的乘法指令条数为_______4x10<sup>6</sup>________</p><p>答：P’的执行时间为10s,比12少了2s，由时钟频率得每秒有2x10<sup>8</sup>个时钟周期，即少了4x10<sup>8</sup>个时钟周期</p><p>每条左移指令比乘法指令少了100个时钟周期，那么乘法指令个数即总共少的时钟周期/每条指令少的时钟周期</p><blockquote><p>p和p’的时间差是因为指令被替换了，而所有被替换的指令个数就是乘法指令个数</p></blockquote><p>2.此题MIPS为400</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200608152105898.png"  alt="image-20200608152105898"></p><p>答：平均CPI=2x0.5+ 3x0.2+4x0.1+5x0.2=3，即执行一个指令平均需要3个周期</p><p>MIPS为每秒可执行的百万条指令数，1.2GHZ为1200MHZ即一秒有1.2*10<sup>9</sup>个周期，总周期=一个指令所需周期*有多少指令。1200/3=400（M=10<sup>6</sup>,G=10<sup>9</sup>）</p><p>3.程序P在机器M上的执行时间是20s，编译优化后，P执行的指令数减少到原来的70%，而CPI增加到原来的1.2倍，则P在M上的执行时间是_______16.8s____</p><p>答：CPI即执行一条指令所需的时钟周期数。假设M机器原时钟周期为x,原CPI为y, P程序的指令数为z，可得P程序执行时间为xyz= 20s。</p><p>编译优化后M机器的CPI变为1.2y, P程序的指令数变为0.7z,则P程序执行时间为1.2*0.7xyz,故其执行时间为<br>16.8s。</p><p>4.某工作站采用时钟频率f为15MHz，处理速率为10MIP/S的处理机来执行一个已知混合程序。假定每次存储器存取为1周期延迟，此计算机的有效CPI是_______1.5_____________，假定将处理机的时钟频率提高到30MHz，但存储器子系统速率不变。这样，每次存储器存取需要两个时钟周期，如果30%指令每条只需要一次存储存取，而另外5%每条需要两次存储存取，还假定已知混合程序的指令数不变，并与原工作站兼容，则改进后的处理机性能相比原来的_______提高_____________</p><p>答：CPI即每个指令需多少周期，已知每秒有15*10<sup>6</sup>个周期，每秒可以处理10*10<sup>6</sup>个指令，那么总周期数/总指令数即为CPI</p><p>15*10<sup>6</sup>/10*10<sup>6</sup>=1.5    (注意和后面那个1周期延迟没有关系，不要被他迷惑，这个周期延迟已经被计算在前面的10MIP/s中了)</p><p>处理性能是否提高就看处理速率是否提高了。30%需要一次存取，由于每次存取增加了1周期延迟，那么这30%就得增加一个周期，而同理另外5%需要增加两周期。则CPI<sub>new</sub>=CPI<sub>原</sub>+30%*1+5%*2=1.9  (原CPI已经包括原来的1周期延迟，只需将计算新增的即可)</p><p>又已知现在每秒有30*10<sup>6</sup>个周期，那么处理速率为总周期数/每指令所需周期数=30×10<sup>6</sup>/(1.9×10<sup>6</sup>)= 15.79MIP/S，所以提高了</p><p>5.假定计算机M1和M2具有相同的指令集体系结构，主频分别为1.5 GHz和1.2 GHz。在M1和M2_上运行某基准程序P，平均CPI分别为2和1，则程序P在M1和M2_上运行时间的比值是?</p><p>答：M1的CPI为2即2周/指，而M2为1周/指。同样的程序P即指令数相同。M1的周期T1=1/1.5*10<sup>9</sup>，M2的周期T1=1/1.2*10<sup>9</sup></p><p>那么每条指令所需时间分别为2×T1和1×T2，指令数相同，那时间比值就等于一条指令所需时间比值即(2×T1)/(1*T2)=8/5</p><h1>运算方法和运算器</h1><h2 id="知识点-v2"><a class="header-anchor" href="#知识点-v2">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609143207561.png"  alt="image-20200609143207561" style="zoom: 80%;" />1.数字0在原码反码补码的表示</p><p>[+0]原码=0000 0000，  [-0]原码=1000 0000</p><p>[+0]反码=0000 0000，  [-0]反码=1111 1111</p><p>[+0]补码=0000 0000，  [-0]补码=0000 0000   （补码中是唯一的）</p><p>0的移码也是唯一的1000 0000</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609151740827.png"  alt="image-20200609151740827" style="zoom:67%;" /><p>由于补码0是唯一的所以补码范围要多一个负数(总共都是256个数)</p><p>2.对于规格化的浮点数，尾数有三种形式：（小数点左边的是符号位）</p><ul><li><p>原码表示时尾数的小数点后第一数位为1，数符任意</p></li><li><p>补码和反码表示时尾数的符号位与小数点后第一数位不同</p></li><li><p>1.1xx……X(原码)</p></li><li><p>1.0XX……X(补码、反码)</p></li><li><p>0.1xx……x(原码、补码、反码)</p></li></ul><blockquote><p>原理是保证   1&gt; |M|≥ 0.5</p></blockquote><p>3.余3码就是8421码加3所得</p><p>4.奇偶校验码：加上校验码后1的个数为奇数就是奇校验。不具备纠错能力。</p><p>5.海明码：设有k个数据位，则应设r个校验位，r满足2<sup>r</sup>-1 ≥ k + r 。发现两位错误纠正一位错误。</p><p>6.循环冗余检验码(CRC)：k位校验位拼接在n位数据位后面，即为n+k，发现并纠正一位或多位错误</p><p>7.A的ascii码：65            a的ascii码：97</p><p>8.已知[x]<sub>补</sub>，求[-x]<sub>补</sub>：将[x]<sub>补</sub>连同符号位求反+1</p><p>9.移码就是补码的符号位求反</p><blockquote><p>由于负数的补码如-21(101011)看着好像大于21(010101)，实际正好是21更大，所以浮点数的阶码用移码表示能直观的看出大小便于加减运算</p></blockquote><p>10.-1的补码永远是全1(可理解为全1加1等于全0)</p><p>11.由于补码溢出无法看出是上溢(大于最大数)还是下溢，因此引入变形补码</p><ul><li>两个符号位不同时表溢出(01为正溢出，10为负溢出(看第一位))</li><li>最高位那个数代表真正的符号位</li><li>两个符号位均参与运算，若进位舍去</li></ul><p>12.IEEE754计算公式：真值x=(-1)<sup>S</sup><em>1.M</em>2<sup>e</sup>（S为符号位(正还是负)，E为阶码(转换成e代表多少次方)，M为尾数(小数点后面的数)，顺序为SEM）其中e=E-127(可记成大E大所以要减)</p><p>13.补码的1000 0000为什么代表-128</p><p><strong>补码就是同余</strong>，比如-3的原码是1011而它的反码是1100则补码为1101,无符号的1101是13和-3正好模2<sup>4</sup>同余</p><p>所以给出一个负数的补码将其看为无符号数减去2<sup>n</sup>(n为总位数)即代表真值</p><p>为什么会这样呢？4位二进制可表示16个数，那么想表示负数怎么办，就用同余的思想，-1就用15表示，-2就用14表示，-3就用13(1101)表示</p><p>回到本题，给出补码求真值，将其看成无符号数即为128，与128模2<sup>8</sup>同余的负数即为-128（也可用128-2<sup>8</sup>计算）</p><p>14.IEEE754的尾数用原码表示，阶码用指数的移码-1表示（所以E=e+127）</p><h2 id="习题-v2"><a class="header-anchor" href="#习题-v2">¶</a>习题</h2><p>1.写出D=101101的海明码</p><p>答：:one:首先确定检验位的个数：k=6，2<sup>r</sup>-1 ≥ k + r即2<sup>r</sup> ≥7+r，所以r=4</p><p>:two:确定检验码的位置：检验码P<sub>i</sub>(i=1,2…)的位置为2<sup>i-1</sup>（2<sup>0</sup>,2<sup>1</sup>,2<sup>2</sup>…）</p><p>注意从M10到M1，从大到小且没有0</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609150117418.png"  alt="image-20200609150117418"></p><p>:three:求出检验码的值：校验位Pi的值即为所有需要Pi校验的数据位求异或。</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200609150430484.png"  alt="image-20200609150430484" style="zoom:80%;" /><p>如P2对应M2，需要它的有D1即M3(2+1)、D3即M6(2+4)、D4即M7(2+4+1)…</p><p>所以最后的海明码为1011100100</p><p>2.已知x=11011，y=-10101，用变形补码计算x+y</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609154616627.png"  alt="image-20200609154616627" style="zoom:70%;" /><blockquote><p>注意一定要先转换成补码再添符号位运算</p></blockquote><p>3.假设M(x)=x<sup>3</sup>+1(发送信息的多项式)，G(x)=x<sup>3</sup>+x+1(生成多项式，代表校验位信息)。</p><p>:one: 那么M(x)代表的二进制码为: 1001(1*x<sup>3</sup>+1*x<sup>0</sup>)，G(x)代表的二进制码为: 1011</p><p>:two:将M(x)的多项式左移G(x)的最高次数，变为1001 000</p><p>:three:将1001 000对1011做模2除法得到余数为110,将其与被除数1001合并得到CRC码1001 110</p><blockquote><p>这里要注意第三步的模2除法和普通除法不同，模2除法不会向上一位借位也不比较被除数和除数的大小(位数相同即可)，如图中第三位商数(1101&gt;1000但仍可做减操作)<img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609195155116.png"  alt="image-20200609195155116" style="zoom:80%;" /></p></blockquote><p>4.若浮点数x的754标准存储格式为(41360000)<sub>16</sub> ,求其浮点数的十进制数值。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609225853843.png"  alt="image-20200609225853843"></p><blockquote><p>注意阶码没有符号位</p></blockquote><p>5.将数(20. 59375)<sub>10</sub>转换成754标准的32位浮点数的二进制存储格式。</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200609230432591.png"  alt="image-20200609230432591"></p><p>6.某机器数为1000 0000B，若它代表0，则它是（原）码形式。若代表-128，则它是（补）码形式。若代表-127，则它是（反）码形式。</p><p>答：若是原码形式，就是-0。若是反码形式时，转换为原码就是1111 1111即-127(-(2<sup>7</sup>-1)) ，若是补码，1000 0000无符号时是2<sup>7</sup>=128，所以该补码代表-128（详情见上面知识点）</p><p>7.某机字长32位，其中1位符号位，31位表示尾数，若用定点小数表示，则最大正小数为多少？（B）</p><p>A.(1-2<sup>-32</sup>)B.(1- 2<sup>-31</sup> )C.2<sup>-32</sup>D.2<sup>-31</sup></p><p>答：这样的题就用4位的先试试。4位最大小数就是 0 111，也就是0.875  即1-2<sup>-3</sup>  所以可推出32位时最大是 1-2<sup>-31</sup></p><p>8.IEEE 754单精度浮点数格式表示的数中，最小的规范化正数为（A）</p><p>A.1.0x2<sup>-126</sup>B.1.0x2<sup>-127</sup>C.1.0x2<sup>-128</sup>D.1.0x2<sup>-149</sup></p><p>答：浮点数表示为1.M*2<sup>E</sup>，最小M为0,且E也要最小，这样往左移位越多数值越小，这样就转换成IEEE754中指数的最小值问题</p><p>对E来说，去除全1和全0(表0和无穷大)，E的范围为1~254，而e=E-127即e的范围为-126～+127，即指数最小为-126</p><p>所以本题答案为1.0*2<sup>-126</sup></p><p>9.若x=103,y=-25,则下列表达式采用8位定点补码运算实现时，会发生溢出的是 （ C ）</p><p>A.x+yB.-x+yC.x-yD.-x-y</p><p>答：不用转换成补码再算，直接算。四个选项中B的-128和C的128绝对值最大最可能溢出</p><p>而8位补码范围是-128~127，那就是C的128溢出了  (注意补码的0是唯一的所以多了个最大负数-128)</p><ol start="10"><li></li></ol><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200620135418708.png"  alt="image-20200620135418708"></p><p>答：这题的关键点是计算机使用补码参与运算的。-9的原码是1000 1001，补码是1111 0111，扩展到16位高位补1(也可写完整的16位原码再转换成补码)            x = 127，原码：0111 1111，补码：0111 1111，扩展到32位高位补0       z=x+y=118同理高位补0</p><p>11.整数x的机器数为1101 1000,分别对x进行逻辑右移1位和算术右移1位操作得到的机器数为_____________<u>0110 1100、1110 1100</u>______________</p><p>答：逻辑右移就是右移一位，左边补零即可。算术右移需要考虑符号位(算术要算所以补符号位)，右移一位，左边补符号位。</p><p>12.已知x=10111，y=11011，用变形补码求x-y</p><p>答：[x-y]<sub>补</sub>=[x]<sub>补</sub>+[-y]<sub>补</sub>，[x]补=00 10111，[-y]补=11 00101</p><p>00 10111+11 00101  =11 11100，结果没溢出转换为原码为1 00100即-00100  (注意得到的是补码要转换为真值)</p><blockquote><p>[y]补=00 11011，[-y]补=[y]补连同符号位求反加1=11 00101，当然也可直接求-11011的补码</p></blockquote><p>13.假定有4个整数用8位补码分别 表示r1=FEH,r2=F2H, r3=90H, r4=F8H,若将运算结果存放在 一个8位寄存器中，则下列运算会发生溢出的是（ B ）</p><p>A.r1×r2B.r2×r3C.r1×r4D.r2×r4</p><p>答：这种判断是否溢出的题就算出真值看看是否溢出。r1真值为-2，r2真值为-14，r3真值为-112，r4真值为-8</p><p>而这是补码运算最后得到的结果也是补码，8位补码范围为-128~127，所以显然r2*r3得到的结果转换为补码大于8位补码最大值</p><h1>多层次的存储器</h1><h2 id="知识点-v3"><a class="header-anchor" href="#知识点-v3">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610135354300.png"  alt="image-20200610135354300" style="zoom:80%;" /><p>1.存储器按存取方式可分为</p><ul><li><p>随机存取存储器（RAM）可读可写，断电即失(也称易失性)</p><ul><li>静态RAM(SRAM)   常用做高速缓冲存储器</li><li>动态RAM(DRAM)  常用做主存</li></ul></li><li><p>只读存储器（ROM）只读不写，断电保留(也称非易失性)</p></li><li><p>串行访问存储器</p><ul><li><p>顺序存取存储器（如磁带）</p></li><li><p>直接存取存储器（如磁盘）</p></li></ul></li></ul><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610140643769.png"  alt="image-20200610140643769" style="zoom:80%;" /><p>2.这些存储器名称中带E的都表示可擦除（可能出选择题，Erasable：可擦）</p><p>3.为了解决存储器大容量、低价格、高速度三者之间的矛盾关系，常采用多级存储器结构</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610140844977.png"  alt="image-20200610140844977" style="zoom:67%;" /><p><strong>缓存</strong>-主存层次主要解决CPU和主存速度不匹配的问题，数据交换由硬件完成。</p><p>主存-<strong>辅存</strong>层次主要解决存储系统的容量问题，数据交换由硬件和操作系统共同完成</p><p>4.存储器带宽就是每秒存储器存储的信息量</p><p>5.SRAM存取速度快但容量不如DRAM（记住SRAM用作高速缓冲存储器，速度肯定快）</p><blockquote><p>DRAM需要刷新会影响速度，所以SRAM速度更快但是价格昂贵</p></blockquote><p>6.DRAM采用电容存储，由于电荷量会减少所以必须定期(若不说明则是2ms)刷新,可分为</p><ul><li>集中刷新（集中到一段时间，集中歼灭）死时间是刷新总时间</li><li>分散刷新（每存取一次就刷新一次，分散歼灭）加倍存取周期实现死时间为0</li><li>异步刷新（折中方案，有计划的刷新）死时间就是一个存取周期</li></ul><blockquote><p>刷新的实质就是读出数据再写入（对行刷新，若不说明刷新一行等于一个存储周期）</p></blockquote><p>7.ROM也是随机存取(像数组下标一样访问)，但随机存取<strong>存储器</strong>要求可读可写，ROM只读，所以把ROM和RAM分开（第一个随机存取只是取信息的方式和存储器的随机存取含义不一样）</p><p>8.如果要求将容量为axb的芯片组成容量为cxd的芯片，假设需要芯片的数量为n,则n=(cxd)/axb     （a是字线连接地址线，b是位线连接数据线）</p><p>9.命中率：CPU要访问的信息在Cache中的比例（cache存取次数/(cache存取+主存存取)）</p><p>10.平均访问时间：t<sub>a</sub>=命中率×访问cache的时间+(1-命中率)×访问主存时间 (t<sub>a</sub>=ht<sub>c</sub>+(1-h)t<sub>m</sub>)</p><p>11.访问效率：访问Cache时间/平均访问时间 (e=t<sub>c</sub>/t<sub>a</sub>)</p><p>12.CPU与Cache之间传送数据的基本单位是字，而主存与Cache之间传送数据的基本单位是块(一块包括多个字)。（可理解为CPU容量少传输的也少，主存容量大传输的也大）</p><p>13.为了把主存的部分内容放到Cache中要把主存地址转换为Cache地址（因为主存和Cache用块传输，所以主要是块号的转换）</p><ul><li>直接映射        根据行号指定特定行比（适合大容量Cache）</li><li>全相联映射   与Cache所有行全都比（适合小容量Cache）</li><li>组相联映射   先根据组号找到对应组，再在组中一个一个比(折中的方法)</li></ul><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610171302861.png"  alt="image-20200610171302861"></p><blockquote><p>可以看到直接映射因为要找特定行，所以多了行号地址，组相联因为要找特定组所以多了组号地址，而全相联因为是一行一行比所以啥也没有</p></blockquote><p>14.替换策略：当要放新的东西而Cache满时就要替换</p><ul><li>最不经常使用(LFU即Least Frequently Used)算法     首先淘汰一定时期内被访问次数最少的</li><li>近期最少使用(LRU即Least Recently Used)算法     首先淘汰最长时间未被使用的</li><li>随机替换                              随缘替换</li></ul><p>15.Cache要和主存内容保持一致(CPU对Cache的写入更改了它)，所以要用到写操作策略</p><ul><li>写回法    只修改Cache的内容而不立即写入主存，此行被换出时写入主存</li><li>全写法(直写法、写直达)    Cache和主存同时修改</li><li>写一次法  处理和写回法一致，只是第一次命中要同时写入主存（折中处理）</li></ul><p>16.TLB(快表)、页表和Cache之间的命中关系</p><p>记住只要TLB(页表分为快表和慢表)和Cache有一个命中，页表一定命中，但页表命中那俩不一定命中(数据在主存不在Cache时)，也可能都不命中       （<strong>即页表最大</strong>）</p><p>17.DRAM采用地址复用技术，地址线为正常的一半，例如你计算的用10根地址线实际用5根就行 （先送行地址再送列地址）</p><h2 id="习题-v3"><a class="header-anchor" href="#习题-v3">¶</a>习题</h2><p>1.RAM和ROM的区别</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610145652114.png"  alt="image-20200610145652114"></p><p>答：RAM断电会失去信息而ROM不会，二者访问信息的方式都是随机存取。Cache需要可读可写，而Rom只能读不能写，肯定不适合。DRAM(动态RAM)才需要刷新。</p><p>2.Flash存储器</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610150200185.png"  alt="image-20200610150200185"></p><p>3.假定用若干个2K×4位芯片组成一个8K×8位存储器，则地址0B1FH所在芯片的最小地址是</p><p>答：8k*8/2k*4=8，需要8个芯片，8k=2<sup>13</sup>，所以需要13位地址。2个4位的芯片构成一个8位的(存取数据一次最少8位)，所以需要4组，片选地址为2位(位扩展两个要选中都是同时选中，所以只看字扩展)，剩下的为片内地址</p><p>:one: 每组芯片是2k*8即11个地址线，4组需要2位片选信号，所以每组后11位是从全0到全1</p><p>第1组芯片地址范围：000==0 0==000 0000 0000 ~ 0000 0111 1111 1111（黄色的为片选信号）</p><p>第2组芯片地址范围：000==0 1==000 0000 0000 ~ 0000 1111 1111 1111</p><p>第3组芯片地址范围：000==1 0==000 0000 0000 ~ 0001 0111 1111 1111</p><p>第4组芯片地址范围：000==1 1==000 0000 0000 ~ 0001 1111 1111 1111</p><p>0B1FH的地址格式是0000 1011 0001 1111，可知是第二组中的一个地址，这个地址所在芯片最小的为地址为0000 1000 0000 0000，即0800H</p><p>4.某计算机存储器按字节编址，主存地址空间大小为64MB，现用4MB×8位的RAM芯片组成32MB的主存储器，则存储器地址寄存器MAR的位数至少是（26位）。</p><p>答：MAR要能寻址整个存储器，虽然题目说组成32MB的主存，但是剩余的32MB以后也会用，所以也要考虑，64MB=2<sup>26</sup>，所以最少26位</p><p>5.假设 Cache完成缓存的次数为 2000次，主存完成存取的次数为50次。已知Cache的存储周期为50ns，主存的存储周期为200ns，试求:命中率、平均访问时间、效率。</p><p>答：:one:命中率为  2000/(2000+50)=97%</p><p>:two:t<sub>a</sub>=ht<sub>c</sub>+(1-h)t<sub>m</sub>=0.97*50ns+(1-0.97)*200ns=54.5ns（a表average,c表cache,m表main）</p><p>:three:效率e=t<sub>c</sub>/t<sub>a</sub>=50/54.5=91.7%</p><p>6.一个组相联cache由64个行组成，每组4行。主存储器包含4K个块，每块128字。请表示内存地址的格式。</p><p>答：128字=2<sup>7</sup>，所以字地址位数为7</p><p>Cache共64行，每组4行，所以需要16组，16=2<sup>4</sup>，即只需4位组号地址即可表示16组</p><p>:one: 主存有4k个块，每块128字，所以总共4k*128=2<sup>19</sup>，19-4-7=8即8位标记位</p><p>:two: 主存有4K个块，4k=2<sup>12</sup>，12-4=8，所以标记位需要8位</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610172722721.png"  alt="image-20200610172722721"></p><blockquote><p>注意这些地址是存放在主存的，所以总位数和主存的容量保持一致</p></blockquote><p>7.某容量为256MB的存储器由若干4M×8位的DRAM芯片构成，该DRAM芯片的地址引脚和数据引脚总数是 __________<em><strong>19</strong></em></p><p>答：注意是DRAM采用地址复用，4M=2<sup>22</sup>，地址复用所以11根就行，11+8=19</p><blockquote><p>注意地址线是2<sup>n</sup>(译码器译码)，而数据线是一个线对应一位</p></blockquote><p>8.下列各类存储器中,不采用随机存取方式的是( B)<br>A.EPROM               B.CD-ROM           C.DRAM            D.SRAM</p><p>答：CD-ROM即光盘，采用串行存取方式，它是只读型光盘存储器，不属于只读存储器ROM</p><p>9.某存储器容量为64KB ,按字节编址,地址4000H-5FFFH位ROM区,其余为RAM区,若用8Kx4位的SRAM芯片设计,则需要该芯片的数量为_______14____</p><p>答：这题主要是计算ROM区的容量，4000~5FFFH有5FFF-4000+1=2000H，而2000H=2<sup>13</sup>=8k（转换成二进制1在从右到左第13位(0开始)可类比10是2即2<sup>1</sup>），剩下的56kb为RAM，(56k*8)/(8k*4)=7*2=14</p><p>10.某系统的存储器为2MB，每字块为8个字，每字32位，若Cache为16KB，采用字节编址方式。</p><p>(1)采用直接映射，主存地址格式是什么？</p><p>(2)采用全相联映射，主存地址格式是什么？</p><p>(3)采用16路组相联映射，主存地址格式是什么？</p><p>答：一般都只给每块多少字写字号地址就行，既然这题说明一个字多少位了那么就要有字节地址<img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610231019657.png"  alt="image-20200610231019657" style="zoom:80%;" /></p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610231039381.png"  alt="image-20200610231039381" style="zoom:80%;" /><p>16路组相联即每组16块，16kb是2<sup>14</sup>是字节即有2<sup>14</sup>*2<sup>3</sup>=2<sup>17</sup>位，现在需要知道有多少组</p><p>组数=2<sup>17</sup>/2<sup>4</sup>(每组16块)*2<sup>3</sup>(每字块8个字)*2<sup>5</sup>(1个字32位)=2<sup>5</sup>，所以组地址为5位</p><blockquote><p>注意单位要一致，kb是字节，也可以32位换算成字节计算</p><p>注意行号和组号是Cache的，块号地址是主存的，根据Cache的行号或组号把主存的块号映射到Cache中，这也是上面根据Cache容量推行号位数的原因。</p><p>如全相联，给定一个地址，CPU先根据块内地址然后依次和Cache的每行比较(通过标记)，若命中则按块内地址读取相关内容，若未命中就得到主存去读了(Cache命中率)</p></blockquote><p>11.某计算机存储器按字节编址，采用<strong>小端方式存放数据</strong>。 假定编译器规定int型和short型长度分别为32位和16位 ，并且<strong>数据按边界对齐存储</strong>。 某C语言程序段如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span> </span><br><span class="line">  <span class="keyword">int</span> a；</span><br><span class="line">  <span class="keyword">char</span> b；</span><br><span class="line">  <span class="keyword">short</span> c；</span><br><span class="line">&#125;record；</span><br><span class="line">record.a=<span class="number">273</span>；</span><br></pre></td></tr></table></figure><p>若record变量的首地址为0XC008, 则低地址0XC008中内容为（）及record.c的地址是 （ ）</p><p>答：273 = 0X0000 0111(注意是十六进制不是二进制)，采用小端方式存放数据即高字节存放高地址，低字节存放低地址，273的低字节是11，所以低地址存11(往后依次是01,00,00)</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610234723093.png"  alt="image-20200610234723093" style="zoom:80%;" /><p>由上图看到0xC00D空了下来，因为题目说数据按边界对齐存储，b后面的c是short2字节，所以c的首地址也得是2的倍数(这样存储器访问一次就可取到数据，若不这样可能存储器一次取的正好是c的一部分，需要再访问一次才能得到完整的c，2的倍数则保证每次都能一次取到)</p><p>所以答案为0X11、0XC00E。</p><p>12.某计算机主存地址空间大小为256 MB， 按字节编址。虚拟地址空间大小为 4 GB，采用页式存储管理，页面大小为 4 KB， TLB（快表）采用全相联映射，有 4 个页表项， 内容如下表所示。则对虚拟地址03FF F180H 进行虚实地址变换的结果是（ ）</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200620230255835.png"  alt="image-20200620230255835" style="zoom:80%;" /><p>答：虚存地址空间4GB，则虚地址长度为32位。主存地址空间256MB，则主存地址长度为28位。页面大小4KB，则页内地址长度为<strong>12位</strong>。虚拟地址03FF F180H中<strong>180H</strong>为页内地址(十六进制的3位即二进制的12位和页内地址长度对应)，03FFFH(20位)为虚页号，查TLB(快表)发现，该页在主存中，其实页号为0153H，所以虚实地址变换后的结果为0153 180H(对应主存的28位)。</p><blockquote><p>TLB根据标记找若找到了但是有效位是0代表TLB缺失。若没找到去页表找若找到了但有效位是0代表缺页。</p></blockquote><p>13.某计算机的 Cache 共有 16 块，采用 2 路组相联映射方式，每个主存块大小为 32 字节，按字节编址。主存 129 号单元所在主存块应装入到 Cache 的组号是（ C ）</p><p>A.0B.2C.4D.6</p><p>答：采用2路组相联,所以一共是8组,从0开始,0 1 2 3 4 5 6 7.主存的某一字块按模8映像到Cache中的任一字块中.比如说主存中第0、8、16 字块是映像到Cache里第0组。每个主存块大小32字节，0-31号单元在第0块,32-63号单元在第1块,64-95号单元在第2块,96-127号单元在第3块.由此可见,主存129号单元位于主存中第4块的位置那么对应第4组</p><blockquote><p>注意块号和单元号都是从0开始</p></blockquote><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200620233829884.png"  alt="image-20200620233829884" style="zoom:80%;" /><p>14.若数组a及变量k均为int型，int型数据占4B，数据Cache采用直接映射方式，数据区大小为1KB、块大小为16B，该程序段执行前Cache为空，则该程序段执行过程中访问数组a的Cache缺失率约为 （ C ）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;<span class="number">1000</span>; k++)   </span><br><span class="line">a[k] = a[k]+<span class="number">32</span>;</span><br></pre></td></tr></table></figure><p>A.1.25%B.2.5 %C.12.5%D.25%</p><p>答：块大小为16B而int数据4B即每块有4个int数据。a[k] = a[k]+32;首先读取a[k]需访问一次a[k]，之后将结果赋值给a[k]又需要访问一次，即一个int访问两次。第一次访问a[k]未命中，并将该字所在的主存块调入Cache对应的块中。4个整数的各两次访问中只在访问第一个的第一个次时发生缺失，所以缺失率约为1/8=12.5%</p><h1>指令系统</h1><h2 id="知识点-v4"><a class="header-anchor" href="#知识点-v4">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200611145349442.png"  alt="image-20200611145349442" style="zoom:80%;" /><p>1.CISC：复杂指令系统计算机  （常用的20%频率占80%）C表Complex</p><p>RISC：精简指令系统计算机        少、固定、小但是寄存器数量多</p><p>2.二地址指令中根据操作数的物理位置，可分为</p><ul><li>SS(存储器-存储器)        速度最慢</li><li>RS(寄存器-存储器)        速度中间</li><li>RR(寄存器-寄存器)       速度最快</li><li>助记：S表Storage即存储器，R表Register即寄存器</li></ul><p>3.指令字长：一条指令所占的存储空间大小即二进制代码位数</p><p>机器字长：计算机一次能直接处理的二进制位数</p><p>若指令字长 = 机器字长，则称它为单字长指令，类比还有半字长指令、双字长指令</p><p>4.数据字和指令字的区别：一个字如果表数据那就是数据字，如果表指令那就是指令字</p><p>5.定长操作码指令：指令字的高位部分固定位数表示操作码，n位操作码最多表示2<sup>n</sup>条指令</p><p>6.不定长操作码设计规则</p><ul><li>不允许较短的是较长的前缀（这样可根据前缀直接判断它是零地址还是一地址…）</li><li>频率较高的指令分配较短的指令</li></ul><p>7.不定长操作码中的扩展位可理解成一个标志，你看到这个标志就知道它是0地址还是1地址…</p><p>8.指令寻址：找到下一条将要执行指令的地址</p><ul><li>顺序寻址（按顺序来如1-&gt;2-&gt;3）</li><li>跳跃寻址            （发生跳跃如1-&gt;2-&gt;6）</li></ul><p>9.数据寻址：找到当前正在执行指令的数据地址   多种寻址方式是为了压缩地址码长度</p><ul><li>隐含寻址       操作数隐含在某寄存器中</li><li>立即寻址       指令字中给出立即数，如MOV AX,1234H                         操作数=A</li><li>直接寻址       指令字中直接给出操作数的有效地址，如MOV AX,[8054H]             EA=A</li><li>间接寻址       指令字中给出的是操作数有效地址<strong>的地址</strong>                                           EA=(A)</li><li>寄存器寻址   指令字中给出寄存器的编号，根据编号取寄存器的数值                    EA=R<sub>i</sub></li><li>寄存器间接寻址  与寄存器寻址不同的是寄存器存的数值是操作数的有效地址      EA=(R<sub>i</sub>)</li><li>偏移寻址     A由指令字给出，R隐含给出           A+R的内容                              EA=A+®<ul><li>相对寻址        PC：程序计数器                                                                      EA=A+(PC)</li><li>基址寻址        BR：基址寄存器   形式地址A可控，(BR)不可控                   EA=A+(BR)</li><li>变址寻址        IX：变址寄存器    形式地址A不可控，IX的内容可控            EA=A+(IX)</li></ul></li></ul><blockquote><p>A表指令字给出的形式地址，(A)表A的内容，EA表有效地址</p></blockquote><p>10.低字节地址为字地址：低位字节的地址是字的起始地址</p><p>0X1234（左边是高字节，右边是低字节(可理解成右面是个位所以小)）</p><p>如0X4000：0X34             0X4001：0X12   即先存字符低位</p><h2 id="习题-v4"><a class="header-anchor" href="#习题-v4">¶</a>习题</h2><p>1.假设指令字长固定为16位，试设计一套指令系统满足以下要求:</p><p>1)有15条三地址指令。                             2)有12条二地址指令。<br>3)有62条一地址指令。                             4)有30条零地址指令。</p><p>答：三地址操作码15条用4位操作码即可，剩下的1111用作扩展(即只要看见前四个是1111那它就肯定是二地址指令)</p><p>12条二地址指令又需要4位操作码，即<strong>1111</strong> 0000 ~ <strong>1111</strong> 1011（12条）</p><p>剩余的1111 1100 ~ 1111 1111可用来扩展一地址指令(即看到前缀是它就代表是一地址指令)</p><p>1111 1100 ~ 1111 1111有4种情况后面加4位可达2<sup>4</sup>*4=64，大于一地址的62条，所以</p><p><strong>1111 1100</strong> 0000 ~ <strong>1111 1100</strong> 1111（16条）<strong>1111 1101</strong> 0000 ~ <strong>1111 1101</strong> 1111（16条）</p><p><strong>1111 1110</strong> 0000 ~ <strong>1111 1110</strong> 1111（16条）<strong>1111 1111</strong> 0000 ~ 1111 1111 1101（14条）</p><p>剩余的1111 1111 1110 ～ 1111 1111 1111可用来扩展零地址指令</p><p>再加4位可表示16位，两种拓展码总共表示32种情况而题目0地址只有30条舍去最后两条即可</p><p>1111 1111 1110 0000 ～ 1111 1111 1110 1111（16条）</p><p>1111 1111 1111 0000 ～ 1111 1111 1111 1101（14条）</p><blockquote><p>拓展码代表这个指令是0地址还是1地址，后面的才代表这种地址码有多少条指令</p><p>多地址指令操作码要最短(存放的地址多)，0地址操作码占满16位，而三地址操作码仅占4位，剩下的12位用来存放三个地址</p></blockquote><p>2.设相对寻址的转移指令占两个字节，第一节是操作码，第二字节是相对位移量（用补码表示），若CPU每当从存储器中取出一个字节时，即自动完成PC+1 -&gt; PC。设当前PC的内容为2009H，要求转移到2000H地址，则该转移指令的第二字节的内容是（F5H）</p><p>答：当前PC为2009H，取指令后变为200BH（要先取指令再执行，取两次所以加2）</p><p>2000H-200BH=-11  (相对寻址都是加偏移量，只有偏移量是负的才能使PC数值减小)</p><p>-11的原码为1000 1011，反码为1111 0100，补码为1111 0101即F5H (题目说了用补码表示)</p><p>3.CISC和RISC的区别</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200611173134098.png"  alt="image-20200611173134098"></p><p>答：由于RISC比较简单，因此大多都是在一个时钟周期内完成。特殊的是RISC寄存器此CISC多，因此更能提高计算机速度。CISC更复杂因此种类啥的都比较多。RISC采用组合逻辑控制CISC才会用到微程序控制(可理解为RISC比较简单用不到那么复杂的微程序控制用逻辑电路即可)</p><p>4.某计算机按字节编址，指令字长固定且只有两种指令格式，其中三地址指令29条，二地址指令107条，每个地址字段为6位，则指令字长至少应该是____________24_________</p><p>答：三地址指令有29条，所以它的操作码至少为5位。2<sup>5</sup>=32，它剩余32-29=3种操作码给二地址。而二地址比三地址少了一个地址的位数多了6位给操作码，因此它数量最大达3*64=192。所以指令字长最少为23位（ 6 + 6 +6 + 5 = 23），因为计算机按字节编址，<strong>需要是8的倍数</strong>，所以指令字长至少应该是24位</p><blockquote><p>同样是24位，3地址时是3个地址位+操作码5位，而2地址时是11位操作码和两个地址位</p></blockquote><p>5.某计算机存储器按字编址(16位)读取这条指令后，PC的值自动加1,则说明该指令的长度是( 2 )个字节</p><p>答：主要看按字节编址还是按字编址。按字寻址可理解为把字编上号然后去找编号。PC加1的目的是自动指向下一条指令的地址即加了一个编号也就是16位，而16位占了2个字节</p><p>6.假设变址寄存器R 的内容为1000H，指令中的形式地址为 2000 H；地址 1000H 中的内容为2000H，地址    2000H 中的内容为 3000H，地址 3000 H 中的内容为 4000H， 则变址寻址方式下访问到的操作数是（ D ）。</p><p>A.1000HB.2000HC.3000HD.4000H</p><p>答：变址寻址中EA=A+®。这里的A即形式地址也就是指令中直接给出的，®表寄存器R的内容。EA=2000H+1000H=3000H，而这个3000H代表的是有效地址，根据地址取值即4000H</p><p>7.某计算机有16个通用寄存器，采用32位定长指令字操作码字段（含寻址方式位）为8位，Store指令的源操作数和目的操作数分别采用寄存器直接寻址和基址寻址方式，若基址寄存器可使用任一通用寄存器，且偏移量用补码表示，则Store指令中偏移量的取值范围是  （ A ）</p><p>A.-32768~+32767B.-32767~+32768C.-65536~+65535D.-65535~+65536</p><p>答：采用32位定长指令字,其中操作码为8位,两个地址码一共占用32-8=24位。</p><p>而Store指令的源操作数和目的操作数分别采用寄存器直接寻址和基址寻址,有 16 个通用寄存器，则寻址一个寄存器需要4 位。</p><p>源操作数中的寄存器直接寻址用掉4位, 而目的操作数采用基址寻址也要指定一个寄存器,同样用掉 4 位,则留给偏移址的位数为24-4-4=16 位。而偏移址用补码表示,16 位补码的表示范围为-32768~+32767</p><blockquote><p>可类比8位补码表示范围是 -128～ +127，注意负数多一位</p></blockquote><p>8.假定编译器将赋值语句“x=x+3;”转换为指令“add xaddr, 3”，其中xaddr是x对应的存储单元地址。若执行该指令的计算机采用页式虚拟存储管理方式，并配有相应的TLB，且Cache使用直写（Write Through）方式，则完成该指令功能需要访问主存的次数至少是（ B ）</p><p>A.0B.1C.2D.3</p><p>答：上述指令的执行过程可分为取数、运算和写回过程，取数时读取xaddr可能不需要访问主存而直接访问Cache，但直写方式也即全写法必须要把数据同时写入Cache和主存，因此至少访问1次。</p><h1>中央处理器</h1><h2 id="知识点-v5"><a class="header-anchor" href="#知识点-v5">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616172236584.png"  alt="image-20200616172236584"></p><p>1.CPU = 运算器(对数据加工) + 控制器(协调控制各指令序列) + Cache</p><p>2.CPU主要有如下5种功能</p><ul><li><p>指令控制：控制器自动形成指令的地址，并发出取指令的命令，将对应的指令取到控制器中。</p></li><li><p>操作控制：取指令后，产生完成每条指令所需的控制命令</p></li><li><p>时间控制：控制命令产生后，需要对各种控制命令加以时间上的控制</p></li><li><p>数据加工：在执行的过程中，可能需要进行算术运算和逻辑运算</p></li><li><p>中断处理：就是处理中断的能力</p></li></ul><p>3.CPU至少需要六类寄存器，它们分别为</p><ul><li>数据缓冲寄存器(DR)：暂存数据</li><li>指令寄存器(IR)：保存正在执行的一条指令</li><li>程序计数器(PC)：存放第一条指令的地址，每次加一更换成下条指令地址</li><li>数据地址寄存器(AR)：保存当前CPU访问的Cache中单元的地址</li><li>通用寄存器(R<sub>0</sub><sub>R</sub>3~)：存放操作数和各种地址信息（如AX，BX等）</li><li>状态字寄存器(PSW)：保存各种状态条件控制标志，如进位标志、中断标志等</li></ul><p>4.指令周期：CPU取出并执行一条指令的时间，由若干机器周期组成</p><p>机器周期： 完成某个独立操作的时间，由若干时钟周期组成</p><p>时钟周期： 最基本时间单位，由主频决定</p><p>5.指令执行方案：</p><ul><li>单指令周期                  所有指令用相同的执行时间</li><li>多指令周期                  不同类型的指令用不同的步骤完成</li><li><strong>流水线</strong>方案                  指令之间并行执行</li></ul><p>6.CPU主频(时钟频率)对应的是时钟周期，每个机器周期(CPU周期)包含好几个时钟周期</p><p>7.大小顺序为：机器程序=微<strong>程序</strong> &gt; 微<strong>指令</strong> &gt; 微<strong>命令</strong>=微操作</p><p>微<strong>命令</strong>：控制部件向执行部件发出的各种控制命令。而微操作是微命令的执行过程。</p><p>微<strong>指令</strong>：若干微命令的集合</p><p>微<strong>程序</strong>：若干微指令的有序集合，而一条机器指令对应着一个微程序</p><blockquote><p>机器指令由微程序解释执行，微程序由微指令构成，微指令由微命令构成</p></blockquote><p>8.微操作分为相容性和相斥性</p><ul><li>相容性：同一个CPU周期可以并行执行微操作（也叫兼容性）</li><li>相斥性：同一CPU周期不能并行执行微操作</li></ul><p>9.微命令编码</p><ul><li><p>直接控制法：每一位代表一个微命令。</p></li><li><p>直接编码法：相斥的n个微命令可以采用编码法表示，占log<sub>2</sub><sup>(n+1)</sup>位。</p></li><li><p>混合编码法：相斥微命令采用直接编码法，相容微命令采用直接控制法。</p></li></ul><p>10.数据相关分为以下三类，注意读后写(WAR)啥的英文缩写是从后往前读！</p><ul><li><p>RAW(写后读)：应该先写入再读，但现在没写入就读了，出现错误</p></li><li><p>WAR(读后写)：应该先读再写，但现在是写入后再读了，出现错误</p></li><li><p>WAW(写后写)：应该先一个写入另一个再写入，但现在写入的顺序反了，出现错误</p></li></ul><blockquote><p>数据旁路是解决数据相关的一种方法(不用等前一条指令把结果写回寄存器组，结果直接作为输入给下一个指令)</p></blockquote><h2 id="习题-v5"><a class="header-anchor" href="#习题-v5">¶</a>习题</h2><p>1.XXX对程序员是透明的表示程序员看不见XXX（不可见就是不可改变）<img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200616192930989.png"  alt="image-20200616192930989"></p><p>2.判断RAW、WAR…<img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200617152100918.png"  alt="image-20200617152100918"></p><p>答：:one: 先将结果送到R1，再取出R1参与运算。先写再读即写后读（RAW注意顺序）</p><p>:two: 先读R2再将结果送到R2。先读再写即读后写（WAR）</p><p>:three: 先将第一条指令结果送入R3再将第二条指令结果送到R3，先写后写即写后写</p><p>3.某计算机的控制器采用微程序控制方式，微指令中的操作控制字段采用字段直接编码法，共有33个微命令，构成5个互斥类，分别包含7、3、12、5和6个微命令，则操作控制字段至少有___________________15位___</p><p>答：33个微命令构成5个互斥类，分别包含7、3、12、5和6个微命令，另外每组必须<strong>增加一种不发命令的情况</strong>，则5个段分别需要8、4、13、6和7种状态，分别对应3(2<sup>3</sup>=8)、2、4、3和3位，共15位。</p><p>4.CPU中跟踪指令<strong>后继地址</strong>的寄存器是_______程序计数器______</p><p>5.在微程序控制器中,构成控制信号序列的最小单位是（ B ）</p><p>A.机器指令          B.微命令                       C.微指令                D.微程序</p><p>答：可以看到这几个选项中微命令最小所以选它</p><p>6.在微程序控制器中，执行指令微程序的首条微指令地址是(  D  )得到的。</p><p>A．程序计数器          B．前条微指令          C．μPC          D．指令操作码映射</p><p>答：执行指令微程序的首条微指令地址由指令操作码译码的结果，通过专门的硬件提供。后续地址才会用到程序计数器。</p><p>7.指令流水线有取指(IF)、译码( ID)、执行(EX)、访存(MEM)、写回寄存器堆(WB)五个过程段,共有20条指令连续输人此流水线。</p><p>(1)画出流水处理的时空图，假设时钟周期为100ns。<br>(2)求流水线的实际吞吐率(单位时间里执行完毕的指令数)。<br>(3)求流水线的加速比。</p><p>答：(2)中20条指令花了24个时钟周期的时间直接计算即可（注意时间的单位）</p><p>(3)中的加速比指的是不使用流水线和使用流水线时间的比值也就是所需时钟周期个数之比。</p><blockquote><p>不用流水线就是顺序执行，一个一个来即20*5（一个取值等过程需要一个时钟周期）</p></blockquote><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200622154629411.png"  alt="image-20200622154629411" style="zoom:80%;" /><h1>总线系统</h1><h2 id="知识点-v6"><a class="header-anchor" href="#知识点-v6">¶</a>知识点</h2><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200617162846524.png"  alt="image-20200617162846524" style="zoom:80%;" /><p>1.总线：是连接多个部件的信息传输线，是各部件共享的传输介质。</p><p>2.总线大致分为三类：</p><ul><li>内部总线：CPU内部各寄存器与运算部件之间的总线</li><li>系统总线：连接其他高速功能部件的总线<ul><li>数据总线：传送各功能部件之间的数据，为双向传输</li><li>地址总线：指定主存和I/O设备接口电路地址，为单向传输</li><li>控制总线：发出各种控制信号</li></ul></li><li>I/O总线：中、低速I/O设备之间互相连接的总线</li></ul><p>3.地址线和数据线复用：地址线和数据线用一条线，一个周期传地址，一个周期传数据</p><p>4.总线宽度：通常指数据总线的根数</p><p>总线带宽：单位时间内总线传输的位数    （可理解为数据传输速率）</p><p>5.总线结构可分为</p><ul><li>单总线结构：将CPU、主存、IO设备连接在一组总线上</li><li>多总线结构：高速、中速、低速设备连接在不同的总线上同时工作，提高效率</li></ul><p>6.CPU-PCI：北桥       PCI-ISA：南桥</p><p>CPU总线：也称CPU-存储器总线</p><p>PCI总线：连接高速的I/O设备</p><p>ISA总线：连接低速I/O设备</p><p>7.串行传送：每次一位传送，不管传多少数据只用一条线</p><p>并行传送：若有32条线，一次就能传送32位，快但是成本高</p><p>8.共享的总线会出现同一时刻多个设备竞争主线控制权，就要从中选择一个</p><ul><li>集中式仲裁 （重点）<ul><li>链式查询：离总线设备越近优先级越高</li><li>计数器查询：地址线的计数值和请求总线的设备地址一致，该设备获得总线控制权</li><li>独立请求：每个设备均有总线请求信号和总线同意信号，根据排队电路判定</li></ul></li><li>分布式仲裁</li></ul><p>9.总线定时指事件出现在总线上的时序</p><ul><li>同步定时：采用统一的时钟信号协调发送和接收方的传送定时关系</li><li>异步定时：同步是在各模块速度一致的情况使用，异步没有公共时钟，采用应答(握手)方式，主模块发请求信号待从模块反馈后开始通信</li></ul><blockquote><p>同步定时比异步定时传输频率高的原因正是其具有统一的公共时钟信号进行同步</p></blockquote><p>10.系统总线标准分为：ISA、EISA、VESA、PCI、PCI-Express（可能出选择题）</p><h2 id="习题-v6"><a class="header-anchor" href="#习题-v6">¶</a>习题</h2><p>1.假设某系统总线在一个总线周期中并行传输4B信息，一个总线周期占用两个时钟周期，总线时钟频率为10MHz，则总线带宽是(  20MB/s   )。</p><p>答：总线宽度是单位时间内传输的位数，通常用每秒钟传输的字节数表示。4B即4字节。总线时钟周期为1/10MHz=0.1us，由题意得每0.2us可传输4B。那么每秒可以传输4B/0.2us=4B/0.2*10<sup>-6</sup>s=20MB/s</p><p>2.答：CRT是纯平显示器     CPI是一条指令所需时钟周期个数     RAM是随机存储器<img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200617182657948.png"  alt="image-20200617182657948"></p><p>3.下列关于多总线结构的叙述中，错误的是 ____<em><strong>D</strong></em></p><p>A.靠近CPU的总线速度较快B.存储器总线可支持突发传送方式</p><p>C.总线之间须通过桥接器相连D.PCI-Express×l6采用并行传输方式</p><p>答：突发传送方式把多个数据单元作为一个独立传输处理，从而最大化设备的吞吐量。一般用支持突发传送方式的总线提高存储器的读写效率。各总线通过桥接器相连，后者起流量交换作用PCI-Express总线都采用串行数据包传输数据</p><p>4.关于提高总线传输率的问题</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200617184609687.png"  alt="image-20200617184609687"></p><p>答：传输率就是每秒传输的数据。增加宽度、提高效率、突发传输(多个单元当做一个传送)都可以提高传输率。地址/数据线复用就是地址和数据线用一个线和每秒传输多少数据没关系。</p><p>5.某同步总线采用数据线和地址线复用方式，其中地址/数据线有32根，总线时钟频率为66MHz，每个时钟周期传送两次数据（上升沿和下降沿各传送一次数据），该总线的最大数据传输率（总线带宽）是 ___<em><strong>C</strong></em></p><p>A.132MB/s       B.264MB/s             C.528MB/s             D.1056MB/s</p><p>答：数据线32根代表一次传输32位即4字节(4B)，66MHz即一秒有66M个时钟周期，而每个周期传两次(上下各一次)，即66M/s×2×4B=528MB/s</p><p>6.下列关于总线设计的叙述中，错误的是 ___<em><strong><strong>A</strong></strong></em></p><p>A.并行总线传输比串行总线传输速度快         B.采用信号线复用技术可减少信号线数量</p><p>C.采用突发传输方式可提高总线数据传输率 D.用分离事务通信方式可提高总线利用率</p><p>答：通常并行一次能传多位数据看着是比串行的速度快，但时钟频率达到一定程度时并行之间的导线会互相影响所以A不是绝对的。</p><p>信号线复用就是线复用不同周期传不一样的信息确实可以减少数量(注意复用)。</p><p>突发传输是一个总线周期可以传输多个存储地址连续的数据也可提高传输率。</p><p>分离事务通信即通过在不传送数据期间释放总线，使得其他申请者能使用总线，以此来提高总线利用率</p><p>7.在集中式总线仲裁中，（B）方式相应时间最快，（A）方式对（C）最敏感</p><p>A.菊花链方式B.独立请求方式C.电路故障D.计数器定时查询</p><p>答：独立请求有请求信号和同意信号最快但也最贵。菊花链(链式)若a<sub>i</sub>位置发生故障则其之后的都不能工作</p><p>8.采用串行接口进行7位ASCII码传送，带有1位奇/偶校验位为1位起始位和1位停止位，当波特率为9600b/s时，字符传送速率为（A）</p><p>A．960 B．873C．1371 D．480</p><p>答：波特率可理解为比特率，即每秒9600比特。7位ASCII和3位起始停止校验共10位，也就是1个字符要占10位。那传输率就等于总比特除1个字符所占比特即9600/10=960</p><h1>外存与IO设备</h1><h2 id="知识点-v7"><a class="header-anchor" href="#知识点-v7">¶</a>知识点</h2><p>1.磁道：就是磁盘的一个同心圆，每个磁道又分为多个扇区(磁道的某个弧段)</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200622202745718.png"  alt="image-20200622202745718" style="zoom: 80%;" /><p>2.<strong>道</strong>密度：单位长度有多少个磁<strong>道</strong>数(同心圆)           多少道</p><p>3.<strong>位</strong>密度：单位<strong>磁道</strong>长度能记录的二进制的<strong>位</strong>数      多少位</p><p>4.磁盘容量：面数×每面磁道数×每条磁道的二进制位数</p><p>5.磁盘平均存取时间：T<sub>a</sub>=寻道(找哪一圈)+延迟(找圈中哪个扇区)+传输(读写扇区时间)</p><p>6.数据传输速率：磁盘单位时间向主机传送的字节数（字节/秒）</p><ul><li>D<sub>r</sub>=rN      r为转速即每秒转多少圈(磁道)，N为每个磁道的容量</li><li>D<sub>r</sub>=D*v   D为位密度即单位磁道的位数，v为线速度即每秒能沿着圈走多长</li></ul><p>7.一个磁盘片有两个面，一个磁盘组有很多片(n)，但最上面和最下面的面不能用(即2n-2可用)</p><p>8.显示器刷存带宽=分辨率×每个像素点颜色深度×刷新速率(帧频)</p><h2 id="习题-v7"><a class="header-anchor" href="#习题-v7">¶</a>习题</h2><p>1.磁盘组有6片磁盘， 每片有两个记录面，最上最下两个面不用。存储区域内径(直径)22cm,外径33cm,道密度为40道/cm，内层位密度400位/cm，转速6000转/分。问:</p><p>(1) 共有多少柱面?<br>(2)盘组总存储容量是多少?<br>(3)数据传输率多少?<br>(4)采用定长数据块记录格式，直接寻址的最小单位是什么?寻址命令中如何表示磁盘地址?<br>(5) 如果某文件长度超过一一个磁道的容量，应将它记录在同一个存储面上，还是记录在同一个柱面上?</p><p>答：(1)：有效存储区域为16.5-11=5.5(cm)，道密度为40道/cm，所以共40*5.5=220道即220个圆柱面（就是一面有多少圈）</p><blockquote><p>要用半径而不是直径因为总圈数用半径算即可，另一半和这一半用的是同一个圈</p></blockquote><p>(2)：内层磁道周长为2πR=2X3.14X11= 69.08(cm)     因为给的是内径密度所以算内径周长<br>每道信息量=400位/cmX 69.08cm=27632 位= 3454B    即一圈信息量  位密度×圈长度<br>每面信息量= 3454BX 220= 759880B     一面一共220圈     道信息×道数<br>盘组总容量= 759880BX10=7 598 800B    6片可用的面为10  面信息×面数</p><p>(3)：磁盘数据传输率D<sub>r</sub>= rN                 N为每条磁道容量，N=3454B<br>r为磁盘转速，r=6000转/60秒=100转/秒   （注意换算单位!!!）<br>D,=rN= 100X 3454B= = 345400B/s         每条磁道容量×磁道数量</p><blockquote><p>注意如果要转换成KB/s，除1024而不是除1000</p></blockquote><p>(4)：最小单位是一个记录块（一个扇区）</p><p>此地址格式表示有4台磁盘，每台有16个记录面，每面有256个磁道，每道有16个扇区</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200610184101789.png"  alt="image-20200610184101789"></p><blockquote><p>台号(一般为2)—&gt;磁道—&gt;面数—&gt;扇区(一般为4)</p></blockquote><p>(5)：如果某文件长度超过一个磁道的容量，应将它记录在同一个柱面上，因为不需要重新找道，数据读/写速度快。</p><blockquote><p>同一柱面同时读的是多个存储面相同位置的那一圈，同一面那就得在不同圈，需要找道也就是找到那一圈的位置。</p></blockquote><p>2.若磁盘转速为7200 转/分，平均寻道时间为 8ms,每个磁道包含 1000 个扇区，则访问一个扇区的平均<strong>存取</strong>时间大约是（ B ）</p><p>A.8.1msB.12.2msC.16.3msD.20.5ms</p><p>答：存取时间=寻道时间+延迟时间+传输时间</p><p>延迟时间等于旋转半圈的时间，1分钟7200圈，那半圈时间为 (60/7200)/2=4.17ms</p><p>传输时间等于转过一个扇区的时间即为(60/7200)/1000=0.01ms</p><p>所以为4.17+0.01+8=12.18ms，保留一位小数则为 12.2ms</p><p>3.假定一台计算机的显示存储器用DRAM芯片实现，若要求显示分辨率为1600×1200，颜色深度为24位，帧频为85Hz，显存总带宽的50%用来刷新屏幕，则需要的显存总带宽至少约为（ D ）</p><p>A.245Mbit/sB.979Mbit/sC.1958Mbit/sD.7834Mbit/s</p><p>答：刷新所需带宽=分辨率×色深×帧频=1600×1200×24bit×85/s=3916.8Mbit/s</p><p>因为显存总带宽的50%用来刷新屏幕，所以显存总带宽为3916.8Mbit/s×2=7834Mbit/s</p><p>4.磁盘的盘面上有很多半径不同的同心圆，这些同心圆称为( B )</p><p>A、扇区B、磁道C、柱面D、磁表面</p><p>答：可以把磁盘想象成一摞蚊香。磁道就是蚊香的一圈，扇区就是蚊香一圈的某个弧段。而柱面相当于在一摞蚊香中间插个柱子那个圆柱就是柱面。读取信息时同时读取一摞蚊香的同一圈(像老式留音机一样)</p><p>5.已知某磁盘存储器转速为2400转/分，每个记录面道数为200道，平均找道时间为60ms,每道存储容量为96Kb，求磁盘的存取时间与数据传输率。</p><p>答：存取时间=平均查找时间+平均等待时间(半圈时间)=60+(60/2400)*1/2*1000=72.5ms</p><p>Dr=96*(2400/60)=3840Kb/s=480KB/s</p><blockquote><p>注意b是位，B是字节，1B=8b</p></blockquote><h1>输入输出系统</h1><h2 id="知识点-v8"><a class="header-anchor" href="#知识点-v8">¶</a>知识点</h2><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200618151509519.png"  alt="image-20200618151509519"></p><p>1.CPU管理外围设备大致有三种方式   下面类比成让10个孩子分别吃两个雪糕的问题</p><ul><li>程序查询方式：先盯着甲吃完一个再给一个然后盯着乙吃完，以此类推</li><li>程序中断方式：每人发一根，谁吃完举手报告再发第二根,等待过程可干其他的事</li><li>直接内存访问(DMA)方式：每人拿两根，都吃完再报告</li></ul><p>2.程序查询方式下，CPU和外围设备之间的传送完全靠计算机程序控制，需要输入输出时，CPU暂停主程序转去执行设备的输入输出服务程序。简单经济但浪费时间。</p><p>DMA方式传送数据，每传送一个数据就要占用一个<strong>存储周期</strong>时间</p><p>DMA方式下DMA控制器从CPU完全接管对总线的控制，数据交换不用经过CPU，直接在内存和I/O设备之间进行。</p><p>3.中断处理过程由硬件和软件完成</p><ul><li>响应中断：有请求就得有响应</li><li>关中断：不再受理其它中断   （要用到状态条件寄存器PSW）</li><li>保存PC：即保存断点，使得中断服务子程序处理完后可以返回原主程序</li><li>保存现场：中断服务子程序修改的寄存器可能会与原寄存器冲突所以先保存 （栈实现）</li><li>设备服务：也就是中断处理程序，该咋处理咋处理</li><li>开中断：表示CPU现在可以受理中断了</li><li>中断返回：先恢复现场(恢复原保存的寄存器和标志位)再恢复断点(返回原主程序)</li></ul><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200618154711318.png"  alt="image-20200618154711318" style="zoom:80%;" /><p>从图中我们也可以看出CPU是在结束一个指令周期后检测中断请求信号</p><p>4.中断屏蔽触发器(IM)置0表示CPU可受理外界中断请求，为1表不受理外界中断(1为真即屏蔽)</p><p>单级中断：所有中断源处于同一级，排成一行，离CPU近的优先权高</p><p>多级中断：把中断源分成若干级别，级别高的可以打断级别低的(同级的不行)</p><p>5.中断向量地址是指<strong>中断服务程序入口地址</strong></p><h2 id="习题-v8"><a class="header-anchor" href="#习题-v8">¶</a>习题</h2><p>1.某机器有 4个中断源，中断响应优先级按1→2→3→4降序排列，若想将中断处理<br>次序改为3→1→4→2，则1、2、3、4中断源对应的屏蔽字分别是为___________________</p><p>答：屏蔽字为1表示真即屏蔽了，就是不能打断它的意思，那为0就是可以打断它</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@latest/images/image-20200618160111614.png"  alt="image-20200618160111614"></p><blockquote><p>主要是看中断处理次序，比如1的屏蔽字，1前面有3，即只有3可以打断它，那么把响应优先级的第三位置为0其他均为1。也可看1后面有4和2，意味着1、4、2不能打断他，即把第1、2、4位置1其他置0即可    （两种思想一个结果）</p><p>以后统一用第一种置0的不容易错</p></blockquote><p>2.屏蔽字问题不要被迷惑，只看响应和处理优先级就行<img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200618161107440.png"  alt="image-20200618161107440"></p><p>答：本题给了中断屏蔽字格式为M<sub>4</sub>M<sub>3</sub>…，那么屏蔽字的第一位到底代表L<sub>4</sub>还是L<sub>0</sub>呢</p><p>M<sub>4</sub>对应L<sub>4</sub>级别也就是最高级别，而最高级别是L<sub>0</sub>，所以第一位代表的是L<sub>0</sub></p><p>其实这种题只看优先级顺序就行，优先级为L<sub>0</sub><sub>L</sub>4<sub>那么屏蔽字每位对应的也是L</sub>0<sub>～L</sub>4~</p><p>可以打断L1的为L4、L0和L2那么把优先级中这些位置置为0即可</p><p>3.某计算机处理器主频为50MHz,采用定时查询方式控制设备A的I/O,查询程序运行一次所用的时钟周期至少为500。在设备A工作期间，为保证数据不丢失，每秒需对其查询至少200次，则CPU用于设备A的I/O时间占整个CPU时间的百分比至少是（  0.2%  ）</p><p>答：每次查询需要500个周期，每秒要查询200次即需要200*500=10<sup>5</sup>个周期</p><p>而主频为50MHz即每秒有50*10<sup>6</sup>个周期</p><p>那么占比为  10<sup>5</sup>/50*10<sup>6</sup>=1/500=0.002= 0.2%</p><p>4.中断服务程序执行过程<img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200618164623663.png"  alt="image-20200618164623663"></p><p>答：此题选A。注意本题问的是中断服务程序的顺序也就是知识点中图片的右半部分，而保存断点(区别保存现场)和关中断都是中断隐指令的操作，由硬件完成</p><p>5.I/O总线：主机和I/O设备之前通过这个总线连接</p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200618183826339.png"  alt="image-20200618183826339"  /><p>答：I/O总线即输入输出总线。肯定就得有指出啥指令的命令字。判断其状态的状态字。而且也得有中断，比如键盘输入引起的中断那肯定也得有中断类型号。</p><p>6.下列选项中，能引起外部中断的事件是（ A ）</p><p>A.键盘输入B.除数为0C.浮点运算下溢D.访存缺页</p><p>答：服务于自己就是内中断，服务于别人就是外中断</p><p>A：键盘输入属于外部事件，CPU要想读取外部的输入就得执行中断暂停主程序转而去读取外部键盘输入</p><p>B：除数为0属于异常，也就是内中断，发生在CPU内部。</p><p>C：浮点运算下溢将按机器零处理，不会产生中断。</p><p>D：访存缺页属于CPU执行指令时产生的中断，也不属于外部中断。</p><blockquote><p>此题只需看外部这两个字就可快速选择键盘，其他仨都是CPU内部的东西</p></blockquote><p>7.中断处理和子程序调用都需要压栈以保护现场，中断处理一定会保存而子程序调用不需 要保存其内容的是____________B_________</p><p>A.程序计数器B.程序状态字寄存器C.通用数据寄存器D.通用地址寄存器</p><p>答：程序计数器即PC二者都需要，因为都要返回原主程序。而程序状态字寄存器(PSW)里面保存中断允许标志位和系统工作状态(如进位标志等)等信息。执行中断隐指令时，需要关中断，保护PC需要PC和PSW。所以子程序调用和PSW无关</p><p>8.中断I/O和DMA的比较</p><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/zss192/Typora-notes@master/images/image-20200618192202277.png"  alt="image-20200618192202277"></p><p>答：中断处理方式：在I/O设备输入每个数据的过程中，由于无需CPU干预，因而可使CPU与I/O设备并行工作。仅当输完一个数据时，才需CPU花费极短的时间去做些中断处理。因此中断申请使用的是CPU处理时间，发生的时间是在一条指令执行结束之后，数据是在软件的控制下完成传送。而DMA方式与之不同。DMA方式：数据传输的基本单位是数据块，即在CPU与I/O设备之间，每次传送至少一个数据块；DMA方式每次申请的是总线的使用权，所传送的数据是从设备直接送入内存的，或者相反；仅在传送一个或多个数据块的开始和结束时，才需CPU干预，整块数据的传送是在控制器的控制下完成的。答案D的说法不正确。</p><p>9.某同步总线的时钟频率为100MHz，宽度为32位，地址/数据线复用，每传输一个地址或数据占用一个时钟周期。若该总线支持突发（猝发）传输方式，则一次“主存写”总线事务传输128位数据所需要的时间至少是（ C ）。</p><p>A.20nsB.40nsC.50nsD.80ns</p><p>答：总线频率为100MHz，则时钟周期为10ns。由于支持突发传送可以连续传送地址连续的数据。传送地址10ns，传送128位数据即4个数据40ns，共需50ns。</p><blockquote><p>平常传送一个数据需要两个时钟周期，先传地址再传数据。突发传输下可将多个连续的数据看成一个数据(不是一周期传完是不用专门一个一个传地址)，也就是先传首地址，之后就可每一个周期传一次数据</p></blockquote><p>10.周期挪用方式常用于___________A___方式的输入/输出中。</p><p>A.DMAB.中断C.程序传送D.通道</p><p>答：周期挪用是指利用CPU不访问存储器的那些周期来实现DMA操作，此时DMA可以使用总线而不用通知CPU也不会妨碍CPU的工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;为迎接期末，总结了下知识点，供个人复习使用，仅供参考。&lt;/p&gt;
&lt;p&gt;本文用到的复习资料：&lt;a href=&quot;https://pan.baidu.com/s/1s4kU4UtgG7xiUyssDvuwKw&quot;&gt;点我跳转&lt;/a&gt;，提取码：1l49&lt;/p</summary>
      
    
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    
    <category term="计算机专业课" scheme="https://zss192.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>由快速合并图片引发的思考</title>
    <link href="https://zss192.github.io/2020/06/03/%E7%94%B1%E5%BF%AB%E9%80%9F%E5%90%88%E5%B9%B6%E5%9B%BE%E7%89%87%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://zss192.github.io/2020/06/03/%E7%94%B1%E5%BF%AB%E9%80%9F%E5%90%88%E5%B9%B6%E5%9B%BE%E7%89%87%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</id>
    <published>2020-06-03T01:46:00.000Z</published>
    <updated>2021-03-30T03:45:21.153Z</updated>
    
    <content type="html"><![CDATA[<h1>写在前面</h1><p>我在上篇文章里分享了自己的科目一经验：<a href="http://zssblog.top/2020/06/02/%E7%A7%91%E7%9B%AE%E4%B8%80%E5%BF%85%E8%BF%87%E5%AE%9D%E5%85%B8/">点我查看</a>，但细心地大家会发现在图片标题下都是手机截屏的图片合并成一张的，在次记录下整个合并过程(linux+python)。</p><h1>目的</h1><p>手机上的图片都是长方形显然不可能直接一张就显示在页面上，为此我们需要每几张合并成一张优化体验。<br>起初我尝试在线网站合并图片，奈何总共100多张图片太麻烦了，这一点不符合一个it行业的人做的事(hhha)。<br>于是突然想到可以用Linux的convert命令。</p><p>以下命令代表将1.jpg、2.jpg、3.jpg水平合并成new1.jpg</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert +append <span class="number">1</span>.jpg <span class="number">2</span>.jpg <span class="number">3</span>.jpg new1.jpg</span><br></pre></td></tr></table></figure><h1>着手去做</h1><p>由于是手机上的图片传到电脑上的，文件名杂乱不齐。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602223548569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>首先我们需要先让每个图片的名字有序化<br>于是我写了个简单的Python脚本将其命名为1、2、3等名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">&quot;/home/zss/Desktop/kemuyi&quot;</span></span><br><span class="line">pic_list = os.listdir(path)</span><br><span class="line">n=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pic_list:</span><br><span class="line">os.rename(i,<span class="string">&quot;./&quot;</span>+<span class="built_in">str</span>(n)+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">n+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;重命名成功&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果如下<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602223736194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>接下来就是重复的使用convert命令来合并这些图片。本来我是想用shell脚本来直接执行，奈何过了半年老师讲的shell脚本知识早已还给老师了。<br>这时候还是得祭出Python，我们可以用Python把这些命令输出出来，然后再执行下就可，说干就干。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">&quot;convert +append &quot;</span></span><br><span class="line">houzhui=<span class="string">&quot;.jpg &quot;</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">44</span>):</span><br><span class="line"><span class="built_in">print</span>(string,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">3</span>*m+n+<span class="number">1</span>)+houzhui,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;new&quot;</span>+<span class="built_in">str</span>(m+<span class="number">1</span>)+<span class="string">&quot;.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602224055827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>接下来只需将这些命令复制到shell脚本中执行即可。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602224155115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>这里放一张合并后的照片<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200602224309544.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pzczE5Mg==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>至此全部完成。</p><h1>写在后面</h1><p>通过简单的小案例让我更加明白改变生活的不是科技，而是Linux+Python(手动加狗头🐶)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;写在前面&lt;/h1&gt;
&lt;p&gt;我在上篇文章里分享了自己的科目一经验：&lt;a href=&quot;http://zssblog.top/2020/06/02/%E7%A7%91%E7%9B%AE%E4%B8%80%E5%BF%85%E8%BF%87%E5%AE%9D%E5%85%B8/&quot;</summary>
      
    
    
    
    <category term="日常办公" scheme="https://zss192.github.io/categories/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
    
    <category term="日常办公" scheme="https://zss192.github.io/tags/%E6%97%A5%E5%B8%B8%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
</feed>
